{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/work/channelCode/createCode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/work/channelCode/createCode.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\";\nimport uploadPictures from \"@/components/uploadPictures\";\nimport department from \"@/components/department/index.vue\";\nimport { getNewFormBuildRuleApi } from \"@/api/setting\";\nimport { workLabel, workChannelCate, saveWorkCode, getWorkCodeInfo, workCodeUpdate } from \"@/api/work\";\nimport { log } from 'util';\nexport default {\n  name: \"\",\n  data: function data() {\n    return {\n      current: 0,\n      formItem: {\n        userList: [],\n        //添加成员\n        name: \"\",\n        //名称\n        cate_id: 0,\n        //分类ID\n        label_id: [],\n        //标签ID\n        type: \"0\",\n        //类型：0=全天在线；1=自动上下线\n        userids: [],\n        //全天在线成员\n        skip_verify: 0,\n        //自动加好友：0=关闭，1=开启\n        add_upper_limit: 0,\n        //员工添加上限0=关闭,1=开启\n        useridLimit: [],\n        //员工\n        reserve_userid: [],\n        //备用成员\n        cycle: [{\n          wokr_time: [],\n          userids: [],\n          workTime: \"\"\n        }],\n        welcome_type: \"0\",\n        welcome_words: {\n          text: {\n            content: \"\"\n          },\n          attachments: []\n        },\n        status: 1 //状态：1=开启，0=关闭\n\n      },\n      weekList: [{\n        value: 1,\n        label: '周一'\n      }, {\n        value: 2,\n        label: '周二'\n      }, {\n        value: 3,\n        label: '周三'\n      }, {\n        value: 4,\n        label: '周四'\n      }, {\n        value: 5,\n        label: '周五'\n      }, {\n        value: 6,\n        label: '周六'\n      }, {\n        value: 0,\n        label: '周日'\n      }],\n      rontineObj: {\n        msgtype: \"miniprogram\",\n        miniprogram: {\n          pic_url: \"\",\n          pic_media_id: \"\",\n          title: \"\",\n          appid: \"\",\n          page: \"\"\n        }\n      },\n      imageObj: {\n        msgtype: \"image\",\n        image: {\n          media_id: \"\",\n          pic_url: \"\"\n        }\n      },\n      picTit: \"\",\n      ruleValidate: {\n        name: [{\n          required: true,\n          message: \"名称不能为空\",\n          trigger: \"blur\"\n        }],\n        cate_id: [{\n          required: true,\n          message: '请选择渠道码分类',\n          trigger: 'change'\n        }],\n        type: [{\n          required: true,\n          message: '请选择类型',\n          trigger: 'change'\n        }],\n        label_id: [{\n          required: true,\n          message: '请选择客户标签',\n          trigger: 'change',\n          type: 'array'\n        }]\n      },\n      //客户标签列表\n      labelList: [],\n      //渠道码分类列表\n      //备用员工表格\n      reserveUser: [{\n        title: \"员工名称\",\n        slot: \"name\",\n        minWidth: 80,\n        align: \"center\"\n      }, {\n        title: \"上限\",\n        slot: \"max\",\n        minWidth: 100,\n        align: \"center\"\n      }],\n      cycleitemIndex: 0,\n      channelCateList: [],\n      modalPic: false,\n      modalRoutine: false,\n      memberStatus: false,\n      isChoice: \"单选\",\n      gridBtn: {\n        xl: 4,\n        lg: 8,\n        md: 8,\n        sm: 8,\n        xs: 8\n      },\n      gridPic: {\n        xl: 6,\n        lg: 8,\n        md: 12,\n        sm: 12,\n        xs: 12\n      },\n      treeData: [],\n      frame_id: 0,\n      activeDepartment: {},\n      isSite: true,\n      onlyDepartment: false,\n      openType: '',\n      userList: [],\n      userLimitAll: {},\n      switchStatus: false //监听切换全天在线的状态\n\n    };\n  },\n  components: {\n    uploadPictures: uploadPictures,\n    department: department\n  },\n  computed: _objectSpread({}, mapState(\"admin/layout\", [\"isMobile\", \"menuCollapse\"]), {\n    labelWidth: function labelWidth() {\n      return this.isMobile ? undefined : 80;\n    },\n    labelPosition: function labelPosition() {\n      return this.isMobile ? \"top\" : \"left\";\n    }\n  }),\n  created: function created() {\n    if (this.$route.params.id !== \"0\" && this.$route.params.id) {\n      this.getInfo();\n    }\n\n    this.getWorkLabel();\n    this.getWorkChannelCate();\n  },\n  watch: {\n    'formItem.type': function formItemType(val, oldVal) {\n      if (val !== oldVal) {\n        this.formItem.userids = []; // this.formItem.useridLimit = []\n      }\n    },\n    'formItem.useridLimit': function formItemUseridLimit(val, oldVal) {\n      this.userLimitAll[parseInt(this.formItem.type)] = this.formItem.useridLimit;\n    }\n  },\n  methods: {\n    changeType: function changeType(value) {\n      this.formItem.useridLimit = this.userLimitAll[parseInt(value)] || [];\n    },\n    //获取客户标签\n    getWorkLabel: function getWorkLabel() {\n      var _this = this;\n\n      workLabel().then(function (res) {\n        _this.labelList = res.data.map(function (org) {\n          return _this.mapTree(org);\n        });\n      });\n    },\n    mapTree: function mapTree(org) {\n      var _this2 = this;\n\n      var haveChildren = Array.isArray(org.children) && org.children.length > 0;\n      return {\n        //分别将我们查询出来的值做出改变他的key\n        title: org.label,\n        expand: true,\n        value: org.value,\n        selected: false,\n        checked: false,\n        children: haveChildren ? org.children.map(function (i) {\n          return _this2.mapTree(i);\n        }) : []\n      };\n    },\n    //获取分类列表\n    getWorkChannelCate: function getWorkChannelCate() {\n      var _this3 = this;\n\n      workChannelCate().then(function (res) {\n        _this3.channelCateList = res.data;\n      });\n    },\n    //表格Input\n    setData: function setData(e, index, type) {\n      e.target.value = e.target.value.replace(/\\D/g, '');\n      this.formItem.useridLimit[index][type] = e.target.value;\n    },\n    //确认人员\n    changeMastart: function changeMastart(arr, type) {\n      if (type == 'one') {\n        this.formItem.useridLimit = arr.map(function (item) {\n          return {\n            userid: item.userid,\n            name: item.name,\n            max: 100\n          };\n        });\n        this.formItem.userList = arr.map(function (item) {\n          return {\n            userid: item.userid,\n            name: item.name\n          };\n        }); // this.userLimitAll[parseInt(this.formItem.type)] = this.formItem.useridLimit;\n      } else if (type == 'two') {\n        this.formItem.reserve_userid = arr.map(function (item) {\n          return {\n            userid: item.userid,\n            name: item.name\n          };\n        });\n      } else if (type == 'three') {\n        for (var i = 0; i < this.formItem.cycle.length; i++) {\n          if (i == this.cycleitemIndex) {\n            this.formItem.cycle[i].userids = arr.map(function (item) {\n              return {\n                userid: item.userid,\n                name: item.name\n              };\n            });\n          }\n        }\n\n        for (var c = 0; c < arr.length; c++) {\n          var userItem = arr[c];\n          this.formItem.useridLimit.push(Object.assign({\n            max: 100\n          }, userItem));\n        }\n\n        var newArr = this.unique(this.formItem.useridLimit, 'name');\n        this.$set(this.formItem, 'useridLimit', newArr);\n        this.this.userLimitAll[parseInt(this.formItem.type)] = newArr;\n      }\n    },\n    //tag标签删除成员\n    handleDel: function handleDel(e, name) {\n      var index = this.formItem.userList.findIndex(function (j) {\n        return j.name == name;\n      });\n      this.formItem.userList.splice(index, 1);\n\n      if (this.formItem.add_upper_limit) {\n        var i = this.formItem.useridLimit.findIndex(function (item) {\n          return item.name == name;\n        });\n        this.formItem.useridLimit.splice(i, 1);\n      }\n    },\n    //备用员工删除\n    handleClose: function handleClose(index) {\n      this.formItem.reserve_userid.splice(index, 1);\n    },\n    //周期成员tag删除\n    cycleItemDel: function cycleItemDel(name, index) {\n      this.formItem.cycle.forEach(function (item, i) {\n        if (index == i) {\n          //点击时传的下标与周期数组的下标匹配\n          //只在对应的周期内操作\n          var _index = item.userids.indexOf(name); //周期内的员工列表与点击时传的员工姓名进行匹配，找到就返回下标\n\n\n          item.userids.splice(_index, 1); //删除对应周期内所选员工\n        }\n      }); //用传进来的员工姓名匹配员工添加上限表格数组，返回下标\n\n      var i = this.formItem.useridLimit.findIndex(function (item) {\n        return item.name == name;\n      }); //在员工添加上限的数组中删除所选的员工\n\n      this.formItem.useridLimit.splice(i, 1);\n    },\n    //欢迎语tag删除\n    wordsDel: function wordsDel(name) {\n      var index = this.formItem.welcome_words.attachments.indexOf(name);\n      this.formItem.welcome_words.attachments.splice(index, 1);\n    },\n    //追加周期成员\n    pushCycle: function pushCycle() {\n      this.formItem.cycle.push({\n        wokr_time: [],\n        userids: \"\",\n        workTime: \"\"\n      });\n    },\n    //删除周期成员\n    cycleDel: function cycleDel(e, name) {\n      var index = this.formItem.cycle.indexOf(name);\n      this.formItem.cycle.splice(index, 1);\n    },\n    //插入客户名称\n    insertName: function insertName() {\n      this.formItem.welcome_words.text.content = this.formItem.welcome_words.text.content.concat('##客户名称##');\n    },\n    next: function next(name) {\n      var _this4 = this;\n\n      if (this.current == 0) {\n        this.$refs[name].validate(function (valid) {\n          if (valid) {\n            _this4.current++;\n          }\n        });\n      } else if (this.current == 1) {\n        if (this.formItem.type == \"0\" && !this.formItem.userList.length) return this.$Message.error(\"请添加成员\");\n        if (this.formItem.type == \"1\" && !this.formItem.cycle.length) return this.$Message.error(\"请添加成员\");\n        if (!this.formItem.reserve_userid.length) return this.$Message.error(\"备用成员不能为空\");\n        this.current++;\n      }\n    },\n    back: function back() {\n      this.current--;\n    },\n    //详情\n    getInfo: function getInfo() {\n      var _this5 = this;\n\n      getWorkCodeInfo(this.$route.params.id).then(function (res) {\n        _this5.formItem = res.data;\n        _this5.formItem.cate_id = _this5.formItem.cate_id.toString();\n        _this5.formItem.type = _this5.formItem.type.toString();\n        _this5.formItem.welcome_type = _this5.formItem.welcome_type.toString();\n\n        var reserveArr = _this5.userParse(_this5.formItem.reserve_userid, _this5.formItem.reserve_user_list, 'one');\n\n        _this5.formItem.reserve_userid = reserveArr;\n        _this5.formItem.useridLimit = res.data.useridLimit;\n        _this5.userLimitAll[parseInt(_this5.formItem.type)] = res.data.useridLimit;\n        _this5.formItem.userList = res.data.user_list;\n\n        if (_this5.formItem.type == '0') {\n          var personArr = _this5.userParse(_this5.formItem.presentUseUserIds, _this5.formItem.presentUseUserList, 'one');\n\n          _this5.formItem.userids = personArr;\n          _this5.formItem.cycle[0] = {\n            userids: [],\n            wokr_time: [],\n            workTime: []\n          };\n        } else {\n          _this5.formItem.cycle = _this5.formItem.cycle.map(function (item) {\n            return {\n              channel_id: item.channel_id,\n              wokr_time: item.wokr_time,\n              workTime: [item.start_time, item.end_time],\n              userids: item.userItem\n            };\n          }); // let limitArr = [],newArr = [],userInfo;\n          // this.formItem.cycle.forEach(item=>{\n          //   item.userids.forEach(item1=>{\n          //     limitArr.push(item1);\n          //   })\n          // })\n          // this.formItem.useridLimit.forEach(item=>{\n          //   limitArr.forEach(item1=>{\n          //     if(item.userid == item1.userid){\n          //       userInfo = item;\n          //       userInfo.name = item1.name;\n          //       newArr.push(userInfo);\n          //     }\n          //   })\n          // })\n          //  this.formItem.useridLimit = newArr;\n          // this.$set(this.formItem,'useridLimit',newArr);\n        }\n      });\n    },\n    //提交\n    submit: function submit() {\n      var _this6 = this;\n\n      if (this.formItem.welcome_type == \"0\" && this.formItem.welcome_words.text.content == \"\") return this.$Message.error('请插入客户名称'); // if(this.formItem.welcome_type == \"0\" && !this.formItem.welcome_words.attachments.length) return this.$Message.error('请添加小程序或者图片')\n\n      var formData = this.deepClone(this.formItem);\n\n      if (formData.cycle.length) {\n        formData.cycle = formData.cycle.map(function (item) {\n          return {\n            userids: item.userids.map(function (item1) {\n              return item1.userid;\n            }),\n            wokr_time: item.wokr_time,\n            start_time: item.workTime[0],\n            end_time: item.workTime[1]\n          };\n        });\n      }\n\n      if (formData.useridLimit.length) {\n        formData.useridLimit = formData.useridLimit.map(function (item) {\n          return {\n            userid: item.userid,\n            max: item.max\n          };\n        });\n      }\n\n      if (formData.reserve_userid.length) {\n        formData.reserve_userid = formData.reserve_userid.map(function (item) {\n          return item.userid;\n        });\n      }\n\n      if (formData.userList.length) {\n        formData.userids = formData.userList.map(function (item) {\n          return item.userid;\n        });\n      }\n\n      formData.type = Number(formData.type);\n      formData.welcome_type = Number(formData.welcome_type);\n\n      if (this.$route.params.id !== \"0\" && this.$route.params.id) {\n        workCodeUpdate(this.$route.params.id, formData).then(function (res) {\n          _this6.$Message.success(\"修改成功\");\n\n          _this6.$router.push('/admin/work/channel_code');\n        }).catch(function (err) {\n          _this6.$Message.error(err.msg);\n\n          _this6.loading = false;\n        });\n      } else if (!this.$route.params.id) {\n        saveWorkCode(formData).then(function (res) {\n          _this6.$Message.success(\"渠道码新建成功\");\n\n          _this6.$router.push('/admin/work/channel_code');\n        }).catch(function (err) {\n          _this6.$Message.error(err.msg);\n        });\n      }\n    },\n    //添加小程序\n    addRoutine: function addRoutine() {\n      var _this7 = this;\n\n      getNewFormBuildRuleApi('routine').then(function (res) {\n        var data = res.data;\n        _this7.rontineObj.miniprogram.pic_url = '';\n        _this7.rontineObj.miniprogram.title = data.routine_name.value;\n        _this7.rontineObj.miniprogram.appid = data.routine_appId.value;\n        _this7.rontineObj.miniprogram.page = '/pages/index/index';\n      });\n      this.modalRoutine = true;\n    },\n    //添加图片\n    modalPicTap: function modalPicTap(picTit) {\n      this.modalPic = true;\n      this.picTit = picTit;\n    },\n    // 选中图片\n    getPic: function getPic(pc) {\n      switch (this.picTit) {\n        case \"image\":\n          this.imageObj.image.pic_url = pc.att_dir;\n          this.formItem.welcome_words.attachments.push(this.imageObj);\n          break;\n\n        case \"routine\":\n          this.rontineObj.miniprogram.pic_url = pc.att_dir;\n          break;\n      }\n\n      this.modalPic = false;\n    },\n    //小程序添加模态框确认操作\n    routineConfirm: function routineConfirm() {\n      var routine = this.deepClone(this.rontineObj);\n      this.formItem.welcome_words.attachments.push(routine);\n    },\n    addUser: function addUser(type, index) {\n      this.$refs.department.memberStatus = true;\n\n      switch (type) {\n        case 'one':\n          this.userList = this.formItem.userList;\n          this.$refs.department.openType = 'one';\n          break;\n\n        case 'two':\n          this.userList = this.formItem.reserve_userid;\n          this.$refs.department.openType = 'two';\n          break;\n\n        case 'three':\n          this.cycleitemIndex = index;\n\n          if (this.formItem.cycle[index].userids.length) {\n            this.userList = this.formItem.cycle[index].userids;\n          }\n\n          this.$refs.department.openType = 'three';\n          break;\n\n        default:\n          break;\n      }\n    },\n    //数组去重\n    unique: function unique(arr, u_key) {\n      var map = new Map();\n      arr.forEach(function (item, index) {\n        if (!map.has(item[u_key])) {\n          map.set(item[u_key], item);\n        }\n      });\n      return _toConsumableArray(map.values());\n    },\n    //深克隆\n    deepClone: function deepClone(obj) {\n      var newObj = Array.isArray(obj) ? [] : {};\n\n      if (obj && _typeof(obj) === \"object\") {\n        for (var key in obj) {\n          if (obj.hasOwnProperty(key)) {\n            newObj[key] = obj && _typeof(obj[key]) === 'object' ? this.deepClone(obj[key]) : obj[key];\n          }\n        }\n      }\n\n      return newObj;\n    },\n    userParse: function userParse(arr1, arr2, type) {\n      var userArr = [],\n          userObj = {};\n\n      if (type == 'one') {\n        userArr = arr1.map(function (item) {\n          return {\n            userid: item\n          };\n        });\n        arr2.forEach(function (item1, index1) {\n          userArr[index1].name = item1;\n        });\n        return userArr;\n      } else {\n        userArr = arr1.map(function (item) {\n          return {\n            userid: item.userid,\n            channel_id: item.channel_id,\n            max: item.max\n          };\n        });\n        arr2.forEach(function (item1, index1) {\n          userArr[index1].name = item1;\n        });\n        return userArr;\n      }\n    }\n  }\n};",null]}