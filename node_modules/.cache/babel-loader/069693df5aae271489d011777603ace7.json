{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/store/cashierMenus/components/menusFrom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/store/cashierMenus/components/menusFrom.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { addMenusApi, addMenus, getRuleList as _getRuleList } from \"@/api/systemMenus\";\nimport icon from \"@/utils/icon\";\nexport default {\n  name: \"menusFrom\",\n  props: {\n    formValidate: {\n      type: Object,\n      default: null\n    },\n    titleFrom: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data: function data() {\n    return {\n      arrs: [],\n      searchRule: \"\",\n      iconVal: \"\",\n      grid: {\n        xl: 12,\n        lg: 12,\n        md: 12,\n        sm: 24,\n        xs: 24\n      },\n      modals: false,\n      modal12: false,\n      ruleValidate: {// menu_name: [\n        //   { required: true, message: \"请输入按钮名称\", trigger: \"blur\" },\n        // ],\n        // menu_path: [\n        //   { required: true, message: \"请输入路由名称\", trigger: \"blur\" },\n        // ],\n        // methods: [\n        //   { required: true, message: \"请选择接口请求方式\", trigger: \"blur\" },\n        // ],\n        // api_url: [\n        //   { required: true, message: \"请填写接口请求地址\", trigger: \"blur\" },\n        // ],\n      },\n      FromData: [],\n      valids: false,\n      list2: [],\n      list: icon,\n      authType: true,\n      search: icon,\n      ruleModal: false,\n      ruleList: []\n    };\n  },\n  watch: {\n    \"formValidate.header\": function formValidateHeader(n) {\n      this.formValidate.is_header = n ? 1 : 0;\n    },\n    \"formValidate.auth_type\": function formValidateAuth_type(n) {\n      if (n === undefined) {\n        n = 1;\n      }\n\n      this.authType = n === 1;\n    },\n    \"formValidate.data\": function formValidateData(n) {}\n  },\n  computed: {\n    /* eslint-disable */\n    optionsList: function optionsList() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"pid\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    headerOptionsList: function headerOptionsList() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"header\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    optionsListmodule: function optionsListmodule() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"module\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    optionsRadio: function optionsRadio() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"auth_type\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    isheaderRadio: function isheaderRadio() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"is_header\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    isShowRadio: function isShowRadio() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"is_show\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    isShowPathRadio: function isShowPathRadio() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"is_show_path\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    menuList: function menuList() {\n      var a = [];\n      this.FromData.map(function (item) {\n        if (\"menu_list\" === item.field) {\n          a = item.props.data;\n        }\n      });\n      return a;\n    }\n  },\n  methods: {\n    // 获取权限列表\n    getRuleList: function getRuleList() {\n      var _this = this;\n\n      _getRuleList(2).then(function (res) {\n        _this.ruleList = res.data;\n        _this.ruleModal = true;\n      });\n    },\n    modalchange: function modalchange(type) {\n      if (!type) {\n        this.arrs = [];\n        this.ruleModal = \"\";\n        this.ruleModal = false;\n      }\n    },\n    visible: function visible(type) {\n      if (!type) {\n        this.authType = true;\n      }\n    },\n    selectRule: function selectRule(data) {\n      var _this2 = this;\n\n      this.$emit(\"selectRule\", data);\n      this.$nextTick(function (e) {\n        _this2.ruleModal = false;\n      }); // this.$set(this, \"ruleModal\", false);\n    },\n    changeRadio: function changeRadio(n) {\n      this.authType = n === 1 ? true : false;\n    },\n    // 搜索\n    upIcon: function upIcon(n) {\n      var arrs = [];\n\n      for (var i = 0; i < this.search.length; i++) {\n        if (this.search[i].type.indexOf(n) !== -1) {\n          arrs.push(this.search[i]);\n          this.list = arrs;\n        }\n      }\n    },\n    // 搜索规则\n    searchRules: function searchRules() {\n      if (this.searchRule.trim()) {\n        this.arrs = [];\n\n        for (var i = 0; i < this.ruleList.length; i++) {\n          if (this.ruleList[i].real_name.indexOf(this.searchRule) !== -1) {\n            this.arrs.push(i);\n          }\n        }\n      } else {\n        this.arrs = [];\n      }\n    },\n    init: function init() {\n      this.searchRule = \"\";\n      this.arrs = [];\n    },\n    handleCreate1: function handleCreate1(val) {\n      this.headerOptionsList.push({\n        value: val,\n        label: val\n      });\n    },\n    // 获取新增表单\n    getAddFrom: function getAddFrom() {\n      var _this3 = this;\n\n      addMenus(3).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(res) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this3.FromData = res.data.rules;\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this3.$Message.error(res.msg);\n      });\n    },\n    iconClick: function iconClick() {\n      this.modal12 = true;\n    },\n    iconChange: function iconChange(n) {\n      this.formValidate.icon = n;\n      this.modal12 = false;\n    },\n    // 提交\n    handleSubmit: function handleSubmit(name) {\n      var _this4 = this;\n\n      //判断是否选择父级分类\n      if (this.formValidate.path) {\n        var length = this.formValidate.path.length;\n        this.formValidate.pid = this.formValidate.path[length - 1] || 0;\n      }\n\n      var data = {\n        url: this.formValidate.id ? \"/setting/menus/\".concat(this.formValidate.id, \"?type=3\") : \"/setting/menus?type=3\",\n        method: this.formValidate.id ? \"put\" : \"post\",\n        datas: this.formValidate\n      };\n\n      if (this.authType) {\n        if (!this.formValidate.menu_name) {\n          return this.$Message.error(\"请添加按钮名称！\");\n        }\n\n        if (!this.formValidate.menu_path) {\n          return this.$Message.error(\"请添加路由地址！\");\n        }\n      } else {\n        if (!this.formValidate.menu_name) {\n          return this.$Message.error(\"请添加接口名称！\");\n        }\n\n        if (!this.formValidate.api_url) {\n          return this.$Message.error(\"请添加接口地址！\");\n        }\n      }\n\n      this.$refs[name].validate(function (valid) {\n        if (valid) {\n          _this4.valids = true;\n          addMenusApi(data).then(\n          /*#__PURE__*/\n          function () {\n            var _ref2 = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee2(res) {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _this4.$Message.success(res.msg);\n\n                      _this4.modals = false;\n\n                      _this4.$emit(\"getList\");\n\n                      _this4.getAddFrom();\n\n                      _this4.$store.dispatch(\"admin/menus/getMenusNavList\");\n\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }()).catch(function (res) {\n            _this4.valids = false;\n\n            _this4.$Message.error(res.msg);\n          });\n        }\n      });\n    },\n    handleReset: function handleReset() {\n      this.modals = false;\n      this.authType = true; // this.$refs[\"formValidate\"].resetFields();\n\n      this.$emit(\"clearFrom\");\n    }\n  },\n  created: function created() {\n    this.list = this.search; // this.getAddFrom();\n  }\n};",null]}