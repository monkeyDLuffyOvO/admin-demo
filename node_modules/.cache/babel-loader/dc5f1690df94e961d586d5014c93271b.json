{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/node_modules/iview/src/components/button/button.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview/src/components/button/button.vue","mtime":1566806371000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\nimport Icon from '../icon';\nimport { oneOf } from '../../utils/assist';\nimport mixinsLink from '../../mixins/link';\nvar prefixCls = 'ivu-btn';\nexport default {\n  name: 'Button',\n  mixins: [mixinsLink],\n  components: {\n    Icon: Icon\n  },\n  props: {\n    type: {\n      validator: function validator(value) {\n        return oneOf(value, ['default', 'primary', 'dashed', 'text', 'info', 'success', 'warning', 'error']);\n      },\n      default: 'default'\n    },\n    shape: {\n      validator: function validator(value) {\n        return oneOf(value, ['circle', 'circle-outline']);\n      }\n    },\n    size: {\n      validator: function validator(value) {\n        return oneOf(value, ['small', 'large', 'default']);\n      },\n      default: function _default() {\n        return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n      }\n    },\n    loading: Boolean,\n    disabled: Boolean,\n    htmlType: {\n      default: 'button',\n      validator: function validator(value) {\n        return oneOf(value, ['button', 'submit', 'reset']);\n      }\n    },\n    icon: {\n      type: String,\n      default: ''\n    },\n    customIcon: {\n      type: String,\n      default: ''\n    },\n    long: {\n      type: Boolean,\n      default: false\n    },\n    ghost: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      showSlot: true\n    };\n  },\n  computed: {\n    classes: function classes() {\n      var _ref;\n\n      return [\"\".concat(prefixCls), \"\".concat(prefixCls, \"-\").concat(this.type), (_ref = {}, _defineProperty(_ref, \"\".concat(prefixCls, \"-long\"), this.long), _defineProperty(_ref, \"\".concat(prefixCls, \"-\").concat(this.shape), !!this.shape), _defineProperty(_ref, \"\".concat(prefixCls, \"-\").concat(this.size), this.size !== 'default'), _defineProperty(_ref, \"\".concat(prefixCls, \"-loading\"), this.loading != null && this.loading), _defineProperty(_ref, \"\".concat(prefixCls, \"-icon-only\"), !this.showSlot && (!!this.icon || !!this.customIcon || this.loading)), _defineProperty(_ref, \"\".concat(prefixCls, \"-ghost\"), this.ghost), _ref)];\n    },\n    // Point out if it should render as <a> tag\n    isHrefPattern: function isHrefPattern() {\n      var to = this.to;\n      return !!to;\n    },\n    tagName: function tagName() {\n      var isHrefPattern = this.isHrefPattern;\n      return isHrefPattern ? 'a' : 'button';\n    },\n    tagProps: function tagProps() {\n      var isHrefPattern = this.isHrefPattern;\n\n      if (isHrefPattern) {\n        var linkUrl = this.linkUrl,\n            target = this.target;\n        return {\n          href: linkUrl,\n          target: target\n        };\n      } else {\n        var htmlType = this.htmlType;\n        return {\n          type: htmlType\n        };\n      }\n    }\n  },\n  methods: {\n    // Ctrl or CMD and click, open in new window when use `to`\n    handleClickLink: function handleClickLink(event) {\n      this.$emit('click', event);\n      var openInNewWindow = event.ctrlKey || event.metaKey;\n      this.handleCheckClick(event, openInNewWindow);\n    }\n  },\n  mounted: function mounted() {\n    this.showSlot = this.$slots.default !== undefined;\n  }\n};",null]}