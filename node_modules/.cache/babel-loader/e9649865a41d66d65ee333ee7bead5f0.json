{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/components/fromBuild/build.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/components/fromBuild/build.js","mtime":1654674167000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Schema from 'async-validator';\nimport { array } from 'js-md5';\nexport default {\n  props: {\n    options: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    //默认值\n    value: {\n      type: String | Number | Array,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: ''\n    },\n    //标题\n    title: {\n      type: String,\n      default: ''\n    },\n    //input类型\n    type: {\n      type: String,\n      default: 'text'\n    },\n    //input后缀\n    suffix: {\n      type: String,\n      default: ''\n    },\n    //input前缀\n    prefix: {\n      type: String,\n      default: ''\n    },\n    //样式\n    styleModel: {\n      type: String,\n      default: ''\n    },\n    //样式名称\n    className: {\n      type: String,\n      default: ''\n    },\n    //字段名称\n    field: {\n      type: String,\n      default: ''\n    },\n    timerType: {\n      type: String,\n      default: 'timerange'\n    },\n    timerFormat: {\n      type: String,\n      default: 'HH:mm:ss'\n    },\n    //说明\n    info: {\n      type: String,\n      default: ''\n    },\n    //事件\n    on: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    validate: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    errorsValidate: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      valueModel: this.value,\n      errorMessage: ''\n    };\n  },\n  watch: {\n    errorsValidate: {\n      handler: function handler(n) {\n        var _this = this;\n\n        if (n) {\n          var error = n.find(function (item) {\n            return item.field === _this.field;\n          });\n          this.errorMessage = error ? error.message : '';\n        } else {\n          this.errorMessage = '';\n        }\n      },\n      deep: true\n    }\n  },\n  methods: {\n    //获取class\n    getClassName: function getClassName() {\n      var value = ['input-build-' + this.field];\n\n      if (this.errorMessage) {\n        value.push('ivu-form-item-error');\n      }\n\n      var filter = this.validate[this.field] ? this.validate[this.field].filter(function (item) {\n        return item.required === true;\n      }) : [];\n\n      if (filter.length) {\n        value.push('ivu-form-item-required');\n      }\n\n      return value;\n    },\n    //事件回调绑定\n    changeEvent: function changeEvent(name, item) {\n      if ('change' === name) {\n        this.$emit('changeValue', {\n          field: this.field,\n          value: this.valueModel\n        });\n      }\n\n      this.on[name] && this.on[name](item); //验证数据\n\n      this.validator(name);\n    },\n    //数据验证\n    validator: function validator(name) {\n      var _this2 = this;\n\n      var filter = this.validate[this.field] ? this.validate[this.field].filter(function (item) {\n        return item.trigger === name;\n      }) : [];\n\n      if (!filter.length) {\n        return;\n      }\n\n      var validator = new Schema(this.validate);\n\n      var source = _defineProperty({}, this.field, this.valueModel);\n\n      validator.validate(source, function (errors, fields) {\n        if (errors) {\n          var error = errors.find(function (item) {\n            return item.field === _this2.field;\n          });\n          _this2.errorMessage = error ? error.message : '';\n        } else {\n          _this2.errorMessage = '';\n        }\n      });\n    }\n  }\n};",null]}