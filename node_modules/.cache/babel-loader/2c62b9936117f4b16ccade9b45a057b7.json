{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/system/group/components/groupFrom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/system/group/components/groupFrom.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { groupAddApi, groupInfoApi } from '@/api/system';\nexport default {\n  name: 'menusFrom',\n  props: {\n    groupId: {\n      type: Number,\n      default: 0\n    },\n    titleFrom: {\n      type: String,\n      default: ''\n    },\n    addId: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    return {\n      iconVal: '',\n      grid: {\n        xl: 7,\n        lg: 7,\n        md: 12,\n        sm: 24,\n        xs: 24\n      },\n      modals: false,\n      modal12: false,\n      ruleValidate: {\n        name: [{\n          required: true,\n          message: '请输入数据组名称',\n          trigger: 'blur'\n        }],\n        config_name: [{\n          required: true,\n          message: '请输入数据字段',\n          trigger: 'blur'\n        }],\n        info: [{\n          required: true,\n          message: '请输入数据简介',\n          trigger: 'blur'\n        }],\n        names: [{\n          required: true,\n          message: '请输入字段名称',\n          trigger: 'blur'\n        }]\n      },\n      FromData: [],\n      valids: false,\n      list2: [],\n      formValidate: {\n        name: '',\n        config_name: '',\n        info: '',\n        typelist: [],\n        cate_id: 0\n      }\n    };\n  },\n  watch: {\n    'addId': function addId(n) {\n      if (n === 'addId') {\n        this.formValidate.typelist = [];\n      }\n    }\n  },\n  methods: {\n    // 点击添加字段\n    addType: function addType() {\n      this.formValidate.typelist.push({\n        name: {\n          value: ''\n        },\n        title: {\n          value: ''\n        },\n        type: {\n          value: ''\n        },\n        param: {\n          placeholder: '参数方式例如:\\n1=白色\\n2=红色\\n3=黑色',\n          value: ''\n        }\n      });\n    },\n    // 删除字段\n    delGroup: function delGroup(index) {\n      this.formValidate.typelist.splice(index, 1);\n    },\n    // 详情\n    fromData: function fromData(id) {\n      var _this = this;\n\n      groupInfoApi(id).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(res) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this.formValidate = res.data.info;\n\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this.$Message.error(res.msg);\n      });\n    },\n    // 提交\n    handleSubmit: function handleSubmit(name) {\n      var _this2 = this;\n\n      var data = {\n        url: this.groupId ? \"/setting/group/\".concat(this.groupId) : 'setting/group',\n        method: this.groupId ? 'put' : 'post',\n        datas: this.formValidate\n      };\n      this.$refs[name].validate(function (valid) {\n        if (valid) {\n          if (_this2.formValidate.typelist.length === 0) return _this2.$Message.error('请添加字段名称：姓名！');\n          groupAddApi(data).then(\n          /*#__PURE__*/\n          function () {\n            var _ref2 = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee2(res) {\n              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                while (1) {\n                  switch (_context2.prev = _context2.next) {\n                    case 0:\n                      _this2.$Message.success(res.msg);\n\n                      _this2.modals = false;\n\n                      _this2.$refs[name].resetFields();\n\n                      _this2.formValidate.typelist = [];\n\n                      _this2.$emit('getList');\n\n                    case 5:\n                    case \"end\":\n                      return _context2.stop();\n                  }\n                }\n              }, _callee2);\n            }));\n\n            return function (_x2) {\n              return _ref2.apply(this, arguments);\n            };\n          }()).catch(function (res) {\n            _this2.$Message.error(res.msg);\n          });\n        } else {\n          if (!_this2.formValidate.name) return _this2.$Message.error('请添加数据组名称！');\n          if (!_this2.formValidate.config_name) return _this2.$Message.error('请添加数据字段！');\n          if (!_this2.formValidate.info) return _this2.$Message.error('请添加数据简介！');\n        }\n      });\n    },\n    handleReset: function handleReset() {\n      this.modals = false;\n      this.$refs['formValidate'].resetFields();\n      this.$emit('clearFrom');\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {}\n};",null]}