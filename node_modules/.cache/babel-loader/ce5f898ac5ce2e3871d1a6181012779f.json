{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/vendor/Blob.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/vendor/Blob.js","mtime":1664694249749},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/raw-loader/index.js","mtime":1390464207000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// +----------------------------------------------------------------------\n// | HIGOSHOP [ HIGOSHOP助力中小企业数字化转型 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2020~2022 https://www.higoshop.net All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed HIGOSHOP并不是自由软件，未经许可不能去掉HIGOSHOP相关版权\n// +----------------------------------------------------------------------\n// | Author: HIGOSHOP Team <higoshop@126.com>\n// +----------------------------------------------------------------------\n\n/* eslint-disable */\n\n/* Blob.js\n * A Blob implementation.\n * 2014-05-27\n *\n * By Eli Grey, http://eligrey.com\n * By Devin Samarin, https://github.com/eboyjr\n * License: X11/MIT\n *   See LICENSE.md\n */\n\n/*global self, unescape */\n\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,\n plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */\n(function (view) {\n  \"use strict\";\n\n  view.URL = view.URL || view.webkitURL;\n\n  if (view.Blob && view.URL) {\n    try {\n      new Blob();\n      return;\n    } catch (e) {}\n  } // Internally we use a BlobBuilder implementation to base Blob off of\n  // in order to support older browsers that only have BlobBuilder\n\n\n  var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || function (view) {\n    var get_class = function get_class(object) {\n      return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];\n    },\n        FakeBlobBuilder = function BlobBuilder() {\n      this.data = [];\n    },\n        FakeBlob = function Blob(data, type, encoding) {\n      this.data = data;\n      this.size = data.length;\n      this.type = type;\n      this.encoding = encoding;\n    },\n        FBB_proto = FakeBlobBuilder.prototype,\n        FB_proto = FakeBlob.prototype,\n        FileReaderSync = view.FileReaderSync,\n        FileException = function FileException(type) {\n      this.code = this[this.name = type];\n    },\n        file_ex_codes = (\"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \" + \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\").split(\" \"),\n        file_ex_code = file_ex_codes.length,\n        real_URL = view.URL || view.webkitURL || view,\n        real_create_object_URL = real_URL.createObjectURL,\n        real_revoke_object_URL = real_URL.revokeObjectURL,\n        URL = real_URL,\n        btoa = view.btoa,\n        atob = view.atob,\n        ArrayBuffer = view.ArrayBuffer,\n        Uint8Array = view.Uint8Array;\n\n    FakeBlob.fake = FB_proto.fake = true;\n\n    while (file_ex_code--) {\n      FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;\n    }\n\n    if (!real_URL.createObjectURL) {\n      URL = view.URL = {};\n    }\n\n    URL.createObjectURL = function (blob) {\n      var type = blob.type,\n          data_URI_header;\n\n      if (type === null) {\n        type = \"application/octet-stream\";\n      }\n\n      if (blob instanceof FakeBlob) {\n        data_URI_header = \"data:\" + type;\n\n        if (blob.encoding === \"base64\") {\n          return data_URI_header + \";base64,\" + blob.data;\n        } else if (blob.encoding === \"URI\") {\n          return data_URI_header + \",\" + decodeURIComponent(blob.data);\n        }\n\n        if (btoa) {\n          return data_URI_header + \";base64,\" + btoa(blob.data);\n        } else {\n          return data_URI_header + \",\" + encodeURIComponent(blob.data);\n        }\n      } else if (real_create_object_URL) {\n        return real_create_object_URL.call(real_URL, blob);\n      }\n    };\n\n    URL.revokeObjectURL = function (object_URL) {\n      if (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {\n        real_revoke_object_URL.call(real_URL, object_URL);\n      }\n    };\n\n    FBB_proto.append = function (data\n    /*, endings*/\n    ) {\n      var bb = this.data; // decode data to a binary string\n\n      if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {\n        var str = \"\",\n            buf = new Uint8Array(data),\n            i = 0,\n            buf_len = buf.length;\n\n        for (; i < buf_len; i++) {\n          str += String.fromCharCode(buf[i]);\n        }\n\n        bb.push(str);\n      } else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {\n        if (FileReaderSync) {\n          var fr = new FileReaderSync();\n          bb.push(fr.readAsBinaryString(data));\n        } else {\n          // async FileReader won't work as BlobBuilder is sync\n          throw new FileException(\"NOT_READABLE_ERR\");\n        }\n      } else if (data instanceof FakeBlob) {\n        if (data.encoding === \"base64\" && atob) {\n          bb.push(atob(data.data));\n        } else if (data.encoding === \"URI\") {\n          bb.push(decodeURIComponent(data.data));\n        } else if (data.encoding === \"raw\") {\n          bb.push(data.data);\n        }\n      } else {\n        if (typeof data !== \"string\") {\n          data += \"\"; // convert unsupported types to strings\n        } // decode UTF-16 to binary string\n\n\n        bb.push(unescape(encodeURIComponent(data)));\n      }\n    };\n\n    FBB_proto.getBlob = function (type) {\n      if (!arguments.length) {\n        type = null;\n      }\n\n      return new FakeBlob(this.data.join(\"\"), type, \"raw\");\n    };\n\n    FBB_proto.toString = function () {\n      return \"[object BlobBuilder]\";\n    };\n\n    FB_proto.slice = function (start, end, type) {\n      var args = arguments.length;\n\n      if (args < 3) {\n        type = null;\n      }\n\n      return new FakeBlob(this.data.slice(start, args > 1 ? end : this.data.length), type, this.encoding);\n    };\n\n    FB_proto.toString = function () {\n      return \"[object Blob]\";\n    };\n\n    FB_proto.close = function () {\n      this.size = this.data.length = 0;\n    };\n\n    return FakeBlobBuilder;\n  }(view);\n\n  view.Blob = function Blob(blobParts, options) {\n    var type = options ? options.type || \"\" : \"\";\n    var builder = new BlobBuilder();\n\n    if (blobParts) {\n      for (var i = 0, len = blobParts.length; i < len; i++) {\n        builder.append(blobParts[i]);\n      }\n    }\n\n    return builder.getBlob(type);\n  };\n})(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this);",null]}