{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/plugins/request/index.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/plugins/request/index.js","mtime":1664694501199},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// +----------------------------------------------------------------------\n// | HIGOSHOP [ HIGOSHOP助力中小企业数字化转型 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2020~2022 https://www.higoshop.net All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed HIGOSHOP并不是自由软件，未经许可不能去掉HIGOSHOP相关版权\n// +----------------------------------------------------------------------\n// | Author: HIGOSHOP Team <higoshop@126.com>\n// +----------------------------------------------------------------------\nimport store from '@/store';\nimport axios from 'axios';\nimport util from '@/libs/util';\nimport Setting from '@/setting';\nimport { Message, Notice, LoadingBar } from 'view-design'; // 创建一个错误\n// function errorCreate (msg) {\n//     const err = new Error(msg);\n//     errorLog(err);\n//     throw err;\n// }\n// 记录和显示错误\n\nfunction errorLog(err) {\n  // 添加到日志\n  store.dispatch('admin/log/push', {\n    message: '数据请求异常',\n    type: 'error',\n    meta: {\n      error: err\n    }\n  }); // 打印到控制台\n\n  if (process.env.NODE_ENV === 'development') {\n    util.log.error('>>>>>> Error >>>>>>');\n  } // 显示提示，可配置使用 iView 的 $Message 还是 $Notice 组件来显示\n\n\n  if (Setting.errorModalType === 'Message') {\n    Message.error({\n      content: err.message,\n      duration: Setting.modalDuration\n    });\n  } else if (Setting.errorModalType === 'Notice') {\n    Notice.error({\n      title: '提示',\n      desc: err.message,\n      duration: Setting.modalDuration\n    });\n  }\n} // 创建一个 axios 实例\n\n\nvar service = axios.create({\n  baseURL: Setting.apiBaseURL,\n  timeout: 10000 // 请求超时时间\n\n});\naxios.defaults.withCredentials = true; // 携带cookie\n// 网络加载\n// function startLoading () {\n//     LoadingBar.start();\n// }\n//\n// function endLoading () {\n//     LoadingBar.finish();\n// }\n// 那么 showFullScreenLoading() tryHideFullScreenLoading() 要干的事儿就是将同一时刻的请求合并。\n// 声明一个变量 needLoadingRequestCount，每次调用showFullScreenLoading方法 needLoadingRequestCount + 1。\n// 调用tryHideFullScreenLoading()方法，needLoadingRequestCount - 1。needLoadingRequestCount为 0 时，结束 loading。\n\nvar needLoadingRequestCount = 0;\nexport function showFullScreenLoading() {\n  if (needLoadingRequestCount === 0) {// startLoading()\n  }\n\n  needLoadingRequestCount++;\n}\nexport function tryHideFullScreenLoading() {\n  if (needLoadingRequestCount <= 0) return;\n  needLoadingRequestCount--;\n\n  if (needLoadingRequestCount === 0) {// endLoading()\n  }\n} // 请求拦截器\n\nservice.interceptors.request.use(\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(config) {\n    var baseUrl, token, kefuToken;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (config.kefu) {\n              baseUrl = Setting.apiBaseURL.replace(/adminapi/, \"kefuapi\");\n              config.baseURL = baseUrl;\n            } else {\n              config.baseURL = Setting.apiBaseURL;\n            }\n\n            token = util.cookies.get('token');\n            kefuToken = util.cookies.kefuGet('token');\n\n            if (token || kefuToken) {\n              config.headers['Authori-zation'] = config.kefu ? 'Bearer ' + kefuToken : 'Bearer ' + token;\n            } // 开启loading\n\n\n            showFullScreenLoading();\n            return _context.abrupt(\"return\", config);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}(), function (error) {\n  // 发送失败\n  Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  // 获取服务器类型\n  if (!sessionStorage.getItem(\"SERVER_TYPE\")) {\n    sessionStorage.setItem(\"SERVER_TYPE\", response.headers['server']);\n  } // 关闭loading\n\n\n  tryHideFullScreenLoading();\n  var code = response.data.status;\n\n  switch (code) {\n    case 200:\n      // [ 示例 ] code === 0 代表没有错误\n      return response.data;\n\n    case 400:\n    case 400011:\n    case 400012:\n      return Promise.reject(response.data || {\n        msg: '未知错误'\n      });\n    // [ 示例 ] 其它和后台约定的 code\n    // errorCreate(response.data.msg);\n    // break;\n\n    case 410000:\n    case 410001:\n    case 410002:\n      window.router.replace('/admin/login');\n      localStorage.clear();\n      sessionStorage.clear();\n      util.cookies.remove('token');\n      util.cookies.remove('expires_time');\n      util.cookies.remove('uuid'); // 删除localStorage\n\n      store.dispatch('admin/db/databaseClear', {\n        user: true\n      }); // 清空 vuex 用户信息\n\n      dispatch('admin/user/set', {}, {\n        root: true\n      });\n      break;\n\n    case 410003:\n      window.router.replace('/kefu');\n      break;\n\n    default:\n      // 不是正确的 code\n      // errorCreate(`${dataAxios.msg}: ${response.config.url}`);\n      break;\n  }\n}, function (error) {\n  if (error && error.response) {\n    switch (error.response.status) {\n      case 400:\n        error.message = '请求错误';\n        break;\n\n      case 401:\n        error.message = '未授权，请登录';\n        break;\n\n      case 403:\n        error.message = '拒绝访问';\n        break;\n\n      case 404:\n        error.message = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.message = '请求超时';\n        break;\n\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n\n      case 501:\n        error.message = '服务未实现';\n        break;\n\n      case 502:\n        error.message = '网关错误';\n        break;\n\n      case 503:\n        error.message = '服务不可用';\n        break;\n\n      case 504:\n        error.message = '网关超时';\n        break;\n\n      case 505:\n        error.message = 'HTTP版本不受支持';\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  errorLog(error); // return Promise.reject(error);\n});\nexport default service;",null]}