{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/libs/socket.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/libs/socket.js","mtime":1664694736994},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// +----------------------------------------------------------------------\n// | HIGOSHOP [ HIGOSHOP助力中小企业数字化转型 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2020~2022 https://www.higoshop.net All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed HIGOSHOP并不是自由软件，未经许可不能去掉HIGOSHOP相关版权\n// +----------------------------------------------------------------------\n// | Author: HIGOSHOP Team <higoshop@126.com>\n// +--------------------------------------------------------------\nimport util from '@/libs/util';\nimport Setting from '@/setting';\nimport Cookies from \"js-cookie\";\nimport Vue from 'vue';\nvar reconneTimer = {};\nvar reconneCount = {};\nvar connectGuid = {};\n\nvar wsSocket =\n/*#__PURE__*/\nfunction () {\n  function wsSocket(opt) {\n    _classCallCheck(this, wsSocket);\n\n    this.vm = new Vue();\n    this.ws = null;\n    this.opt = opt || {};\n    this.networkStatus = true;\n    this.reconneMax = 100;\n    this.connectLing = false;\n    reconneTimer[this.opt.key] = null;\n    reconneCount[this.opt.key] = 0;\n    this.init(opt);\n    this.networkWath();\n    this.defaultEvenv();\n  }\n\n  _createClass(wsSocket, [{\n    key: \"defaultEvenv\",\n    value: function defaultEvenv() {\n      this.vm.$on('timeout', this.timeoutEvent.bind(this));\n    }\n  }, {\n    key: \"timeoutEvent\",\n    value: function timeoutEvent() {\n      this.reconne();\n    }\n  }, {\n    key: \"guid\",\n    value: function guid() {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c == 'x' ? r : r & 0x3 | 0x8;\n        return v.toString(16);\n      });\n    }\n  }, {\n    key: \"addHandler\",\n    value: function addHandler(element, type, handler) {\n      if (element.addEventListener) {\n        element.addEventListener(type, handler, false);\n      } else if (element.attachEvent) {\n        element.attachEvent(\"on\" + type, handler);\n      } else {\n        element[\"on\" + type] = handler;\n      }\n    }\n  }, {\n    key: \"networkWath\",\n    value: function networkWath() {\n      var _this = this;\n\n      this.addHandler(window, 'online', function () {\n        _this.networkStatus = true;\n        console.log('联网了');\n\n        _this.ws.close();\n\n        _this.vm.$on('timeout', _this.timeoutEvent);\n      });\n      this.addHandler(window, 'offline', function () {\n        _this.networkStatus = false;\n        _this.socketStatus = false;\n        _this.timer && clearInterval(_this.timer);\n        _this.timer = null;\n\n        _this.vm.$off('timeout', _this.timeoutEvent);\n\n        console.log('断网了');\n      });\n    }\n  }, {\n    key: \"reconne\",\n    value: function reconne() {\n      var _this2 = this;\n\n      if (reconneCount[this.opt.key] > this.reconneMax) {\n        //重连次数超过限制不再重连\n        if (reconneTimer[this.opt.key]) {\n          clearInterval(reconneTimer[this.opt.key]);\n          reconneTimer[this.opt.key] = null;\n        }\n\n        return;\n      }\n\n      if (reconneTimer[this.opt.key] || this.socketStatus) {\n        return;\n      }\n\n      reconneTimer[this.opt.key] = setInterval(function () {\n        //断线连接中发现状态为真就不用再连接\n        if (_this2.socketStatus) {\n          return;\n        } //正在连接中也不需要在连接了\n\n\n        if (!_this2.connectLing) {\n          console.log('重新连接');\n\n          _this2.init(_this2.opt);\n\n          reconneCount[_this2.opt.key]++;\n        }\n      }, 2000);\n    }\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      //关闭断线重连定时器\n      clearInterval(reconneTimer[this.opt.key]);\n      reconneTimer[this.opt.key] = null;\n      this.connectLing = false;\n      this.opt.open && this.opt.open();\n      reconneCount[this.opt.key] = 0;\n      this.socketStatus = true;\n      this.ping();\n    }\n  }, {\n    key: \"init\",\n    value: function init(opt) {\n      var wsUrl = '';\n      var hostUrl = Setting.wsAdminSocketUrl;\n\n      if (sessionStorage.getItem(\"SERVER_TYPE\") !== 'nginx') {\n        hostUrl = hostUrl + '/ws';\n      }\n\n      if (opt.key == 1) {\n        wsUrl = hostUrl + '?type=admin' + '&token=' + util.cookies.get(\"token\");\n      }\n\n      if (opt.key == 2) {\n        wsUrl = hostUrl + '?type=kefu' + '&token=' + Cookies.get(\"kefu-token\");\n      } // if (opt.token) {\n      //     wsUrl += '&token=' + opt.token\n      // } else\n\n\n      if (opt.tourist_uid) {\n        wsUrl += '&tourist_uid=' + opt.tourist_uid;\n      }\n\n      if (wsUrl) {\n        this.ws = new WebSocket(util.wss(wsUrl));\n        this.ws.onopen = this.onOpen.bind(this);\n        this.ws.onerror = this.onError.bind(this);\n        this.ws.onmessage = this.onMessage.bind(this);\n        this.ws.onclose = this.onClose.bind(this);\n        this.connectLing = true;\n      }\n    }\n  }, {\n    key: \"ping\",\n    value: function ping() {\n      var that = this;\n      this.timer = setInterval(function () {\n        that.send({\n          type: 'ping'\n        });\n      }, 10000);\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      var _this3 = this;\n\n      if (!this.socketStatus || this.ws.readyState === 0 || !this.networkStatus) {\n        this.reconne();\n      }\n\n      return new Promise(function (resolve, reject) {\n        try {\n          _this3.ws.send(JSON.stringify(data));\n\n          resolve({\n            status: true\n          });\n        } catch (e) {\n          reject({\n            status: false,\n            socketStatus: _this3.socketStatus,\n            networkStatus: _this3.networkStatus\n          });\n        }\n      });\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(res) {\n      this.opt.message && this.opt.message(res);\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      this.connectLing = false;\n      this.timer && clearInterval(this.timer);\n      this.timer = null;\n      this.opt.close && this.opt.close();\n      this.socketStatus = false;\n      this.reconne();\n    }\n  }, {\n    key: \"onError\",\n    value: function onError(e) {\n      this.connectLing = false;\n      this.timer && clearInterval(this.timer);\n      this.timer = null;\n      this.opt.error && this.opt.error(e);\n      this.socketStatus = false;\n      this.reconne();\n    }\n  }, {\n    key: \"$on\",\n    value: function $on() {\n      var _this$vm;\n\n      (_this$vm = this.vm).$on.apply(_this$vm, arguments);\n    }\n  }, {\n    key: \"$off\",\n    value: function $off() {\n      var _this$vm2;\n\n      (_this$vm2 = this.vm).$off.apply(_this$vm2, arguments);\n    }\n  }]);\n\n  return wsSocket;\n}();\n\nvar promises = {};\n\nfunction createSocket(key, flag, token, tourist_uid) {\n  if (flag) promises[key] = null;\n  if (!promises[key]) promises[key] = new Promise(function (resolve, reject) {\n    var ws = new wsSocket({\n      key: key,\n      token: token,\n      tourist_uid: tourist_uid,\n      open: function open() {\n        resolve(ws);\n      },\n      error: function error(e) {\n        reject(e);\n      },\n      message: function message(res) {\n        var _JSON$parse = JSON.parse(res.data),\n            type = _JSON$parse.type,\n            _JSON$parse$data = _JSON$parse.data,\n            data = _JSON$parse$data === void 0 ? {} : _JSON$parse$data;\n\n        ws.vm.$emit(type, data);\n      },\n      close: function close(e) {\n        ws.vm.$emit('close', e);\n      }\n    });\n  });\n  return promises[key];\n}\n\nexport var adminSocket = function adminSocket(flag, token) {\n  return createSocket(1, flag, token);\n};\nexport var Socket = function Socket(flag, token, tourist_uid) {\n  return createSocket(2, flag, token, tourist_uid);\n};",null]}