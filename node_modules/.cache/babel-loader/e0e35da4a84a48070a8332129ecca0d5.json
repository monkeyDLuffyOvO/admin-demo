{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/work/customerBase/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/work/customerBase/index.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\";\nimport { workGroupSynch, workGroupChat, getGroupChatMember } from \"@/api/work\";\nimport timeOptions from \"@/utils/timeOptions\";\nexport default {\n  name: \"\",\n  data: function data() {\n    return {\n      loading: false,\n      userLoading: false,\n      formInline: {},\n      clentStatus: false,\n      options: timeOptions,\n      columns1: [{\n        title: \"ID\",\n        key: \"id\",\n        minWidth: 40,\n        maxWidth: 80\n      }, {\n        title: \"群名称\",\n        key: \"name\",\n        minWidth: 80\n      }, {\n        title: \"群主\",\n        slot: \"ownerInfo\",\n        minWidth: 100\n      }, {\n        title: \"群公告\",\n        key: \"notice\",\n        minWidth: 100\n      }, {\n        title: \"管理员\",\n        slot: \"admin_user_list\",\n        minWidth: 120\n      }, {\n        title: \"创建时间\",\n        key: \"group_create_time\",\n        minWidth: 110\n      }, {\n        title: \"群人数\",\n        key: \"member_num\",\n        minWidth: 80\n      }, {\n        title: \"退群人数\",\n        key: \"retreat_group_num\",\n        minWidth: 80\n      }, {\n        title: \"操作\",\n        slot: \"action\",\n        // fixed: \"right\",\n        minWidth: 130\n      }],\n      tableData: [],\n      clientColumn: [{\n        title: \"ID\",\n        key: \"id\",\n        minWidth: 60,\n        align: 'center'\n      }, {\n        title: \"姓名\",\n        slot: \"member\",\n        minWidth: 80,\n        align: 'center'\n      }, {\n        title: \"成员类型\",\n        slot: \"type\",\n        minWidth: 80,\n        align: 'center'\n      }, {\n        title: \"入群方式\",\n        slot: \"join_scene\",\n        minWidth: 80,\n        align: 'center'\n      }, {\n        title: \"群昵称\",\n        key: \"group_nickname\",\n        minWidth: 60,\n        align: 'center'\n      }, {\n        title: \"入群时间\",\n        slot: \"join_time\",\n        minWidth: 100,\n        align: 'center'\n      }],\n      clientList: [],\n      grid: {\n        xl: 7,\n        lg: 10,\n        md: 12,\n        sm: 24,\n        xs: 24\n      },\n      timeVal: [],\n      tableFrom: {\n        time: \"\",\n        name: \"\",\n        page: 1,\n        limit: 15\n      },\n      clientForm: {\n        page: 1,\n        limit: 15\n      },\n      total: 0\n    };\n  },\n  filters: {\n    scene: function scene(value) {\n      if (value == 1) {\n        return '直接邀请';\n      } else if (value == 2) {\n        return '链接邀请';\n      } else if (value == 3) {\n        return '扫码入群';\n      }\n    }\n  },\n  computed: _objectSpread({}, mapState(\"admin/layout\", [\"isMobile\"]), {\n    labelWidth: function labelWidth() {\n      return this.isMobile ? undefined : 80;\n    },\n    labelPosition: function labelPosition() {\n      return this.isMobile ? \"top\" : \"left\";\n    }\n  }),\n  created: function created() {\n    this.getWorkGroupChat();\n  },\n  methods: {\n    getWorkGroupChat: function getWorkGroupChat() {\n      var _this = this;\n\n      this.loading = true;\n      workGroupChat(this.tableFrom).then(function (res) {\n        _this.tableData = res.data;\n        _this.loading = false;\n      }).catch(function (err) {\n        _this.$Message.error(err.msg);\n\n        _this.loading = false;\n      });\n    },\n    groupSynch: function groupSynch() {\n      var _this2 = this;\n\n      workGroupSynch().then(function (res) {\n        _this2.$Message.success(res.msg);\n      });\n    },\n    statistical: function statistical(row, index) {\n      this.$router.push('/admin/work/client/statistical/' + row.id);\n    },\n    groupMember: function groupMember(row, index) {\n      var _this3 = this;\n\n      this.clentStatus = true;\n      this.userLoading = true;\n      this.$set(this.clientForm, 'id', row.id);\n      getGroupChatMember(this.clientForm).then(function (res) {\n        _this3.clientList = res.data;\n        _this3.userLoading = false;\n      }).catch(function (err) {\n        _this3.$Message.error(err.msg);\n      });\n    },\n    onchangeTime: function onchangeTime(e) {\n      this.timeVal = e;\n      this.tableFrom.time = this.timeVal.join(\"-\");\n      this.tableFrom.page = 1;\n      this.getWorkGroupChat();\n    },\n    searchData: function searchData() {\n      this.tableFrom.page = 1;\n      this.getWorkGroupChat();\n    },\n    pageChange: function pageChange(index) {\n      this.tableFrom.page = index;\n      this.getWorkGroupChat();\n    },\n    clientChange: function clientChange(index) {\n      var _this4 = this;\n\n      this.clientForm.page = index;\n      this.userLoading = true;\n      getGroupChatMember(this.clientForm).then(function (res) {\n        _this4.clientList = res.data;\n        _this4.userLoading = false;\n      }).catch(function (err) {\n        _this4.$Message.error(err.msg);\n      });\n    }\n  }\n};",null]}