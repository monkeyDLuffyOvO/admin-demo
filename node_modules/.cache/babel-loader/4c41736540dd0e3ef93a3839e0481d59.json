{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/utils/upload.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/utils/upload.js","mtime":1661486457000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport md5 from 'js-md5'; //引入MD5加密\n\nimport { upload } from '@/api/upload.js'; // 这里指前端调用接口的api方法\n\nexport var uploadByPieces = function uploadByPieces(_ref) {\n  var randoms = _ref.randoms,\n      file = _ref.file,\n      _ref$pieceSize = _ref.pieceSize,\n      pieceSize = _ref$pieceSize === void 0 ? 2 : _ref$pieceSize,\n      pid = _ref.pid,\n      progress = _ref.progress,\n      success = _ref.success,\n      error = _ref.error,\n      uploading = _ref.uploading;\n  // 如果文件传入为空直接 return 返回\n  if (!file) return;\n  var fileMD5 = ''; // 总文件列表\n\n  var chunkSize = pieceSize * 1024 * 1024; // 5MB一片\n\n  var chunkCount = Math.ceil(file.size / chunkSize); // 总片数\n  // 获取md5\n\n  var readFileMD5 = function readFileMD5() {\n    // 读取视频文件的md5\n    var fileRederInstance = new FileReader();\n    fileRederInstance.readAsBinaryString(file);\n    fileRederInstance.addEventListener('load', function (e) {\n      var fileBolb = e.target.result;\n      fileMD5 = md5(fileBolb);\n      readChunkMD5();\n    });\n  };\n\n  var getChunkInfo = function getChunkInfo(file, currentChunk, chunkSize) {\n    var start = currentChunk * chunkSize;\n    var end = Math.min(file.size, start + chunkSize);\n    var chunk = file.slice(start, end);\n    return {\n      start: start,\n      end: end,\n      chunk: chunk\n    };\n  }; // 针对每个文件进行chunk处理\n\n\n  var readChunkMD5 =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var i, _getChunkInfo, chunk;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              i = 0;\n\n            case 1:\n              if (!(i < chunkCount)) {\n                _context.next = 10;\n                break;\n              }\n\n              _getChunkInfo = getChunkInfo(file, i, chunkSize), chunk = _getChunkInfo.chunk;\n              console.log(\"总片数\" + chunkCount);\n              console.log(\"分片后的数据---测试：\" + i);\n              _context.next = 7;\n              return uploadChunk({\n                chunk: chunk,\n                currentChunk: i,\n                chunkCount: chunkCount\n              });\n\n            case 7:\n              i++;\n              _context.next = 1;\n              break;\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function readChunkMD5() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var uploadChunk = function uploadChunk(chunkInfo) {\n    // progressFun()\n    return new Promise(function (resolver, reject) {\n      var config = {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }; // 创建formData对象，下面是结合不同项目给后端传入的对象。\n\n      var fetchForm = new FormData();\n      fetchForm.append('chunkNumber', chunkInfo.currentChunk + 1); // 第几片\n\n      fetchForm.append('chunkSize', chunkSize); // 分片大小的限制  例如限制 5M\n\n      fetchForm.append('currentChunkSize', chunkInfo.chunk.size); // 每一片的大小\n\n      fetchForm.append('file', chunkInfo.chunk); //每一片的文件\n\n      fetchForm.append('filename', file.name); // 文件名 \n\n      fetchForm.append('totalChunks', chunkInfo.chunkCount); //总片数\n\n      fetchForm.append('md5', fileMD5);\n      fetchForm.append('pid', pid); //附件视频上传分类\n\n      upload(fetchForm, config).then(function (res) {\n        console.log(\"分片上传返回信息：\", res);\n\n        if (res.data.code == 1) {\n          // // 结合不同项目 将成功的信息返回出去\n          // 下面如果在项目中没有用到可以不用打开注释\n          uploading(chunkInfo.currentChunk + 1, chunkInfo.chunkCount);\n          resolver(true);\n        } else if (res.data.code == 2) {\n          if (chunkInfo.currentChunk < chunkInfo.chunkCount - 1) {\n            console.log(\"分片上传成功\");\n          } else {\n            // 当总数大于等于分片个数的时候\n            if (chunkInfo.currentChunk + 1 == chunkInfo.chunkCount) {\n              console.log(\"文件开始------合并成功\");\n              success(res.data);\n            }\n          }\n        }\n      }).catch(function (e) {\n        error && error(e);\n      });\n    });\n  };\n\n  readFileMD5(); // 开始执行代码\n};",null]}