{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/components/department/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/components/department/index.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { workTree } from \"@/api/work\";\nexport default {\n  name: \"Department\",\n  props: {\n    isEdit: {\n      type: Number,\n      default: 0\n    },\n    activeDepartment: {\n      type: Object,\n      default: function _default() {\n        return null;\n      }\n    },\n    userList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    // 是否指定成员\n    isAppoint: {\n      type: Boolean,\n      default: false\n    },\n    // 指定成员数据 与 isAppoint 同时使用\n    appointList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      dialogVisible: false,\n      treeData: [],\n      selectList: {},\n      isShow: false,\n      memberStatus: false,\n      checkUserList: [],\n      // 选中人员列表\n      scrollH: 0,\n      filterText: \"\",\n      openType: \"\",\n      defaultProps: {\n        children: \"children\",\n        label: \"name\"\n      }\n    };\n  },\n  watch: {\n    userList: {\n      handler: function handler(nVal, oVal) {\n        this.checkUserList = JSON.parse(JSON.stringify(nVal));\n      },\n      deep: true\n    },\n    activeDepartment: {\n      handler: function handler(nVal, oVal) {\n        var _this = this;\n\n        if (!nVal) return;\n        this.isShow = false;\n        var tempArr = [];\n\n        var recursiveFunction = function recursiveFunction() {\n          var getStr = function getStr(list) {\n            tempArr = list.map(function (row, index, arr) {\n              if (row.children) {\n                if (nVal.hasOwnProperty(row.id)) {\n                  row.isCheck = true;\n                } else {\n                  row.isCheck = false;\n                }\n\n                getStr(row.children);\n              } else {\n                if (nVal.hasOwnProperty(row.id)) {\n                  row.isCheck = true;\n                } else {\n                  row.isCheck = false;\n                }\n              }\n\n              return arr;\n            });\n          };\n\n          getStr(_this.treeData);\n        };\n\n        recursiveFunction();\n        this.$nextTick(function () {\n          _this.$set(_this, \"treeData\", tempArr[0]);\n\n          _this.isShow = true;\n          _this.selectList = nVal;\n        });\n      },\n      deep: true\n    },\n    filterText: function filterText(val) {\n      this.$refs.tree.filter(val);\n    },\n    isAppoint: {\n      handler: function handler(nVal) {},\n      deep: true\n    }\n  },\n  mounted: function mounted() {\n    this.getTreeData();\n  },\n  methods: {\n    getTreeData: function getTreeData() {\n      var _this2 = this;\n\n      workTree().then(function (res) {\n        _this2.isShow = true;\n        _this2.treeData = res.data; // this.getItemTree(this.treeData)\n      });\n    },\n    handleClick: function handleClick(node, data) {\n      this.isShow = false;\n      this.$set(node, \"isCheck\", true);\n      this.isShow = true;\n      this.$set(this.selectList, node.id, node);\n    },\n    append: function append(node, data) {\n      this.$Message.warning(\"只允许添加成员\"); //   if (this.onlyPerson) return this.$message.warning(this.$t('public.waring'))\n      //   if (this.onlyDepartment && Object.keys(this.selectList).length > 0) {\n      //     return this.$message.warning(this.$t('setting.admin.deletetitle4'))\n      //   }\n      //   this.isShow = false\n      //   data.isCheck = false\n      //   data.is_mastart = false\n      //   this.$set(this.selectList, data.id, data)\n      //   this.$nextTick(() => {\n      //     this.isShow = true\n      //     this.$nextTick(() => {\n      //       this.$refs.treeScoll.scroll(0, this.scrollH)\n      //     })\n      //   })\n    },\n    handleDelete: function handleDelete(key) {\n      var _this3 = this;\n\n      var tempArr = [];\n      this.isShow = false;\n      delete this.selectList[key.id];\n\n      var recursiveFunction = function recursiveFunction() {\n        var getStr = function getStr(list) {\n          tempArr = list.map(function (row, index, arr) {\n            if (row.children) {\n              if (row.id === key.id) {\n                row.isCheck = false;\n              }\n\n              getStr(row.children);\n            } else {\n              if (row.id === key.id) {\n                row.isCheck = false;\n              }\n            }\n\n            return arr;\n          });\n        };\n\n        getStr(_this3.treeData);\n      };\n\n      recursiveFunction();\n      this.$nextTick(function () {\n        _this3.$set(_this3, \"treeData\", tempArr[0]);\n\n        _this3.isShow = true;\n      });\n    },\n    // 确认\n    handleConfirm: function handleConfirm() {\n      var data = this.checkUserList;\n      this.$emit(\"changeMastart\", data, this.openType);\n      this.checkUserList = [];\n    },\n    // 重置树形数据状态\n    reseatData: function reseatData() {\n      var _this4 = this;\n\n      this.isShow = false;\n      var tempArr = [];\n\n      var recursiveFunction = function recursiveFunction() {\n        var getStr = function getStr(list) {\n          tempArr = list.map(function (row, index, arr) {\n            row.isCheck = false;\n\n            if (row.children) {\n              row.user.forEach(function (user) {\n                user.isCheck = false;\n              });\n              getStr(row.children);\n            } else {\n              row.user.forEach(function (user) {\n                user.isCheck = false;\n              });\n            }\n\n            return arr;\n          });\n        };\n\n        getStr(_this4.treeData);\n      };\n\n      recursiveFunction();\n      this.$nextTick(function () {\n        _this4.checkUserList = JSON.parse(JSON.stringify(_this4.userList));\n\n        _this4.$set(_this4, \"treeData\", tempArr[0]);\n\n        _this4.isShow = true;\n      });\n    },\n    scroll: function scroll(e) {\n      this.scrollH = e.target.scrollTop;\n    },\n    // 选中人员\n    checkUser: function checkUser(user) {\n      var _this5 = this;\n\n      if (this.checkUserList.length === 0) {\n        this.$set(user, \"isCheck\", true);\n        this.checkUserList.push(user);\n      } else {\n        var status = this.checkUserList.some(function (el, index) {\n          return el.userid === user.userid;\n        });\n\n        if (status) {\n          return this.$Message.warning(\"该人员已选择\");\n        } else {\n          this.$set(user, 'isCheck', true);\n          this.checkUserList.push(user);\n        }\n      }\n\n      this.$nextTick(function () {\n        _this5.isShow = true;\n\n        _this5.$nextTick(function () {\n          _this5.$refs.treeScoll.scroll(0, _this5.scrollH);\n        });\n      });\n    },\n    // 删除人员\n    handleDeleteUser: function handleDeleteUser(item, index) {\n      var _this6 = this;\n\n      this.checkUserList.splice(index, 1);\n\n      var recursiveFunction = function recursiveFunction() {\n        var getStr = function getStr(list) {\n          list.forEach(function (row, index, arr) {\n            row.member.forEach(function (user) {\n              if (user.id === item.id) {\n                user.isCheck = false;\n              }\n            });\n          });\n        };\n\n        getStr(_this6.treeData);\n      };\n\n      recursiveFunction();\n      this.$nextTick(function () {\n        _this6.isShow = true;\n      });\n    },\n    filterNode: function filterNode(value, data, node) {\n      // 如果什么都没填就直接返回\n      if (!value) return true; // 如果传入的value和data中的label相同说明是匹配到了\n\n      if (data.label.indexOf(value) !== -1) {\n        return true;\n      } // 否则要去判断它是不是选中节点的子节点\n\n\n      return this.checkBelongToChooseNode(value, data, node);\n    },\n    checkBelongToChooseNode: function checkBelongToChooseNode(value, data, node) {\n      var level = node.level; // 如果传入的节点本身就是一级节点就不用校验了\n\n      if (level === 1) {\n        return false;\n      } // 先取当前节点的父节点\n\n\n      var parentData = node.parent;\n\n      if (node.data.user.length > 0) {\n        var list = node.data.user.map(function (val) {\n          if (val.card.name.indexOf(value) !== -1) {\n            return true;\n          } else {\n            return false;\n          }\n        });\n      }\n\n      if (list === undefined) {\n        return false;\n      } else {\n        for (var i = 0; i < list.length; i++) {\n          if (list[i] === true) {\n            return true;\n          }\n        }\n      } // 遍历当前节点的父节点\n\n\n      var index = 0;\n\n      while (index < level - 1) {\n        // 如果匹配到直接返回\n        if (parentData.data.label.indexOf(value) !== -1) {\n          return true;\n        } // 否则的话再往上一层做匹配\n\n\n        parentData = parentData.parent;\n        index++;\n      } // 没匹配到返回false\n\n\n      return false;\n    },\n    getItemTree: function getItemTree(data) {\n      var _this7 = this;\n\n      data && data.forEach(function (item, index) {\n        if (item.user != undefined && item.user.length > 0) {\n          item.user.forEach(function (value) {\n            value.label = value.card.name;\n            value.children = value;\n          });\n        }\n\n        if (item.children && item.children.length > 0) {\n          _this7.getItemTree(item.children);\n        }\n      });\n      return data;\n    },\n    searchData: function searchData() {},\n    handleConcel: function handleConcel() {// this.memberStatus = false;\n    }\n  }\n};",null]}