{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/store/modules/admin/modules/order.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/store/modules/admin/modules/order.js","mtime":1664694391570},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// +----------------------------------------------------------------------\n// | HIGOSHOP [ HIGOSHOP助力中小企业数字化转型 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2020~2022 https://www.higoshop.net All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed HIGOSHOP并不是自由软件，未经许可不能去掉HIGOSHOP相关版权\n// +----------------------------------------------------------------------\n// | Author: HIGOSHOP Team <higoshop@126.com>\n// +----------------------------------------------------------------------\n\n/**\n * 布局配置\n * */\nimport screenfull from 'screenfull';\nimport { getOrdes } from '@/api/order'; // function today () {\n//     const end = new Date();\n//     const start = new Date();\n//     var datetimeStart = start.getFullYear() + '/' + (start.getMonth() + 1) + '/' + start.getDate();\n//     var datetimeEnd = end.getFullYear() + '/' + (end.getMonth() + 1) + '/' + end.getDate();\n//     return [datetimeStart, datetimeEnd];\n// }\n\nexport default {\n  namespaced: true,\n  state: {\n    orderStatus: '',\n    // 订单状态\n    // orderTime: today().join('-'), // 订单时间\n    orderTime: '',\n    orderNum: '',\n    orderType: '',\n    // 订单类型\n    fieldKey: '',\n    orderChartType: {},\n    isDels: false,\n    delIdList: [],\n    iconsaaaa: '',\n    orderPayType: '',\n    splitOrder: 0,\n    supplier_id: '',\n    store_id: '',\n    type_id: '-1' // modelLists: function\n\n  },\n  mutations: {\n    //是否拆单\n    setSplitOrder: function setSplitOrder(state, splitOrder) {\n      state.splitOrder = splitOrder;\n    },\n\n    /**\n     * @description 设置设备类型\n     * @param {Object} state vuex state\n     * @param {String} type 设备类型，可选值为 Mobile、Tablet、Desktop\n     */\n\n    /**\n     * @description 订单号搜索\n     */\n    getOrderStatus: function getOrderStatus(state, orderStatus) {\n      state.orderStatus = orderStatus;\n    },\n\n    /**\n     * @description 订单状态搜索\n     */\n    getOrderType: function getOrderType(state, orderPayType) {\n      state.orderPayType = orderPayType;\n    },\n\n    /**\n     * @description 时间状态\n     */\n    getOrderTime: function getOrderTime(state, orderTime) {\n      state.orderTime = orderTime;\n    },\n\n    /**\n     * @description 订单选择状态\n     */\n    getOrderNum: function getOrderNum(state, orderNum) {\n      state.orderNum = orderNum;\n    },\n    getfieldKey: function getfieldKey(state, fieldKey) {\n      state.fieldKey = fieldKey;\n    },\n\n    /**\n     * @description tab切换，选择订单状态\n     */\n    onChangeTabs: function onChangeTabs(state, orderType) {\n      state.orderType = orderType;\n    },\n\n    /**\n     * @description 选择供应商\n     */\n    getSupplier_id: function getSupplier_id(state, id) {\n      state.supplier_id = id;\n    },\n\n    /**\n     * @description 选择订单类型\n     */\n    getType_id: function getType_id(state, id) {\n      state.type_id = id;\n    },\n\n    /**\n     * @description 选择门店\n     */\n    getStore_id: function getStore_id(state, id) {\n      state.store_id = id;\n    },\n\n    /**\n     * @description  订单状态 全部对象\n     */\n    onChangeChart: function onChangeChart(state, orderChartType) {\n      state.orderChartType = orderChartType;\n    },\n\n    /**\n     * @description  是否批量删除订单\n     */\n    getIsDel: function getIsDel(state, isDels) {\n      state.isDels = isDels;\n    },\n\n    /**\n     * @description  批量删除订单的id集合\n     */\n    getisDelIdListl: function getisDelIdListl(state, delIdList) {\n      state.delIdList = delIdList;\n    }\n  },\n  actions: {\n    /**\n     * @description 订单状态\n     */\n    getOrderTabs: function getOrderTabs(_ref, data) {\n      var commit = _ref.commit;\n      return new Promise(function (resolve, reject) {\n        getOrdes(data).then(\n        /*#__PURE__*/\n        function () {\n          var _ref2 = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(res) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    resolve(res);\n                    commit('onChangeChart', res.data);\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x) {\n            return _ref2.apply(this, arguments);\n          };\n        }()).catch(function (res) {\n          reject(res);\n        });\n      });\n    },\n\n    /**\n     * @description 初始化监听全屏状态\n     */\n    listenFullscreen: function listenFullscreen(_ref3) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve) {\n        if (screenfull.enabled) {\n          screenfull.on('change', function () {\n            if (!screenfull.isFullscreen) {\n              commit('setFullscreen', false);\n            }\n          });\n        } // end\n\n\n        resolve();\n      });\n    },\n\n    /**\n     * @description 切换全屏\n     */\n    toggleFullscreen: function toggleFullscreen(_ref4) {\n      var commit = _ref4.commit;\n      return new Promise(function (resolve) {\n        if (screenfull.isFullscreen) {\n          screenfull.exit();\n          commit('setFullscreen', false);\n        } else {\n          screenfull.request();\n          commit('setFullscreen', true);\n        } // end\n\n\n        resolve();\n      });\n    }\n  }\n};",null]}