{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/statistic/transaction/components/transaction.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/statistic/transaction/components/transaction.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { statisticBottomTradeApi, statisticTrendApi } from '@/api/statistic';\nimport echartsNew from '@/components/echartsNew/index';\nimport { formatDate } from '@/utils/validate';\nexport default {\n  name: \"transaction\",\n  components: {\n    echartsNew: echartsNew\n  },\n  data: function data() {\n    return {\n      grid: {\n        xl: 8,\n        lg: 8,\n        md: 8,\n        sm: 24,\n        xs: 24\n      },\n      // options: this.$timeOptions,\n      options: {\n        shortcuts: [{\n          text: \"今天\",\n          value: function value() {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate()));\n            return [start, end];\n          }\n        }, {\n          text: \"昨天\",\n          value: function value() {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 1)));\n            end.setTime(end.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 1)));\n            return [start, end];\n          }\n        }, {\n          text: \"最近7天\",\n          value: function value() {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 6)));\n            return [start, end];\n          }\n        }, {\n          text: \"最近30天\",\n          value: function value() {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 29)));\n            return [start, end];\n          }\n        }, {\n          text: \"本月\",\n          value: function value() {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), 1)));\n            return [start, end];\n          }\n        }, {\n          text: \"本年\",\n          value: function value() {\n            var end = new Date();\n            var start = new Date();\n            start.setTime(start.setTime(new Date(new Date().getFullYear(), 0, 1)));\n            return [start, end];\n          }\n        }]\n      },\n      name: '近30天',\n      timeVal: [],\n      dataTime: '',\n      list: {},\n      optionData: {},\n      style: {\n        height: '400px'\n      },\n      getExcel: '',\n      spinShow: false\n    };\n  },\n  created: function created() {\n    var end = new Date();\n    var start = new Date();\n    start.setTime(start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 29)));\n    this.timeVal = [start, end];\n    this.dataTime = formatDate(start, 'yyyy/MM/dd') + '-' + formatDate(end, 'yyyy/MM/dd');\n  },\n  mounted: function mounted() {\n    this.getStatistics();\n  },\n  methods: {\n    onSeach: function onSeach() {\n      this.getStatistics();\n    },\n    // 具体日期\n    onchangeTime: function onchangeTime(e) {\n      this.timeVal = e;\n      this.dataTime = this.timeVal.join('-');\n      this.name = this.dataTime;\n    },\n    // 统计\n    getStatistics: function getStatistics() {\n      var _this = this;\n\n      this.spinShow = true;\n      statisticBottomTradeApi({\n        data: this.dataTime\n      }).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(res) {\n          var cardLists, incons, i;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  cardLists = res.data;\n                  incons = ['iconyingyee', 'iconjiaoyijine', 'iconshangpinzhifujine', 'icongoumaihuiyuanjine', 'iconchongzhijianshu', 'iconxianxiashouyinjine', 'iconzhichujine', 'iconyuezhifujine', 'iconzhifuyongjinjine', 'iconshangpintuikuanjine'];\n\n                  for (i = 0; i < cardLists.series.length; i++) {\n                    _this.$set(cardLists.series[i], 'icon', incons[i]);\n                  }\n\n                  _this.list = cardLists.series;\n                  _this.getExcel = cardLists.export;\n\n                  _this.get(cardLists);\n\n                  _this.spinShow = false;\n\n                case 7:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this.$Message.error(res.msg);\n\n        _this.spinShow = false;\n      });\n    },\n    get: function get(extract) {\n      var dataList = extract.series.filter(function (item) {\n        return item.type === 1;\n      });\n      var legend = dataList.map(function (item) {\n        return item.name;\n      });\n      var col = ['#5B8FF9', '#5AD8A6', '#5D7092', '#F5222D', '#FFAB2B', '#B37FEB'];\n      var seriesData = [];\n      dataList.map(function (item, index) {\n        var series = [];\n        Object.keys(item.value).forEach(function (key) {\n          series.push(Number(item.value[key]));\n        });\n        seriesData.push({\n          name: item.name,\n          type: 'line',\n          data: series,\n          itemStyle: {\n            normal: {\n              color: col[index]\n            }\n          },\n          smooth: true\n        });\n      });\n      this.optionData = {\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'cross',\n            label: {\n              backgroundColor: '#6a7985'\n            }\n          }\n        },\n        legend: {\n          x: 'center',\n          data: legend\n        },\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '3%',\n          containLabel: true\n        },\n        toolbox: {\n          show: true,\n          right: '2%',\n          feature: {\n            saveAsImage: {\n              name: '交易统计_' + formatDate(new Date(Number(new Date().getTime())), 'yyyyMMddhhmmss')\n            }\n          }\n        },\n        xAxis: {\n          type: 'category',\n          boundaryGap: true,\n          axisLabel: {\n            interval: 0,\n            rotate: 40,\n            textStyle: {\n              color: '#000000'\n            }\n          },\n          data: extract.x\n        },\n        yAxis: {\n          type: 'value',\n          axisLine: {\n            show: false\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            textStyle: {\n              color: '#7F8B9C'\n            }\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              color: '#F5F7F9'\n            }\n          }\n        },\n        series: seriesData\n      };\n    },\n    excel: function excel() {\n      window.location.href = this.getExcel;\n    },\n    // 统计图\n    getTrend: function getTrend() {\n      var _this2 = this;\n\n      statisticTrendApi({\n        data: this.dataTime\n      }).then(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(res) {\n          var legend, xAxis, col, series;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  legend = res.data.series.map(function (item) {\n                    return item.name;\n                  });\n                  xAxis = res.data.xAxis;\n                  col = ['#5B8FF9', '#5AD8A6', '#5D7092', '#5D7092'];\n                  series = [];\n                  res.data.series.map(function (item, index) {\n                    series.push({\n                      name: item.name,\n                      type: 'line',\n                      data: item.value,\n                      itemStyle: {\n                        normal: {\n                          color: col[index]\n                        }\n                      }\n                    });\n                  });\n                  _this2.optionData = {\n                    tooltip: {\n                      trigger: 'axis',\n                      axisPointer: {\n                        type: 'cross',\n                        label: {\n                          backgroundColor: '#6a7985'\n                        }\n                      }\n                    },\n                    legend: {\n                      x: '1px',\n                      y: '10px',\n                      data: legend\n                    },\n                    grid: {\n                      left: '3%',\n                      right: '4%',\n                      bottom: '3%',\n                      containLabel: true\n                    },\n                    toolbox: {\n                      show: true,\n                      right: '2%',\n                      feature: {\n                        saveAsImage: {}\n                      }\n                    },\n                    xAxis: {\n                      type: 'category',\n                      boundaryGap: true,\n                      // axisTick:{\n                      //     show:false\n                      // },\n                      // axisLine:{\n                      //     show:false\n                      // },\n                      // splitLine: {\n                      //     show: false\n                      // },\n                      axisLabel: {\n                        interval: 0,\n                        rotate: 40,\n                        textStyle: {\n                          color: '#000000'\n                        }\n                      },\n                      data: xAxis\n                    },\n                    yAxis: {\n                      type: 'value',\n                      splitLine: {\n                        show: false\n                      },\n                      axisLine: {\n                        show: false\n                      }\n                    },\n                    series: series\n                  }; // this.TrendList =\n\n                case 6:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this2.$Message.error(res.msg);\n      });\n    }\n  }\n};",null]}