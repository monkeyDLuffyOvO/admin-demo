{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/libs/system/index.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/libs/system/index.js","mtime":1655777970000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * 系统内置方法集，正常情况下您不应该修改或移除此文件\n * */\nimport { cloneDeep } from 'lodash';\n/**\n * @description 根据当前路由，找打顶部菜单名称\n * @param {String} currentPath 当前路径\n * @param {Array} menuList 所有路径\n * */\n\nfunction getHeaderName(to, menuList) {\n  var allMenus = [];\n  menuList.forEach(function (menu) {\n    var headerName = menu.header || '';\n    var menus = transferMenu(menu, headerName);\n    allMenus.push({\n      path: menu.path,\n      header: headerName\n    });\n    menus.forEach(function (item) {\n      return allMenus.push(item);\n    });\n  });\n  var currentMenu = allMenus.find(function (item) {\n    if (item.path === to.path) {\n      return true;\n    } else {\n      return to.path === getPath(to, item.path);\n    }\n  });\n  return currentMenu ? currentMenu.header : null;\n}\n\nfunction getPath(to, path) {\n  var params = [];\n  var query = [];\n  Object.keys(to.params).forEach(function (item) {\n    params.push(to.params[item]);\n  });\n  Object.keys(to.query).forEach(function (item) {\n    query.push(item + '=' + to.query[item]);\n  });\n  return path + (params.length ? '/' + params.join('/') : '') + (query.length ? '?' + query.join('&') : '');\n}\n\nfunction transferMenu(menu, headerName) {\n  if (menu.children && menu.children.length) {\n    return menu.children.reduce(function (all, item) {\n      all.push({\n        path: item.path,\n        header: headerName\n      });\n      var foundChildren = transferMenu(item, headerName);\n      return all.concat(foundChildren);\n    }, []);\n  } else {\n    return [menu];\n  }\n}\n\nexport { getHeaderName };\n/**\n * @description 根据当前路由，找打顶部菜单名称\n * @param {String} currentPath 当前路径\n * @param {Array} menuList 所有路径\n * */\n\nfunction getHeaderSider(menuList) {\n  return menuList.filter(function (item) {\n    return item.is_header === 1;\n  });\n}\n\nexport { getHeaderSider };\n/**\n * @description 根据当前顶栏菜单 name，找到对应的二级菜单\n * @param {Array} menuList 所有的二级菜单\n * @param {String} headerName 当前顶栏菜单的 name\n * */\n\nfunction getMenuSider(menuList) {\n  var headerName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  if (headerName) {\n    return menuList.filter(function (item) {\n      return item.header === headerName;\n    });\n  } else {\n    return menuList;\n  }\n}\n\nexport { getMenuSider };\n/**\n * @description 根据当前路由，找到其所有父菜单 path，作为展开侧边栏 open-names 依据\n * @param {String} currentPath 当前路径\n * @param {Array} menuList 所有路径\n * */\n// function getSiderSubmenu (currentPath, menuList) {\n//     const allMenus = [];\n//     menuList.forEach(menu => {\n//         const menus = transferSubMenu(menu, []);\n//         allMenus.push({\n//             path: menu.path,\n//             openNames: []\n//         });\n//         menus.forEach(item => allMenus.push(item));\n//     });\n//     const currentMenu = allMenus.find(item => item.path === currentPath);\n//     return currentMenu ? currentMenu.openNames : [];\n// }\n\nfunction getSiderSubmenu(to, menuList) {\n  var allMenus = [];\n  menuList.forEach(function (menu) {\n    var menus = transferSubMenu(menu, []);\n    allMenus.push({\n      path: menu.path,\n      openNames: []\n    });\n    menus.forEach(function (item) {\n      return allMenus.push(item);\n    });\n  });\n  var currentMenu = allMenus.find(function (item) {\n    if (item.openNames.length) {\n      return item.path === to.path || to.path === getPath(to, item.path);\n    }\n  });\n  return currentMenu ? currentMenu.openNames : [];\n}\n\nfunction transferSubMenu(menu, openNames) {\n  if (menu.children && menu.children.length) {\n    var itemOpenNames = openNames.concat([menu.path]);\n    return menu.children.reduce(function (all, item) {\n      all.push({\n        path: item.path,\n        openNames: itemOpenNames\n      });\n      var foundChildren = transferSubMenu(item, itemOpenNames);\n      return all.concat(foundChildren);\n    }, []);\n  } else {\n    return [menu].map(function (item) {\n      return {\n        path: item.path,\n        openNames: openNames\n      };\n    });\n  }\n}\n\nexport { getSiderSubmenu };\n/**\n * @description 递归获取所有子菜单\n * */\n\nfunction getAllSiderMenu(menuList) {\n  var allMenus = [];\n  menuList.forEach(function (menu) {\n    if (menu.children && menu.children.length) {\n      var menus = getMenuChildren(menu);\n      menus.forEach(function (item) {\n        return allMenus.push(item);\n      });\n    } else {\n      allMenus.push(menu);\n    }\n  });\n  return allMenus;\n}\n\nfunction getMenuChildren(menu) {\n  if (menu.children && menu.children.length) {\n    return menu.children.reduce(function (all, item) {\n      var foundChildren = getMenuChildren(item);\n      return all.concat(foundChildren);\n    }, []);\n  } else {\n    return [menu];\n  }\n}\n\nexport { getAllSiderMenu };\n/**\n * @description 将菜单转为平级\n * */\n\nfunction flattenSiderMenu(menuList, newList) {\n  menuList.forEach(function (menu) {\n    var newMenu = {};\n\n    for (var i in menu) {\n      if (i !== 'children') newMenu[i] = cloneDeep(menu[i]);\n    }\n\n    newList.push(newMenu);\n    menu.children && flattenSiderMenu(menu.children, newList);\n  });\n  return newList;\n}\n\nexport { flattenSiderMenu };\n/**\n * @description 判断列表1中是否包含了列表2中的某一项\n * 因为用户权限 access 为数组，includes 方法无法直接得出结论\n * */\n\nfunction includeArray(list1, list2) {\n  var status = false;\n\n  if (list1 === true) {\n    return true;\n  } else {\n    if (_typeof(list2) !== 'object') {\n      return false;\n    }\n\n    list2.forEach(function (item) {\n      if (list1.includes(item)) status = true;\n    });\n    return status;\n  }\n}\n\nexport { includeArray };",null]}