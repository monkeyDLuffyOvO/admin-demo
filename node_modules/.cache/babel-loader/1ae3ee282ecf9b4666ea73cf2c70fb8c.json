{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/system/file/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/system/file/index.vue","mtime":1663291930000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getCategoryListApi, createApi, fileListApi, categoryEditApi, moveApi, fileUpdateApi } from \"@/api/uploadPictures\";\nimport Setting from \"@/setting\"; // import { getCookies } from \"@/libs/util\";\n\nimport util from \"@/libs/util\";\nimport uploadVideo from \"@/components/uploadVideos\";\nexport default {\n  name: \"uploadPictures\",\n  components: {\n    uploadVideo: uploadVideo\n  },\n  props: {\n    isChoice: {\n      type: String,\n      default: \"\"\n    },\n    gridBtn: {\n      type: Object,\n      default: null\n    },\n    gridPic: {\n      type: Object,\n      default: null\n    },\n    isShow: {\n      type: Number,\n      default: 1\n    }\n  },\n  data: function data() {\n    return {\n      searchClass: false,\n      spinShow: false,\n      fileUrl: Setting.apiBaseURL + \"/file/upload\",\n      modalPic: false,\n      treeData: [],\n      treeData2: [],\n      pictrueList: [],\n      uploadData: {},\n      // 上传参数\n      checkPicList: [],\n      uploadName: {\n        name: \"\",\n        file_type: '1'\n      },\n      FromData: null,\n      treeId: 0,\n      isJudge: false,\n      buttonProps: {\n        type: \"default\",\n        size: \"small\"\n      },\n      fileData: {\n        pid: 0,\n        page: 1,\n        limit: 40\n      },\n      total: 0,\n      pids: 0,\n      list: [],\n      modalTitleSs: \"\",\n      isShowPic: false,\n      header: {},\n      ids: [],\n      // 选中附件的id集合\n      headTab: [{\n        title: \"图片\",\n        name: \"1\"\n      }, {\n        title: \"视频\",\n        name: \"2\"\n      }],\n      modalVideo: false\n    };\n  },\n  mounted: function mounted() {\n    this.getToken();\n    this.getList();\n    this.getFileList();\n  },\n  methods: {\n    uploadVideo: function uploadVideo() {\n      this.modalVideo = true;\n    },\n    getvideo: function getvideo() {\n      this.modalVideo = false;\n      this.fileData.page = 1;\n      this.getFileList();\n    },\n    onhangeTab: function onhangeTab() {\n      this.getList();\n      this.getFileList();\n      this.checkPicList = [];\n    },\n    enterMouse: function enterMouse(item) {\n      item.realName = !item.realName;\n    },\n    enterLeave: function enterLeave(item) {\n      item.isShowEdit = !item.isShowEdit;\n    },\n    // 上传头部token\n    getToken: function getToken() {\n      this.header[\"Authori-zation\"] = \"Bearer \" + util.cookies.get(\"token\");\n    },\n    // 树状图\n    renderContent: function renderContent(h, _ref) {\n      var _this = this;\n\n      var root = _ref.root,\n          node = _ref.node,\n          data = _ref.data;\n      var operate = [];\n\n      if (data.pid == 0) {\n        operate.push(h(\"div\", {\n          class: [\"ivu-dropdown-item\"],\n          on: {\n            click: function click() {\n              _this.append(root, node, data);\n            }\n          }\n        }, \"添加分类\"));\n      }\n\n      if (data.id) {\n        operate.push(h(\"div\", {\n          class: [\"ivu-dropdown-item\"],\n          on: {\n            click: function click() {\n              _this.editPic(root, node, data);\n            }\n          }\n        }, \"编辑分类\"), h(\"div\", {\n          class: [\"ivu-dropdown-item\"],\n          on: {\n            click: function click() {\n              _this.remove(root, node, data, \"分类\");\n            }\n          }\n        }, \"删除分类\"));\n      }\n\n      return h(\"span\", {\n        class: [\"ivu-span\"],\n        style: {\n          display: \"inline-block\",\n          width: \"88%\",\n          height: \"32px\",\n          lineHeight: \"32px\",\n          position: \"relative\",\n          color: \"rgba(0,0,0,0.6)\",\n          cursor: \"pointer\"\n        },\n        on: {\n          mouseenter: function mouseenter() {\n            _this.onMouseOver(root, node, data);\n          },\n          mouseleave: function mouseleave() {\n            _this.onMouseOver(root, node, data);\n          }\n        }\n      }, [h(\"span\", {\n        on: {\n          click: function click(e) {\n            _this.appendBtn(root, node, data, e);\n          }\n        }\n      }, data.title), h(\"div\", {\n        style: {\n          display: \"inline-block\",\n          float: \"right\"\n        }\n      }, [h(\"Icon\", {\n        props: {\n          type: \"ios-more\"\n        },\n        style: {\n          marginRight: \"8px\",\n          fontSize: \"20px\",\n          display: data.flag ? \"inline\" : \"none\"\n        },\n        on: {\n          click: function click() {\n            _this.onClick(root, node, data);\n          }\n        }\n      }), h(\"div\", {\n        class: [\"right-menu ivu-poptip-inner\"],\n        style: {\n          width: \"80px\",\n          position: \"absolute\",\n          zIndex: \"9\",\n          top: \"32px\",\n          right: \"0\",\n          display: data.flag2 ? \"block\" : \"none\"\n        }\n      }, operate)])]);\n    },\n    renderContentSel: function renderContentSel(h, _ref2) {\n      var _this2 = this;\n\n      var root = _ref2.root,\n          node = _ref2.node,\n          data = _ref2.data;\n      return h(\"div\", {\n        style: {\n          display: \"inline-block\",\n          width: \"90%\"\n        }\n      }, [h(\"span\", [h(\"span\", {\n        style: {\n          cursor: \"pointer\"\n        },\n        class: [\"ivu-tree-title\"],\n        on: {\n          click: function click(e) {\n            _this2.handleCheckChange(root, node, data, e);\n          }\n        }\n      }, data.title)])]);\n    },\n    // 下拉树\n    handleCheckChange: function handleCheckChange(root, node, data, e) {\n      this.list = []; // this.pids = 0;\n\n      var value = data.id;\n      var title = data.title;\n      this.list.push({\n        value: value,\n        title: title\n      });\n\n      if (this.ids.length) {\n        this.pids = value;\n        this.getMove();\n      } else {\n        this.$Message.warning(\"请先选择图片\");\n      }\n\n      var selected = this.$refs.reference.$el.querySelectorAll(\".ivu-tree-title-selected\");\n\n      for (var i = 0; i < selected.length; i++) {\n        selected[i].className = \"ivu-tree-title\";\n      }\n\n      e.path[0].className = \"ivu-tree-title  ivu-tree-title-selected\"; // 当前点击的元素\n    },\n    // 移动分类\n    getMove: function getMove() {\n      var _this3 = this;\n\n      var data = {\n        pid: this.pids,\n        images: this.ids.toString()\n      };\n      moveApi(data).then(\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(res) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this3.$Message.success(res.msg);\n\n                  _this3.getFileList();\n\n                  _this3.pids = 0;\n                  _this3.checkPicList = [];\n                  _this3.ids = [];\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this3.$Message.error(res.msg);\n      });\n    },\n    // 删除图片\n    editPicList: function editPicList(tit) {\n      var _this4 = this;\n\n      var ids = {\n        ids: this.ids.toString()\n      };\n\n      if (typeof tit == 'number') {\n        ids = {\n          ids: tit.toString()\n        };\n      }\n\n      var delfromData = {\n        title: this.uploadName.file_type == 1 ? \"删除选中图片\" : \"删除选中视频\",\n        url: \"file/file/delete\",\n        method: \"POST\",\n        ids: ids\n      };\n      this.$modalSure(delfromData).then(function (res) {\n        _this4.$Message.success(res.msg);\n\n        _this4.getFileList();\n\n        _this4.checkPicList = [];\n      }).catch(function (res) {\n        _this4.$Message.error(res.msg);\n      });\n    },\n    // 鼠标移入 移出\n    onMouseOver: function onMouseOver(root, node, data) {\n      event.preventDefault();\n      data.flag = !data.flag;\n\n      if (data.flag2) {\n        data.flag2 = false;\n      }\n    },\n    onClick: function onClick(root, node, data) {\n      data.flag2 = !data.flag2;\n    },\n    // 点击树\n    appendBtn: function appendBtn(root, node, data, e) {\n      this.treeId = data.id ? data.id : 0;\n      this.fileData.page = 1;\n      this.getFileList();\n      var selected = this.$refs.tree.$el.querySelectorAll(\".ivu-tree-title-selected\");\n\n      for (var i = 0; i < selected.length; i++) {\n        selected[i].className = \"ivu-tree-title\";\n      }\n\n      e.path[0].className = \"ivu-tree-title  ivu-tree-title-selected\"; // 当前点击的元素\n    },\n    // 点击添加\n    append: function append(root, node, data) {\n      this.treeId = data.id;\n      this.getFrom();\n    },\n    // 删除分类\n    remove: function remove(root, node, data, tit) {\n      var _this5 = this;\n\n      this.tits = tit;\n      var delfromData = {\n        title: \"删除 [ \" + data.title + \" ] \" + \"分类\",\n        url: \"file/category/\".concat(data.id),\n        method: \"DELETE\",\n        ids: \"\"\n      };\n      this.$modalSure(delfromData).then(function (res) {\n        _this5.$Message.success(res.msg);\n\n        _this5.getList();\n\n        _this5.checkPicList = [];\n      }).catch(function (res) {\n        _this5.$Message.error(res.msg);\n      });\n    },\n    // 确认删除树\n    // submitModel () {\n    //     if (this.tits === '图片') {\n    //         this.getFileList();\n    //         this.checkPicList = [];\n    //     } else {\n    //         this.getList();\n    //         this.checkPicList = [];\n    //     }\n    // },\n    // 编辑树表单\n    editPic: function editPic(root, node, data) {\n      var _this6 = this;\n\n      this.$modalForm(categoryEditApi(data.id, {\n        file_type: this.uploadName.file_type\n      })).then(function () {\n        return _this6.getList();\n      });\n    },\n    // 搜索分类\n    changePage: function changePage() {\n      this.getList(\"search\");\n    },\n    // 分类列表树\n    getList: function getList(type) {\n      var _this7 = this;\n\n      var data = {\n        title: this.uploadName.file_type == 1 ? '全部图片' : '全部视频',\n        id: \"\",\n        pid: 0\n      };\n      getCategoryListApi(this.uploadName).then(\n      /*#__PURE__*/\n      function () {\n        var _ref4 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(res) {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this7.treeData = res.data.list;\n\n                  _this7.treeData.unshift(data);\n\n                  if (type !== \"search\") {\n                    _this7.treeData2 = _toConsumableArray(_this7.treeData);\n                  } else {\n                    _this7.searchClass = true;\n                  }\n\n                  _this7.addFlag(_this7.treeData);\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref4.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this7.$Message.error(res.msg);\n      });\n    },\n    loadData: function loadData(item, callback) {\n      getCategoryListApi({\n        pid: item.id,\n        file_type: this.uploadName.file_type\n      }).then(\n      /*#__PURE__*/\n      function () {\n        var _ref5 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3(res) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  data = res.data.list;\n                  callback(data);\n\n                case 2:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x3) {\n          return _ref5.apply(this, arguments);\n        };\n      }()).catch(function (res) {});\n    },\n    addFlag: function addFlag(treedata) {\n      var _this8 = this;\n\n      treedata.map(function (item) {\n        _this8.$set(item, \"flag\", false);\n\n        _this8.$set(item, \"flag2\", false);\n\n        item.children && _this8.addFlag(item.children);\n      });\n    },\n    // 新建分类\n    add: function add() {\n      this.treeId = 0;\n      this.getFrom();\n    },\n    // 文件列表\n    getFileList: function getFileList() {\n      var _this9 = this;\n\n      this.fileData.pid = this.treeId;\n      this.fileData.file_type = this.uploadName.file_type;\n      fileListApi(this.fileData).then(\n      /*#__PURE__*/\n      function () {\n        var _ref6 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4(res) {\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  res.data.list.forEach(function (el) {\n                    el.isSelect = false;\n                    el.isEdit = false;\n                    el.isShowEdit = false;\n                    el.realName = false;\n                    el.num = 0;\n\n                    _this9.editName(el);\n                  });\n                  _this9.pictrueList = res.data.list;\n\n                  if (_this9.pictrueList.length) {\n                    _this9.isShowPic = false;\n                  } else {\n                    _this9.isShowPic = true;\n                  }\n\n                  _this9.total = res.data.count;\n\n                case 4:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n\n        return function (_x4) {\n          return _ref6.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this9.$Message.error(res.msg);\n      });\n    },\n    pageChange: function pageChange(index) {\n      this.fileData.page = index;\n      this.getFileList();\n      this.checkPicList = [];\n    },\n    // 新建分类表单\n    getFrom: function getFrom() {\n      var _this10 = this;\n\n      this.$modalForm(createApi({\n        id: this.treeId,\n        file_type: this.uploadName.file_type\n      })).then(function (res) {\n        _this10.getList();\n      });\n    },\n    // 上传之前\n    beforeUpload: function beforeUpload(res) {\n      var _this11 = this;\n\n      //控制文件上传格式\n      var imgTypeArr = [\"image/png\", \"image/jpg\", \"image/jpeg\", \"image/gif\"];\n      var imgType = imgTypeArr.indexOf(res.type) !== -1;\n\n      if (!imgType) {\n        this.$Message.warning({\n          content: '文件  ' + res.name + '  格式不正确, 请选择格式正确的图片',\n          duration: 5\n        });\n        return false;\n      } // 控制文件上传大小\n\n\n      var imgSize = this.$cache.local.getJSON('file_size_max');\n      var Maxsize = res.size < imgSize;\n      var fileMax = imgSize / 1024 / 1024;\n\n      if (!Maxsize) {\n        this.$Message.warning({\n          content: '文件体积过大,图片大小不能超过' + fileMax + 'M',\n          duration: 5\n        });\n        return false;\n      }\n\n      this.uploadData = {\n        pid: this.treeId\n      };\n      var promise = new Promise(function (resolve) {\n        _this11.$nextTick(function () {\n          resolve(true);\n        });\n      });\n      return promise;\n    },\n    // 上传成功\n    handleSuccess: function handleSuccess(res, file, fileList) {\n      if (res.status === 200) {\n        this.fileData.page = 1;\n        this.$Message.success(res.msg);\n        this.getFileList();\n      } else {\n        this.$Message.error(res.msg);\n      }\n    },\n    // 关闭\n    cancel: function cancel() {\n      this.$emit(\"changeCancel\");\n    },\n    // 选中图片\n    changImage: function changImage(item, index, row) {\n      var _this12 = this;\n\n      var activeIndex = 0;\n\n      if (!item.isSelect) {\n        item.isSelect = true;\n        this.checkPicList.push(item);\n      } else {\n        item.isSelect = false;\n        this.checkPicList.map(function (el, index) {\n          if (el.att_id == item.att_id) {\n            activeIndex = index;\n          }\n        });\n        this.checkPicList.splice(activeIndex, 1);\n      }\n\n      this.ids = [];\n      this.checkPicList.map(function (item, i) {\n        _this12.ids.push(item.att_id);\n      });\n      this.pictrueList.map(function (el, i) {\n        if (el.isSelect) {\n          _this12.checkPicList.filter(function (el2, j) {\n            if (el.att_id == el2.att_id) {\n              el.num = j + 1;\n            }\n          });\n        } else {\n          el.num = 0;\n        }\n      });\n    },\n    // 点击使用选中图片\n    checkPics: function checkPics() {\n      if (this.isChoice === \"单选\") {\n        if (this.checkPicList.length > 1) return this.$Message.warning(\"最多只能选一张图片\");\n        this.$emit(\"getPic\", this.checkPicList[0]);\n      } else {\n        var maxLength = this.$route.query.maxLength;\n        if (maxLength != undefined && this.checkPicList.length > Number(maxLength)) return this.$Message.warning(\"最多只能选\" + maxLength + \"张图片\");\n        this.$emit(\"getPicD\", this.checkPicList);\n      }\n    },\n    editName: function editName(item) {\n      var it = item.real_name.split(\".\");\n      var it1 = it[1] == undefined ? [] : it[1];\n      var len = it[0].length + it1.length;\n      item.editName = item.real_name; // item.editName =\n      //         len < 10\n      //                 ? item.real_name\n      //                 : item.real_name.substr(0, 2) + \"...\" + item.real_name.substr(-5, 5);\n    },\n    // 修改图片文字上传\n    bindTxt: function bindTxt(item) {\n      var _this13 = this;\n\n      if (item.real_name == \"\") {\n        this.$Message.error(\"请填写内容\");\n      }\n\n      fileUpdateApi(item.att_id, {\n        real_name: item.real_name\n      }).then(function (res) {\n        _this13.editName(item);\n\n        item.isEdit = false;\n\n        _this13.$Message.success(res.msg);\n      }).catch(function (error) {\n        _this13.$Message.error(error.msg);\n      });\n    }\n  }\n};",null]}