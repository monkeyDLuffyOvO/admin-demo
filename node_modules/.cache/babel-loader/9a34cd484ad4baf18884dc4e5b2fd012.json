{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/utils/modal.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/utils/modal.js","mtime":1664694290692},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["// +----------------------------------------------------------------------\n// | HIGOSHOP [ HIGOSHOP助力中小企业数字化转型 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2020~2022 https://www.higoshop.net All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed HIGOSHOP并不是自由软件，未经许可不能去掉HIGOSHOP相关版权\n// +----------------------------------------------------------------------\n// | Author: HIGOSHOP Team <higoshop@126.com>\n// +----------------------------------------------------------------------\nimport Vue from 'vue';\nimport Modal from 'iview/src/components/modal/modal.vue';\nimport Button from 'iview/src/components/button/button.vue';\nimport Locale from 'iview/src/mixins/locale';\nvar prefixCls = 'ivu-modal-alert';\n\nModal.newInstance = function (properties) {\n  var _props = properties || {};\n\n  var Instance = new Vue({\n    mixins: [Locale],\n    data: Object.assign({}, _props, {\n      visible: false,\n      width: 416,\n      title: '',\n      body: '',\n      iconType: '',\n      iconName: '',\n      okText: undefined,\n      cancelText: undefined,\n      showCancel: false,\n      loading: false,\n      draggable: false,\n      buttonLoading: false,\n      scrollable: false,\n      closable: true,\n      closing: false // 关闭有动画，期间使用此属性避免重复点击\n\n    }),\n    render: function render(h) {\n      var _this = this;\n\n      var footerVNodes = [];\n\n      if (this.showCancel) {\n        footerVNodes.push(h(Button, {\n          props: {\n            type: 'text',\n            size: 'large'\n          },\n          on: {\n            click: this.cancel\n          }\n        }, this.localeCancelText));\n      } // footerVNodes.push(h(Button, {\n      //   props: {\n      //     type: 'primary',\n      //     size: 'large',\n      //     loading: this.buttonLoading\n      //   },\n      //   on: {\n      //     click: this.ok\n      //   }\n      // }, this.localeOkText))\n      // render content\n\n\n      var body_render;\n\n      if (this.render) {\n        body_render = h('div', {\n          attrs: {\n            class: \"\".concat(prefixCls, \"-body \").concat(prefixCls, \"-body-render\")\n          }\n        }, [this.render(h)]);\n      } else {\n        body_render = h('div', {\n          attrs: {\n            class: \"\".concat(prefixCls, \"-body\")\n          }\n        }, [h('div', {\n          domProps: {\n            innerHTML: this.body\n          }\n        })]);\n      } // when render with no title, hide head\n\n\n      var head_render;\n\n      if (this.title) {\n        head_render = h('div', {\n          attrs: {\n            class: \"ivu-modal-header form-modal-m\"\n          },\n          slot: 'header'\n        }, [h('div', {\n          attrs: {\n            class: 'ivu-modal-header-inner'\n          },\n          domProps: {\n            innerHTML: this.title,\n            style: 'font-size:16px;line-height:20px;font-weight:500;color:#17233d;'\n          }\n        })]);\n      }\n\n      return h(Modal, {\n        props: Object.assign({}, _props, {\n          width: this.width,\n          scrollable: this.scrollable,\n          closable: this.closable,\n          className: \"vertical-center-modal\"\n        }),\n        domProps: {\n          value: this.visible\n        },\n        on: {\n          input: function input(status) {\n            _this.visible = status;\n          },\n          'on-cancel': this.cancel\n        }\n      }, [h('div', {\n        attrs: {\n          class: prefixCls\n        }\n      }, [head_render, body_render, h('div', {\n        attrs: {\n          class: \"\".concat(prefixCls, \"-footer\")\n        }\n      }, footerVNodes)])]);\n    },\n    computed: {\n      iconTypeCls: function iconTypeCls() {\n        return [\"\".concat(prefixCls, \"-head-icon\"), \"\".concat(prefixCls, \"-head-icon-\").concat(this.iconType)];\n      },\n      iconNameCls: function iconNameCls() {\n        return ['ivu-icon', \"ivu-icon-\".concat(this.iconName)];\n      },\n      localeOkText: function localeOkText() {\n        if (this.okText) {\n          return this.okText;\n        } else {\n          return this.t('i.modal.okText');\n        }\n      },\n      localeCancelText: function localeCancelText() {\n        if (this.cancelText) {\n          return this.cancelText;\n        } else {\n          return this.t('i.modal.cancelText');\n        }\n      }\n    },\n    methods: {\n      cancel: function cancel() {\n        if (this.closing) return;\n        this.$children[0].visible = false;\n        this.buttonLoading = false;\n        this.onCancel();\n        this.remove();\n      },\n      ok: function ok() {\n        if (this.closing) return;\n\n        if (this.loading) {\n          this.buttonLoading = true;\n        } else {\n          this.$children[0].visible = false;\n          this.remove();\n        }\n\n        this.onOk();\n      },\n      remove: function remove() {\n        var _this2 = this;\n\n        this.closing = true;\n        setTimeout(function () {\n          _this2.closing = false;\n\n          _this2.destroy();\n        }, 300);\n      },\n      destroy: function destroy() {\n        this.$destroy();\n\n        if (this.$el) {\n          document.body.removeChild(this.$el);\n        }\n\n        this.onRemove();\n      },\n      onOk: function onOk() {},\n      onCancel: function onCancel() {},\n      onRemove: function onRemove() {}\n    }\n  });\n  var component = Instance.$mount();\n  document.body.appendChild(component.$el);\n  var modal = Instance.$children[0];\n  return {\n    show: function show(props) {\n      modal.$parent.showCancel = props.showCancel;\n      modal.$parent.iconType = props.icon;\n\n      switch (props.icon) {\n        case 'info':\n          modal.$parent.iconName = 'ios-information-circle';\n          break;\n\n        case 'success':\n          modal.$parent.iconName = 'ios-checkmark-circle';\n          break;\n\n        case 'warning':\n          modal.$parent.iconName = 'ios-alert';\n          break;\n\n        case 'error':\n          modal.$parent.iconName = 'ios-close-circle';\n          break;\n\n        case 'confirm':\n          modal.$parent.iconName = 'ios-help-circle';\n          break;\n      }\n\n      if ('width' in props) {\n        modal.$parent.width = props.width;\n      }\n\n      if ('closable' in props) {\n        modal.$parent.closable = props.closable;\n      }\n\n      if ('title' in props) {\n        modal.$parent.title = props.title;\n      }\n\n      if ('content' in props) {\n        modal.$parent.body = props.content;\n      }\n\n      if ('okText' in props) {\n        modal.$parent.okText = props.okText;\n      }\n\n      if ('cancelText' in props) {\n        modal.$parent.cancelText = props.cancelText;\n      }\n\n      if ('onCancel' in props) {\n        modal.$parent.onCancel = props.onCancel;\n      }\n\n      if ('onOk' in props) {\n        modal.$parent.onOk = props.onOk;\n      } // async for ok\n\n\n      if ('loading' in props) {\n        modal.$parent.loading = props.loading;\n      }\n\n      if ('scrollable' in props) {\n        modal.$parent.scrollable = props.scrollable;\n      } // notice when component destroy\n\n\n      modal.$parent.onRemove = props.onRemove;\n      modal.visible = true;\n    },\n    remove: function remove() {\n      modal.visible = false;\n      modal.$parent.buttonLoading = false;\n      modal.$parent.remove();\n    },\n    component: modal\n  };\n};\n\nexport default Modal;",null]}