{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js??ref--13-0!/home/darkcrossunicorn/文档/admin/src/store/modules/admin/modules/account.js","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/store/modules/admin/modules/account.js","mtime":1664694339070},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// +----------------------------------------------------------------------\n// | HIGOSHOP [ HIGOSHOP助力中小企业数字化转型 ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2020~2022 https://www.higoshop.net All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed HIGOSHOP并不是自由软件，未经许可不能去掉HIGOSHOP相关版权\n// +----------------------------------------------------------------------\n// | Author: HIGOSHOP Team <higoshop@126.com>\n// +----------------------------------------------------------------------\n\n/**\n * 注册、登录、注销\n * */\nimport util from '@/libs/util';\nimport router from '@/router';\nimport store from '@/store/index';\nimport { AccountLogin, AccountRegister, AccountLogout, getSysInfo } from '@api/account';\nimport { AccountLogoutKefu } from '@api/kefu';\nimport { Socket } from '@/libs/socket';\nimport { Modal } from 'view-design';\nimport { console } from \"vuedraggable/src/util/helper\";\nexport default {\n  namespaced: true,\n  actions: {\n    /**\n     * @description 登录\n     * @param {Object} param context\n     * @param {Object} param username {String} 用户账号\n     * @param {Object} param password {String} 密码\n     * @param {Object} param route {Object} 登录成功后定向的路由对象 任何 vue-router 支持的格式\n     */\n    login: function login(_ref) {\n      var dispatch = _ref.dispatch;\n\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$username = _ref2.username,\n          username = _ref2$username === void 0 ? '' : _ref2$username,\n          _ref2$password = _ref2.password,\n          password = _ref2$password === void 0 ? '' : _ref2$password;\n\n      return new Promise(function (resolve, reject) {\n        // 开始请求登录接口\n        AccountLogin({\n          username: username,\n          password: password\n        }).then(\n        /*#__PURE__*/\n        function () {\n          var _ref3 = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee(res) {\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    // 设置 cookie 一定要存 uuid 和 token 两个 cookie\n                    // 整个系统依赖这两个数据进行校验和存储\n                    // uuid 是用户身份唯一标识 用户注册的时候确定 并且不可改变 不可重复\n                    // token 代表用户当前登录状态 建议在网络请求中携带 token\n                    // 如有必要 token 需要定时更新，默认保存一天，可在 setting.js 中修改\n                    // 如果你的 token 不是通过 cookie 携带，而是普通字段，也可视情况存储在 localStorage\n                    util.cookies.set('uuid', res.uuid);\n                    util.cookies.set('token', res.token); // 设置 vuex 用户信息\n\n                    _context.next = 4;\n                    return dispatch('admin/user/set', res.info, {\n                      root: true\n                    });\n\n                  case 4:\n                    _context.next = 6;\n                    return dispatch('load');\n\n                  case 6:\n                    // 结束\n                    resolve();\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          }));\n\n          return function (_x) {\n            return _ref3.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * @description 退出客服登录\n     * */\n    logoutKefu: function logoutKefu(_ref4) {\n      var commit = _ref4.commit,\n          dispatch = _ref4.dispatch;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref5$confirm = _ref5.confirm,\n          confirm = _ref5$confirm === void 0 ? false : _ref5$confirm,\n          vm = _ref5.vm;\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      function _logout() {\n        _logout = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  AccountLogoutKefu().then(function () {\n                    vm.bus.pageWs.then(function (ws) {\n                      ws.send({\n                        type: 'logout',\n                        data: {\n                          uid: util.cookies.kefuGet('uuid')\n                        }\n                      });\n                    });\n                    util.cookies.kefuRemove('token');\n                    util.cookies.kefuRemove('expires_time');\n                    util.cookies.kefuRemove('uuid');\n                    util.cookies.kefuRemove('kefuInfo'); // 跳转路由\n\n                    router.push({\n                      path: '/kefu'\n                    });\n                  }).catch(function (error) {});\n\n                case 1:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n        return _logout.apply(this, arguments);\n      }\n\n      if (confirm) {\n        Modal.confirm({\n          title: vm.$t('basicLayout.logout.confirmTitle'),\n          content: vm.$t('basicLayout.logout.confirmContent'),\n          onOk: function onOk() {\n            logout();\n          }\n        });\n      } else {\n        logout();\n      }\n    },\n\n    /**\n     * @description 退出登录\n     * */\n    logout: function logout(_ref6) {\n      var commit = _ref6.commit,\n          dispatch = _ref6.dispatch;\n\n      var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref7$confirm = _ref7.confirm,\n          confirm = _ref7$confirm === void 0 ? false : _ref7$confirm,\n          vm = _ref7.vm;\n\n      function logout() {\n        return _logout2.apply(this, arguments);\n      }\n\n      function _logout2() {\n        _logout2 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3() {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  AccountLogout().then(function () {\n                    // localStorage.clear();\n                    // sessionStorage.clear()\n                    util.cookies.remove('token');\n                    util.cookies.remove('expires_time');\n                    util.cookies.remove('uuid'); // 删除localStorage\n\n                    store.dispatch('admin/db/databaseClear', {\n                      user: true\n                    }); // 清空 vuex 用户信息\n\n                    dispatch('admin/user/set', {}, {\n                      root: true\n                    }); // 跳转路由\n\n                    router.push({\n                      name: 'login'\n                    });\n                  }).catch(function () {});\n\n                case 1:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n        return _logout2.apply(this, arguments);\n      }\n\n      if (confirm) {\n        Modal.confirm({\n          title: vm.$t('basicLayout.logout.confirmTitle'),\n          content: vm.$t('basicLayout.logout.confirmContent'),\n          onOk: function onOk() {\n            logout();\n          }\n        });\n      } else {\n        logout();\n      }\n    },\n\n    /**\n     * @description 注册\n     * @param {Object} param context\n     * @param {Object} param mail {String} 邮箱\n     * @param {Object} param password {String} 密码\n     * @param {Object} param mobile {String} 手机号码\n     * @param {Object} param captcha {String} 验证码\n     */\n    register: function register(_ref8) {\n      var dispatch = _ref8.dispatch;\n\n      var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref9$mail = _ref9.mail,\n          mail = _ref9$mail === void 0 ? '' : _ref9$mail,\n          _ref9$password = _ref9.password,\n          password = _ref9$password === void 0 ? '' : _ref9$password,\n          _ref9$mobile = _ref9.mobile,\n          mobile = _ref9$mobile === void 0 ? '' : _ref9$mobile,\n          _ref9$captcha = _ref9.captcha,\n          captcha = _ref9$captcha === void 0 ? '' : _ref9$captcha;\n\n      return new Promise(function (resolve, reject) {\n        // 开始请求登录接口\n        AccountRegister({\n          mail: mail,\n          password: password,\n          mobile: mobile,\n          captcha: captcha\n        }).then(\n        /*#__PURE__*/\n        function () {\n          var _ref10 = _asyncToGenerator(\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function _callee4(res) {\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    // 注册成功后，完成与登录一致的操作\n                    // 注册也可视情况不返还 uuid、token 等数据，在注册完成后，由前端自动执行一次登录逻辑\n                    util.cookies.set('uuid', res.uuid);\n                    util.cookies.set('token', res.token); // 设置 vuex 用户信息\n\n                    _context4.next = 4;\n                    return dispatch('admin/user/set', res.info, {\n                      root: true\n                    });\n\n                  case 4:\n                    _context4.next = 6;\n                    return dispatch('load');\n\n                  case 6:\n                    // 结束\n                    resolve();\n\n                  case 7:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          return function (_x2) {\n            return _ref10.apply(this, arguments);\n          };\n        }()).catch(function (err) {\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * @description 用户登录后从持久化数据加载一系列的设置\n     * @param {Object} state vuex state\n     * @param {Object} dispatch vuex dispatch\n     */\n    load: function load(_ref11) {\n      var state = _ref11.state,\n          dispatch = _ref11.dispatch;\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref12 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee5(resolve) {\n          return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return dispatch('admin/user/load', null, {\n                    root: true\n                  });\n\n                case 2:\n                  _context5.next = 4;\n                  return dispatch('admin/page/openedLoad', null, {\n                    root: true\n                  });\n\n                case 4:\n                  // end\n                  resolve();\n\n                case 5:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function (_x3) {\n          return _ref12.apply(this, arguments);\n        };\n      }());\n    },\n\n    /**\n     * @description 设置title\n     * @param {Object} state vuex state\n     * @param {Object} dispatch vuex dispatch\n     */\n    setPageTitle: function setPageTitle() {\n      getSysInfo().then(function (res) {\n        util.cookies.set('pageTitle', res.data.site_name);\n        var index = window.document.title.indexOf('-');\n        var title = window.document.title.substring(0, index);\n        title = title.replace(/(^\\s*)|(\\s*$)/g, \"\");\n        util.title({\n          title: title\n        });\n      });\n    }\n  }\n};",null]}