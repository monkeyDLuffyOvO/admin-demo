{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/statistic/capital/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/statistic/capital/index.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/home/darkcrossunicorn/\\u6587\\u6863/admin/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { mapState } from \"vuex\";\nimport { getFlowList, setMarks } from \"@/api/statistic\";\nimport timeOptions from \"@/utils/timeOptions\";\nexport default {\n  name: \"order\",\n  data: function data() {\n    return {\n      modalmark: false,\n      options: timeOptions,\n      remarks: {\n        mark: \"\"\n      },\n      staff: [],\n      total: 0,\n      grid: {\n        xl: 7,\n        lg: 7,\n        md: 12,\n        sm: 24,\n        xs: 24\n      },\n      loading: false,\n      columns: [{\n        title: \"交易单号\",\n        key: \"flow_id\",\n        minWidth: 180\n      }, {\n        title: \"关联订单\",\n        key: \"order_id\",\n        minWidth: 180\n      }, {\n        title: \"交易金额\",\n        slot: \"price\",\n        minWidth: 80\n      }, {\n        title: \"交易用户\",\n        key: \"nickname\",\n        ellipsis: true,\n        minWidth: 80\n      }, {\n        title: \"交易时间\",\n        key: \"add_time\",\n        minWidth: 150\n      }, {\n        title: \"交易类型\",\n        key: \"trading_type\",\n        minWidth: 80\n      }, {\n        title: \"支付方式\",\n        key: \"pay_type\",\n        minWidth: 80\n      }, {\n        title: \"备注\",\n        key: \"mark\",\n        minWidth: 120\n      }, {\n        title: \"操作\",\n        slot: \"action\",\n        // fixed: \"right\",\n        minWidth: 80,\n        align: \"center\"\n      }],\n      tabList: [],\n      withdrawal: [],\n      formValidate: {\n        trading_type: '',\n        time: \"\",\n        keywords: \"\",\n        page: 1,\n        limit: 20\n      },\n      timeVal: [],\n      fromList: {\n        title: \"选择时间\",\n        custom: true,\n        fromTxt: [{\n          text: \"全部\",\n          val: \"\"\n        }, {\n          text: \"昨天\",\n          val: \"yesterday\"\n        }, {\n          text: \"今天\",\n          val: \"today\"\n        }, {\n          text: \"本周\",\n          val: \"week\"\n        }, {\n          text: \"本月\",\n          val: \"month\"\n        }, {\n          text: \"本季度\",\n          val: \"quarter\"\n        }, {\n          text: \"本年\",\n          val: \"year\"\n        }]\n      }\n    };\n  },\n  computed: _objectSpread({}, mapState(\"admin/layout\", [\"isMobile\"]), {\n    labelWidth: function labelWidth() {\n      return this.isMobile ? undefined : 96;\n    },\n    labelPosition: function labelPosition() {\n      return this.isMobile ? \"top\" : \"right\";\n    }\n  }),\n  mounted: function mounted() {\n    this.getList();\n  },\n  methods: {\n    getList: function getList() {\n      var _this = this;\n\n      this.loading = true;\n      getFlowList(this.formValidate).then(\n      /*#__PURE__*/\n      function () {\n        var _ref = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(res) {\n          var data;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  data = res.data;\n                  _this.tabList = data.list;\n                  _this.total = data.count;\n                  _this.withdrawal = data.status;\n                  _this.loading = false;\n\n                case 5:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()).catch(function (res) {\n        _this.loading = false;\n\n        _this.$Message.error(res.msg);\n      });\n    },\n    search: function search() {\n      this.formValidate.page = 1; // this.formValidate.trading_type = e;\n\n      this.getList();\n    },\n    reset: function reset() {\n      this.formValidate = {\n        trading_type: 0,\n        time: \"\",\n        keywords: \"\",\n        page: 1,\n        limit: 20\n      };\n      this.timeVal = [];\n      this.getList();\n    },\n    // 选择时间\n    selectChange: function selectChange(tab) {\n      this.formValidate.page = 1;\n      this.formValidate.time = tab;\n      this.timeVal = [];\n      this.getList();\n    },\n    // 具体日期\n    onchangeTime: function onchangeTime(e) {\n      this.timeVal = e;\n      this.formValidate.time = this.timeVal[0] ? this.timeVal.join(\"-\") : \"\";\n      this.formValidate.page = 1;\n      this.getList();\n    },\n    //分页\n    pageChange: function pageChange(status) {\n      this.formValidate.page = status;\n      this.getList();\n    },\n    remark: function remark(e) {\n      this.remarkId = e.id;\n      this.modalmark = true;\n      this.remarks.mark = e.mark;\n    },\n    //备注的提交\n    putRemark: function putRemark() {\n      var _this2 = this;\n\n      this.modalmark = false;\n      setMarks(this.remarkId, this.remarks).then(function (res) {\n        _this2.$Message.success(res.msg);\n\n        _this2.modal_loading = false;\n        _this2.modals = false;\n\n        _this2.getList();\n      }).catch(function (err) {\n        _this2.modal_loading = false;\n\n        _this2.$Message.error(err.msg);\n      });\n    },\n    // 取消备注按钮\n    cancel: function cancel() {\n      this.remarks = {\n        mark: \"\"\n      };\n      this.modalmark = false;\n    }\n  }\n};",null]}