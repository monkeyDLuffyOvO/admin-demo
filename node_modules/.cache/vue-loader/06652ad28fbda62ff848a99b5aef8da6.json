{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/work/authGroup/addAuthGroup.vue?vue&type=template&id=48dee358&scoped=true&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/work/authGroup/addAuthGroup.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"div\",\n        { staticClass: \"i-layout-page-header\" },\n        [\n          _c(\n            \"PageHeader\",\n            { staticClass: \"product_tabs\", attrs: { \"hidden-breadcrumb\": \"\" } },\n            [\n              _c(\"div\", { attrs: { slot: \"title\" }, slot: \"title\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"float-l\" },\n                  [\n                    _c(\n                      \"router-link\",\n                      { attrs: { to: { path: \"/admin/work/auth_group\" } } },\n                      [\n                        _c(\"div\", { staticClass: \"font-sm after-line\" }, [\n                          _c(\"span\", { staticClass: \"iconfont iconfanhui\" }),\n                          _c(\"span\", { staticClass: \"pl10\" }, [_vm._v(\"返回\")])\n                        ])\n                      ]\n                    )\n                  ],\n                  1\n                ),\n                _c(\"span\", { staticClass: \"mr20 ml16\" }, [\n                  _vm._v(\"新建自动拉群\")\n                ])\n              ])\n            ]\n          )\n        ],\n        1\n      ),\n      _c(\n        \"Card\",\n        { staticClass: \"ivu-mt\", attrs: { bordered: false, \"dis-hover\": \"\" } },\n        [\n          _c(\n            \"Form\",\n            {\n              attrs: {\n                model: _vm.formItem,\n                \"label-width\": 110,\n                \"label-colon\": true,\n                rules: _vm.ruleValidate\n              }\n            },\n            [\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"二维码名称\", prop: \"name\" } },\n                [\n                  _c(\"Input\", {\n                    staticClass: \"input-add\",\n                    attrs: { placeholder: \"请输入二维码名称\" },\n                    model: {\n                      value: _vm.formItem.name,\n                      callback: function($$v) {\n                        _vm.$set(_vm.formItem, \"name\", $$v)\n                      },\n                      expression: \"formItem.name\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"选择群聊\", required: \"\" } },\n                [\n                  _c(\n                    \"Button\",\n                    {\n                      on: {\n                        click: function($event) {\n                          return _vm.addGroup()\n                        }\n                      }\n                    },\n                    [_vm._v(\"添加群聊\")]\n                  ),\n                  _c(\n                    \"div\",\n                    { staticClass: \"mt10\" },\n                    _vm._l(_vm.formItem.chat_id, function(item, index) {\n                      return _c(\n                        \"Tag\",\n                        {\n                          key: index,\n                          attrs: {\n                            closable: \"\",\n                            name: item.name,\n                            size: \"medium\"\n                          },\n                          on: { \"on-close\": _vm.handleDel }\n                        },\n                        [_vm._v(_vm._s(item.name))]\n                      )\n                    }),\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"自动建群\" } },\n                [\n                  _c(\n                    \"i-switch\",\n                    {\n                      attrs: {\n                        size: \"large\",\n                        \"true-value\": 1,\n                        \"false-value\": 0\n                      },\n                      model: {\n                        value: _vm.formItem.auth_group_chat,\n                        callback: function($$v) {\n                          _vm.$set(_vm.formItem, \"auth_group_chat\", $$v)\n                        },\n                        expression: \"formItem.auth_group_chat\"\n                      }\n                    },\n                    [\n                      _c(\"span\", { attrs: { slot: \"open\" }, slot: \"open\" }, [\n                        _vm._v(\"开启\")\n                      ]),\n                      _c(\"span\", { attrs: { slot: \"close\" }, slot: \"close\" }, [\n                        _vm._v(\"关闭\")\n                      ])\n                    ]\n                  ),\n                  _c(\"div\", { staticClass: \"desc\" }, [\n                    _vm._v(\n                      \"\\n            开启时，选择群聊群人数达到上限后，将以原群主身份自动创建新群聊\\n          \"\n                    )\n                  ])\n                ],\n                1\n              ),\n              _vm.formItem.auth_group_chat\n                ? _c(\n                    \"FormItem\",\n                    { attrs: { label: \"设置群名称\" } },\n                    [\n                      _c(\"Input\", {\n                        staticClass: \"input-add\",\n                        attrs: { placeholder: \"请输入群名称\" },\n                        model: {\n                          value: _vm.formItem.group_name,\n                          callback: function($$v) {\n                            _vm.$set(_vm.formItem, \"group_name\", $$v)\n                          },\n                          expression: \"formItem.group_name\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _vm.formItem.auth_group_chat\n                ? _c(\n                    \"FormItem\",\n                    { attrs: { label: \"群序号\" } },\n                    [\n                      _c(\"InputNumber\", {\n                        attrs: { \"controls-outside\": \"\", min: 0, max: 999 },\n                        model: {\n                          value: _vm.formItem.group_num,\n                          callback: function($$v) {\n                            _vm.$set(_vm.formItem, \"group_num\", $$v)\n                          },\n                          expression: \"formItem.group_num\"\n                        }\n                      }),\n                      _c(\"div\", { staticClass: \"desc\" }, [\n                        _vm._v(\n                          \"\\n            群序列号将在自动创建群时自动增加，比如设置的群名为：西安客户群，设置的序列表为：5，那么自动建群的名称为：西安客户群5，西安客户群6，西安客户群7，西安客户群8。\\n          \"\n                        )\n                      ])\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"客户标签\" } },\n                [\n                  _c(\"TreeSelect\", {\n                    directives: [\n                      {\n                        name: \"width\",\n                        rawName: \"v-width\",\n                        value: 400,\n                        expression: \"400\"\n                      }\n                    ],\n                    attrs: { data: _vm.labelList, multiple: \"\" },\n                    model: {\n                      value: _vm.formItem.label,\n                      callback: function($$v) {\n                        _vm.$set(_vm.formItem, \"label\", $$v)\n                      },\n                      expression: \"formItem.label\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"Card\",\n        {\n          staticClass: \"fixed-card\",\n          style: {\n            left:\n              \"\" + (!_vm.menuCollapse ? \"200px\" : _vm.isMobile ? \"0\" : \"80px\")\n          },\n          attrs: { bordered: false, \"dis-hover\": \"\" }\n        },\n        [\n          _c(\n            \"div\",\n            { staticClass: \"acea-row row-center-wrapper\" },\n            [\n              _c(\n                \"Button\",\n                {\n                  staticClass: \"step_btn\",\n                  attrs: { type: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.submit()\n                    }\n                  }\n                },\n                [_vm._v(\"保存\")]\n              )\n            ],\n            1\n          )\n        ]\n      ),\n      _c(\n        \"Modal\",\n        {\n          attrs: {\n            width: \"960px\",\n            scrollable: \"\",\n            \"footer-hide\": \"\",\n            closable: \"\",\n            title: \"logo\",\n            \"mask-closable\": false,\n            \"z-index\": 9\n          },\n          model: {\n            value: _vm.modalPic,\n            callback: function($$v) {\n              _vm.modalPic = $$v\n            },\n            expression: \"modalPic\"\n          }\n        },\n        [\n          _vm.modalPic\n            ? _c(\"uploadPictures\", {\n                attrs: {\n                  isChoice: _vm.isChoice,\n                  gridBtn: _vm.gridBtn,\n                  gridPic: _vm.gridPic\n                },\n                on: { getPic: _vm.getPic }\n              })\n            : _vm._e()\n        ],\n        1\n      ),\n      _c(\n        \"Modal\",\n        {\n          attrs: { title: \"添加小程序消息\", \"z-index\": 1 },\n          on: { \"on-ok\": _vm.routineConfirm },\n          model: {\n            value: _vm.modalRoutine,\n            callback: function($$v) {\n              _vm.modalRoutine = $$v\n            },\n            expression: \"modalRoutine\"\n          }\n        },\n        [\n          _c(\n            \"Form\",\n            {\n              attrs: {\n                model: _vm.formItem,\n                \"label-width\": 110,\n                \"label-colon\": true\n              }\n            },\n            [\n              _c(\"FormItem\", { attrs: { label: \"小程序功能页\" } }, [\n                _c(\n                  \"div\",\n                  {\n                    staticClass: \"picBox\",\n                    on: {\n                      click: function($event) {\n                        return _vm.modalPicTap(\"routine\")\n                      }\n                    }\n                  },\n                  [\n                    _vm.rontineObj.miniprogram.pic_url\n                      ? _c(\"div\", { staticClass: \"pictrue\" }, [\n                          _c(\"img\", {\n                            directives: [\n                              {\n                                name: \"lazy\",\n                                rawName: \"v-lazy\",\n                                value: _vm.rontineObj.miniprogram.pic_url,\n                                expression: \"rontineObj.miniprogram.pic_url\"\n                              }\n                            ]\n                          })\n                        ])\n                      : _c(\"div\", { staticClass: \"upLoad\" }, [\n                          _c(\"div\", { staticClass: \"iconfont\" }, [_vm._v(\"+\")])\n                        ])\n                  ]\n                )\n              ]),\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"小程序消息标题\" } },\n                [\n                  _c(\"Input\", {\n                    model: {\n                      value: _vm.rontineObj.miniprogram.title,\n                      callback: function($$v) {\n                        _vm.$set(_vm.rontineObj.miniprogram, \"title\", $$v)\n                      },\n                      expression: \"rontineObj.miniprogram.title\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"小程序Appid\" } },\n                [\n                  _c(\"Input\", {\n                    model: {\n                      value: _vm.rontineObj.miniprogram.appid,\n                      callback: function($$v) {\n                        _vm.$set(_vm.rontineObj.miniprogram, \"appid\", $$v)\n                      },\n                      expression: \"rontineObj.miniprogram.appid\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"FormItem\",\n                { attrs: { label: \"小程序功能页\" } },\n                [\n                  _c(\"Input\", {\n                    model: {\n                      value: _vm.rontineObj.miniprogram.page,\n                      callback: function($$v) {\n                        _vm.$set(_vm.rontineObj.miniprogram, \"page\", $$v)\n                      },\n                      expression: \"rontineObj.miniprogram.page\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"Modal\",\n        {\n          attrs: { title: \"客户群列表\", width: \"900\" },\n          on: { \"on-ok\": _vm.groupConfirm },\n          model: {\n            value: _vm.groupStatus,\n            callback: function($$v) {\n              _vm.groupStatus = $$v\n            },\n            expression: \"groupStatus\"\n          }\n        },\n        [\n          _c(\"Table\", {\n            attrs: {\n              columns: _vm.groupColumn,\n              data: _vm.groupData.list,\n              loading: _vm.userLoading\n            },\n            on: {\n              \"on-select-all\": _vm.selectAll,\n              \"on-select-all-cancel\": _vm.selectAll,\n              \"on-selection-change\": _vm.handleSelectRow\n            },\n            scopedSlots: _vm._u([\n              {\n                key: \"avatar\",\n                fn: function(ref) {\n                  var row = ref.row\n                  return [\n                    _c(\"viewer\", { staticClass: \"acea-row row-center\" }, [\n                      _c(\"div\", { staticClass: \"tabBox_img\" }, [\n                        _c(\"img\", {\n                          directives: [\n                            {\n                              name: \"lazy\",\n                              rawName: \"v-lazy\",\n                              value: row.client.avatar,\n                              expression: \"row.client.avatar\"\n                            }\n                          ]\n                        })\n                      ])\n                    ])\n                  ]\n                }\n              },\n              {\n                key: \"ownerInfo\",\n                fn: function(ref) {\n                  var row = ref.row\n                  return [_c(\"span\", [_vm._v(_vm._s(row.ownerInfo.name))])]\n                }\n              },\n              {\n                key: \"admin_user_list\",\n                fn: function(ref) {\n                  var row = ref.row\n                  return _vm._l(row.admin_user_list, function(item, index) {\n                    return _c(\"span\", { key: index }, [\n                      _vm._v(_vm._s(item.name))\n                    ])\n                  })\n                }\n              },\n              {\n                key: \"notice\",\n                fn: function(ref) {\n                  var row = ref.row\n                  return [\n                    _c(\n                      \"Tooltip\",\n                      { attrs: { \"max-width\": \"200\", placement: \"bottom\" } },\n                      [\n                        _c(\"span\", { staticClass: \"line2\" }, [\n                          _vm._v(_vm._s(row.notice))\n                        ]),\n                        _c(\n                          \"p\",\n                          { attrs: { slot: \"content\" }, slot: \"content\" },\n                          [_vm._v(_vm._s(row.notice))]\n                        )\n                      ]\n                    )\n                  ]\n                }\n              },\n              {\n                key: \"name\",\n                fn: function(ref) {\n                  var row = ref.row\n                  return [_c(\"span\", [_vm._v(_vm._s(row.client.name))])]\n                }\n              }\n            ])\n          }),\n          _c(\n            \"div\",\n            { staticClass: \"acea-row row-right page\" },\n            [\n              _c(\"Page\", {\n                attrs: {\n                  total: _vm.groupData.count,\n                  current: _vm.groupForm.page,\n                  \"show-elevator\": \"\",\n                  \"show-total\": \"\",\n                  \"page-size\": _vm.groupForm.limit\n                },\n                on: { \"on-change\": _vm.groupChange }\n              })\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\"department\", {\n        ref: \"department\",\n        attrs: {\n          \"active-department\": _vm.activeDepartment,\n          \"is-site\": _vm.isSite,\n          userList: _vm.userList,\n          \"only-department\": _vm.onlyDepartment\n        },\n        on: { changeMastart: _vm.changeMastart }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}