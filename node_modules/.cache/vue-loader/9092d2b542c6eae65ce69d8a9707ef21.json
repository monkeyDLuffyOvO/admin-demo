{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/components/fromSubmit/fromSubmit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/components/fromSubmit/fromSubmit.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import Schema from 'async-validator';\n    import {Message} from \"iview\";\n    import request from '@/plugins/request';\n    import { mapMutations } from \"vuex\";\n\n    export default {\n        name: \"fromSubmit\",\n        components:{\n            useComponent:() => import('../fromBuild/useComponent'),\n        },\n        props:{\n            rules:{\n                type:Array,\n                default(){\n                    return [];\n                }\n            },\n            validate:{\n                type:Object,\n                default(){\n                    return {};\n                }\n            },\n            butName:{\n                type:String,\n                default:'提交',\n            },\n            field:{\n                type:String,\n                default(){\n                    return ''+Math.random();\n                },\n            },\n            url:{\n                type:String,\n                default:\"\",\n            },\n            method:{\n                type:String,\n                default:\"POST\",\n            },\n            buttonHide:{\n                type: Boolean,\n                default: true,\n            },\n            on:{\n                type:Object,\n                default(){\n                    return {};\n                },\n            },\n        },\n        data() {\n            return {\n                submitValue: {},\n                disabled: false,\n                loading: false,\n                errorsValidate: [],\n            };\n        },\n        watch: {\n            rules: {\n                handler() {\n                    this.submitValue = this.getRuleValue(this.rules);\n                },\n                deep: true,\n            },\n        },\n        mounted() {\n            this.submitValue = this.getRuleValue(this.rules);\n            this.setCopyrightShow({ value: false });\n        },\n        destroyed () {\n            this.setCopyrightShow({ value: true });\n        },\n        methods:{\n            ...mapMutations('admin/layout', [\n                'setCopyrightShow',\n\t\t\t\t\t\t\t\t\"isMobile\",\n\t\t\t\t\t\t\t\t\"menuCollapse\"\n            ]),\n            //组件值变动事件\n            changeValue(e) {\n                this.submitValue[e.field] = e.value;\n                this.rules = this.setRuleValue(this.rules,e.field, e.value);\n            },\n            //设置组件值\n            setRuleValue(rules, field, vvvv) {\n                rules.map(item =>{\n                    if (item.field !== undefined && item.field === field) {\n                        item.value = vvvv;\n                    }\n                    if (typeof item.options === 'object') {\n                        item.options.map(option => {\n                            if (option.componentsModel !== undefined) {\n                                option.componentsModel = this.setRuleValue(option.componentsModel, field, vvvv);\n                            }\n                        });\n                    }\n                    if (typeof item.control === 'object') {\n                        item.control.map(value => {\n                            if (value.componentsModel !== undefined) {\n                                value.componentsModel = this.setRuleValue(value.componentsModel, field, vvvv);\n                            }\n                        });\n                    }\n                    if (typeof item.componentsModel === \"object\") {\n                        item.componentsModel = this.setRuleValue(item.componentsModel, field, vvvv);\n                    }\n                });\n                return rules;\n            },\n            //获取默认值\n            getRuleValue(rules) {\n                let submitValue = {};\n                rules.map(item=>{\n                    if (item.field !== undefined) {\n                        submitValue[item.field] = item.value\n                    }\n                    if (typeof item.options === 'object') {\n                        item.options.map(option => {\n                            if (option.componentsModel !== undefined) {\n                                let values = this.getRuleValue(option.componentsModel);\n                                Object.assign(submitValue, values);\n                            }\n                        });\n                    }\n                    if (typeof item.control === 'object') {\n                        item.control.map(value => {\n                            if (value.componentsModel !== undefined) {\n                                let values = this.getRuleValue(value.componentsModel);\n                                Object.assign(submitValue, values);\n                            }\n                        });\n                    }\n                    if (typeof item.componentsModel === \"object\") {\n                        let values = this.getRuleValue(item.componentsModel);\n                        Object.assign(submitValue, values);\n                    }\n                })\n                return submitValue;\n            },\n            //表单提交\n            submit(){\n                let  validator = new Schema(this.validate);\n                validator.validate(this.submitValue,(error) => {\n                    if (error === undefined || error === null) {\n                        this.errorsValidate = [];\n                        this.disabled = true;\n                        this.loading = true;\n\n                        if (this.on['save']) {\n                            try {\n                                this.on['save'](this.submitValue, ()=> this.disabled = false, ()=> this.loading = false)\n                            } catch (e) {\n                                Message.error(err || '提交失败')\n                            }\n                        } else {\n                            request[this.method.toLowerCase()](this.url, this.submitValue).then((res) => {\n                                Message.success(res.msg || '提交成功')\n                                this.on['submit'] && this.on['submit'](res)\n                            }).catch(err => {\n                                Message.error(err.msg || '提交失败')\n                            }).finally(() => {\n                                this.disabled = false;\n                                this.loading = false;\n                            })\n                        }\n                    } else {\n                        this.errorsValidate = error;\n                        Message.error(error[0].message);\n                    }\n                });\n\n            },\n        }\n    }\n",null]}