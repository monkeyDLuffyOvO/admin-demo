{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/statistic/product/components/productInfo.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/statistic/product/components/productInfo.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  statisticBasicApi,\n  statisticTrendApi,\n  statisticProductExcel,\n} from \"@/api/statistic\";\nimport echartsNew from \"@/components/echartsNew/index\";\nimport { formatDate } from \"@/utils/validate\";\nimport exportExcel from \"@/utils/newToExcel.js\";\nimport timeOptions from \"@/utils/timeOptions\"\nexport default {\n  name: \"productInfo\",\n  components: {\n    echartsNew,\n  },\n  data() {\n    return {\n      spinShow: false,\n      grid: {\n        xl: 8,\n        lg: 8,\n        md: 8,\n        sm: 24,\n        xs: 24,\n      },\n      options: timeOptions,\n      name: \"近30天\",\n      timeVal: [],\n      dataTime: \"\",\n      list: [],\n      optionData: {},\n      style: { height: \"400px\" },\n    };\n  },\n  created() {\n    const end = new Date();\n    const start = new Date();\n    start.setTime(\n      start.setTime(\n        new Date(\n          new Date().getFullYear(),\n          new Date().getMonth(),\n          new Date().getDate() - 29\n        )\n      )\n    );\n    this.timeVal = [start, end];\n    this.dataTime =\n      formatDate(start, \"yyyy/MM/dd\") + \"-\" + formatDate(end, \"yyyy/MM/dd\");\n  },\n  mounted() {\n    this.getStatistics();\n    this.getTrend();\n  },\n  methods: {\n    // 导出\n    // exports() {\n    //   statisticProductExcel({ data: this.dataTime }).then(async (res) => {\n    //     res.data.url.map((item) => {\n    //       window.location.href = item;\n    //     });\n    //   });\n    // },\n    // 数据导出；\n    async exports() {\n      let [th, filekey, data, fileName] = [[], [], [], \"\"];\n      let excelData = { data: this.dataTime, page: 1 };\n      let lebData = await this.getExcelData(excelData);\n      if (!fileName) fileName = lebData.filename;\n      if (!filekey.length) {\n        filekey = lebData.filekey;\n      }\n      if (!th.length) th = lebData.header;\n      data = data.concat(lebData.export);\n      exportExcel(th, filekey, fileName, data);\n    },\n    getExcelData(excelData) {\n      return new Promise((resolve, reject) => {\n        statisticProductExcel(excelData).then((res) => {\n          return resolve(res.data);\n        });\n      });\n    },\n    onSeach() {\n      this.getStatistics();\n      this.getTrend();\n    },\n    // 具体日期\n    onchangeTime(e) {\n      this.timeVal = e;\n      this.dataTime = this.timeVal.join(\"-\");\n    },\n    // 统计\n    getStatistics() {\n      statisticBasicApi({ data: this.dataTime })\n        .then(async (res) => {\n          const cardLists = res.data;\n          this.list = [\n            {\n              name: \"商品浏览量\",\n              icon: \"iconshangpinliulanliang\",\n              list: cardLists.browse,\n              txt: \"在选定条件下，所有商品详情页被访问的次数，一个人在统计时间内访问多次记为多次\",\n            },\n            {\n              name: \"商品访客数\",\n              icon: \"iconshangpinfangkeshu\",\n              list: cardLists.user,\n              txt: \"在选定条件下，访问任何商品详情页的人数，一个人在统计时间范围内访问多次只记为一个\",\n            },\n            {\n              name: \"加购件数\",\n              icon: \"iconjiagoujianshu\",\n              list: cardLists.cart,\n              txt: \"在选定条件下，添加商品进入购物车的商品件数\",\n            },\n            {\n              name: \"下单件数\",\n              icon: \"iconxiadanjianshu\",\n              list: cardLists.order,\n              txt: \"在选定条件下，成功下单的商品件数之和（拼团商品在成团之后计入，线下支付订单在后台确认支付后计入，不剔除退款订单）\",\n            },\n            {\n              name: \"支付件数\",\n              icon: \"iconzhifujianshu\",\n              list: cardLists.pay,\n              txt: \"在选定条件下，成功付款订单的商品件数之和（拼团商品在成团之后计入，线下支付订单在后台确认支付后计入，不剔除退款订单）\",\n            },\n            {\n              name: \"支付金额\",\n              icon: \"iconzhifujine\",\n              list: cardLists.payPrice,\n              txt: \"在选定条件下，成功付款订单的商品金额之和（拼团商品在成团之后计入，线下支付订单在后台确认支付后计入，不剔除退款订单）\",\n            },\n            {\n              name: \"成本金额\",\n              icon: \"iconchengbenjine\",\n              list: cardLists.cost,\n              txt: \"在选定条件下，成功付款订单的商品成本金额之和\",\n            },\n            {\n              name: \"退款金额\",\n              icon: \"icontuikuan\",\n              list: cardLists.refundPrice,\n              txt: \"在选定条件下，成功退款的商品金额之和\",\n            },\n            {\n              name: \"退款件数\",\n              icon: \"icontuikuanjianshu\",\n              list: cardLists.refund,\n              txt: \"在选定条件下，成功退款的商品件数之和\",\n            },\n            {\n              name: \"访客-支付转化率\",\n              icon: \"iconfangke-zhifuzhuanhuashuai\",\n              list: cardLists.payPercent,\n              txt: \"在选定条件下， 付款人数 / 访客数\",\n            },\n          ];\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    // 统计图\n    getTrend() {\n      this.spinShow = true;\n      statisticTrendApi({ data: this.dataTime })\n        .then(async (res) => {\n          let legend = res.data.series.map((item) => {\n            return item.name;\n          });\n          let xAxis = res.data.xAxis;\n          let col = [\"#B37FEB\", \"#FFAB2B\", \"#1890FF\", \"#00C050\"];\n          res.data.series.map((item, index) => {\n            item.itemStyle = {\n              normal: {\n                color: col[index],\n              },\n            };\n          });\n          this.optionData = {\n            tooltip: {\n              trigger: \"axis\",\n              axisPointer: {\n                type: \"cross\",\n                label: {\n                  backgroundColor: \"#6a7985\",\n                },\n              },\n            },\n            legend: {\n              x: \"center\",\n              data: legend,\n            },\n            grid: {\n              left: \"3%\",\n              right: \"4%\",\n              bottom: \"3%\",\n              containLabel: true,\n            },\n            toolbox: {\n              show: true,\n              right: \"1.5%\",\n              feature: {\n                saveAsImage: {\n\t\t\t\t\t\t\t\t\tname: '商品统计_'+formatDate(new Date(Number(new Date().getTime())), 'yyyyMMddhhmmss')\n\t\t\t\t\t\t\t\t},\n              },\n            },\n            xAxis: {\n              type: \"category\",\n              boundaryGap: true,\n              // axisTick:{\n              //     show:false\n              // },\n              // axisLine:{\n              //     show:false\n              // },\n              // splitLine: {\n              //     show: false\n              // },\n              axisLabel: {\n                interval: 0,\n                rotate: 40,\n                textStyle: {\n                  color: \"#000000\",\n                },\n              },\n              data: xAxis,\n            },\n            yAxis: [\n              {\n                type: \"value\",\n                name: \"金额\",\n                axisLine: {\n                  show: false,\n                },\n                axisTick: {\n                  show: false,\n                },\n                axisLabel: {\n                  textStyle: {\n                    color: \"#7F8B9C\",\n                  },\n                },\n                splitLine: {\n                  show: true,\n                  lineStyle: {\n                    color: \"#F5F7F9\",\n                  },\n                },\n              },\n              {\n                type: \"value\",\n                name: \"数量\",\n                axisLine: {\n                  show: false,\n                },\n                axisTick: {\n                  show: false,\n                },\n                axisLabel: {\n                  textStyle: {\n                    color: \"#7F8B9C\",\n                  },\n                },\n                splitLine: {\n                  show: true,\n                  lineStyle: {\n                    color: \"#F5F7F9\",\n                  },\n                },\n                // axisLabel: {\n                //     formatter: '{value} °C'\n                // }\n              },\n            ],\n            series: res.data.series,\n          };\n          this.spinShow = false;\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n          this.spinShow = false;\n        });\n    },\n  },\n};\n",null]}