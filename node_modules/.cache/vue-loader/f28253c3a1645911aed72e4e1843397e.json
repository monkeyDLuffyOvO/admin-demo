{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/order/orderList/components/tableList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/order/orderList/components/tableList.vue","mtime":1663552087000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Distribution from './distribution.vue'\nimport expandRow from './tableExpand.vue'\nimport {\n  orderList,\n  getOrdeDatas,\n  getDataInfo,\n  getRefundFrom,\n  getnoRefund,\n  refundIntegral,\n  getDistribution,\n  writeUpdate,\n  storeOrderApi,\n  handBatchDelivery,\n  putWrite,\n  exportExpressList,\n   remindOrder,\n} from '@/api/order'\nimport { erpConfig } from '@/api/erp'\nimport { mapState, mapMutations } from 'vuex'\nimport editFrom from '../../../../components/from/from'\nimport detailsFrom from '../handle/orderDetails'\nimport orderRemark from '../handle/orderRemark'\nimport orderRecord from '../handle/orderRecord'\nimport orderSend from '../handle/orderSend'\nimport userDetails from '@/pages/user/list/handle/userDetails'\nimport autoSend from '../handle/autoSend'\nimport queueList from '../handle/queueList'\nimport Setting from '@/setting'\nimport util from '@/libs/util'\nimport exportExcel from '@/utils/newToExcel.js'\nexport default {\n  name: 'table_list',\n  components: {\n    expandRow,\n    editFrom,\n    detailsFrom,\n    orderRemark,\n    orderRecord,\n    orderSend,\n    userDetails,\n    Distribution,\n    autoSend,\n    queueList,\n  },\n  props: ['where', 'isAll'],\n  data() {\n    const codeNum = (rule, value, callback) => {\n      if (!value) {\n        return callback(new Error('请填写核销码'))\n      }\n      // 模拟异步验证效果\n      if (!Number.isInteger(value)) {\n        callback(new Error('请填写12位数字'))\n      } else {\n        // const reg = /[0-9]{12}/;\n        const reg = /\\b\\d{12}\\b/\n        if (!reg.test(value)) {\n          callback(new Error('请填写12位数字'))\n        } else {\n          callback()\n        }\n      }\n    }\n    return {\n      openErp: false,\n      currentTab: '-1',\n      distshow: false, //分配的弹窗\n      delfromData: {},\n      modal: false,\n      orderList: [],\n      pay_type: '',\n      orderCards: [],\n      loading: false,\n      orderId: 0,\n      columns: [\n        {\n          type: 'expand',\n          width: 30,\n          render: (h, params) => {\n            return h(expandRow, {\n              props: {\n                row: params.row,\n              },\n            })\n          },\n        },\n        {\n          type: 'selection',\n          width: 60,\n          align: 'center',\n        },\n        {\n          title: '订单号',\n          slot: 'order_id',\n          minWidth: 150,\n        },\n        {\n          title: '订单类型',\n          key: 'pink_name',\n          minWidth: 110,\n        },\n        {\n          title: '用户信息',\n          slot: 'nickname',\n          minWidth: 130,\n        },\n        {\n          title: '商品信息',\n          slot: 'info',\n          minWidth: 330,\n        },\n        {\n          title: '实际支付',\n          slot: 'pay_price',\n          minWidth: 70,\n        },\n        {\n          title: '支付时间',\n          key: '_pay_time',\n          minWidth: 130,\n        },\n        {\n          title: '支付类型',\n          key: 'pay_type_name',\n          minWidth: 100,\n        },\n        {\n          title: '订单状态',\n          slot: 'statusName',\n          minWidth: 100,\n        },\n        {\n          title: '操作',\n          slot: 'action',\n          fixed: 'right',\n          minWidth: 140,\n          align: 'left',\n        },\n      ],\n      page: {\n        total: 0, // 总条数\n        pageNum: 1, // 当前页\n        pageSize: 10, // 每页显示条数\n      },\n      data: [],\n      FromData: null,\n      orderDatalist: null,\n      modalTitleSs: '',\n      isDelIdList: [],\n      checkBox: false,\n      formSelection: [],\n      selectionCopy: [],\n      display: 'none',\n      autoDisabled: false,\n      status: 0, //发货状态判断\n      // isAll: -1,\n      rowActive: {},\n      tablists: {},\n      selectArr: [],\n      exportList: [\n        {\n          name: '1',\n          label: '导出发货单',\n        },\n        {\n          name: '0',\n          label: '导出订单',\n        },\n      ],\n      exportListOn: 0,\n      manualModal: false,\n      uploadAction: `${Setting.apiBaseURL}/file/upload/1`,\n      uploadHeaders: {},\n      autoModal: false,\n      isShow: false,\n      recordModal: false,\n      sendOutValue: '',\n      fileList: [],\n      file: '',\n      modals2: false,\n      writeOffRules: {\n        code: [{ validator: codeNum, trigger: 'blur', required: true }],\n      },\n      writeOffFrom: {\n        code: '',\n        confirm: 0,\n      },\n      orderConNum: 0,\n      orderConId: 0,\n    }\n  },\n  computed: {\n    ...mapState('admin/layout', ['isMobile']),\n    ...mapState('admin/order', [\n      'orderPayType',\n      'orderStatus',\n      'orderTime',\n      'orderNum',\n      'fieldKey',\n      'orderType',\n      'orderChartType',\n      'supplier_id',\n      'store_id',\n      'type_id',\n    ]),\n    labelWidth() {\n      return this.isMobile ? undefined : 96\n    },\n    labelPosition() {\n      return this.isMobile ? 'top' : 'right'\n    },\n  },\n  mounted() {},\n  created() {\n    this.getList()\n    this.getToken()\n    this.getErpConfig()\n  },\n  watch: {\n    orderType: function () {\n      this.page.pageNum = 1\n      this.getList()\n    },\n    formSelection(value) {\n      this.$emit('order-select', value)\n      if (value.length) {\n        this.$emit('auto-disabled', 0)\n      } else {\n        this.$emit('auto-disabled', 1)\n      }\n      let isDel = value.some((item) => {\n        return item.is_del === 1\n      })\n      this.getIsDel(isDel)\n      this.getisDelIdListl(value)\n    },\n    orderList: {\n      deep: true,\n      handler(value) {\n        value.forEach((item) => {\n          this.formSelection.forEach((itm) => {\n            if (itm.id === item.id) {\n              item.checkBox = true\n            }\n          })\n        })\n        const arr = this.orderList.filter((item) => item.checkBox)\n        if (this.orderList.length) {\n          this.checkBox = this.orderList.length === arr.length\n        } else {\n          this.checkBox = false\n        }\n      },\n    },\n  },\n  methods: {\n    ...mapMutations('admin/order', [\n      'getIsDel',\n      'getisDelIdListl',\n      'onChangeTabs',\n      'getStore_id',\n      'getSupplier_id',\n    ]),\n\n    //erp配置\n    getErpConfig() {\n      erpConfig()\n        .then((res) => {\n          this.openErp = res.data.open_erp\n        })\n        .catch((err) => {\n          this.$Message.error(err.msg)\n        })\n    },\n\n    printOreder() {\n      if (this.selectArr.length > 10) {\n        return this.$Message.error('最多批量打印10个订单')\n      }\n      let ids = []\n      this.selectArr.forEach((item) => {\n        ids.push(item.id)\n      })\n      let pathInfo = this.$router.resolve({\n        path: '/admin/supplier/order/distribution',\n        query: {\n          id: ids.join(','),\n          status: 2,\n        },\n      })\n      window.open(pathInfo.href, '_blank')\n    },\n\n    delAll() {\n      if (this.selectArr.length === 0) {\n        this.$Message.error('请先选择删除的订单！')\n      } else {\n        let idArr = []\n        this.selectArr.filter((item) => {\n          idArr.push(item.id)\n        })\n        let idss = {\n          ids: idArr,\n        }\n        let delfromData = {\n          title: '删除订单',\n          url: `/order/dels`,\n          method: 'post',\n          ids: idss,\n        }\n        this.$modalSure(delfromData)\n          .then((res) => {\n            this.$Message.success(res.msg)\n            this.selectArr = []\n            this.getList()\n          })\n          .catch((res) => {\n            this.$Message.error(res.msg)\n          })\n      }\n    },\n\n    onAuto() {\n      this.$refs.sends.modals = true\n      this.$refs.sends.getList()\n      this.$refs.sends.getDeliveryList()\n    },\n    // 提醒发货\n       btnClick(row) {\n      let data = {\n        supplier_id: row.supplier_id,\n        id: row.id,\n      }\n      remindOrder(data)\n        .then(async (res) => {\n          this.$Message.success(res.msg)\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg)\n        })\n    },\n\n    queuemModal() {\n      this.$refs.queue.modal = true\n    },\n\n    // 下载物流公司对照表\n    async getExpressList() {\n      let [th, filekey, data, fileName] = [[], [], [], '']\n      let lebData = await this.getExcelData()\n      if (!fileName) fileName = lebData.filename\n      if (!filekey.length) {\n        filekey = lebData.filekey\n      }\n      if (!th.length) th = lebData.header\n      data = lebData.export\n      exportExcel(th, filekey, fileName, data)\n    },\n\n    getExcelData() {\n      return new Promise((resolve, reject) => {\n        exportExpressList().then((res) => {\n          return resolve(res.data)\n        })\n      })\n    },\n\n    // 订单核销\n    writeOff() {\n      this.modals2 = true\n    },\n\n    // 验证\n    search(name) {\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          this.writeOffFrom.confirm = 0\n          putWrite(this.writeOffFrom)\n            .then(async (res) => {\n              if (res.status === 200) {\n                // this.orderInfo = res.data;\n                this.$Message.success(res.msg)\n              } else {\n                this.$Message.error(res.msg)\n              }\n            })\n            .catch((res) => {\n              this.$Message.error(res.msg)\n            })\n        } else {\n          this.$Message.error('请填写正确的核销码')\n        }\n      })\n    },\n\n    // 订单核销\n    ok() {\n      if (!this.writeOffFrom.code) {\n        this.$Message.warning('请先验证订单！')\n      } else {\n        this.writeOffFrom.confirm = 1\n        putWrite(this.writeOffFrom)\n          .then(async (res) => {\n            if (res.status === 200) {\n              this.$Message.success(res.msg)\n              this.modals2 = false\n              this.$refs[name].resetFields()\n              this.$emit('getList')\n            } else {\n              this.$Message.error(res.msg)\n            }\n          })\n          .catch((res) => {\n            this.$Message.error(res.msg)\n          })\n      }\n    },\n\n    del(name) {\n      // this.orderInfo = ''\n      this.modals2 = false\n      this.writeOffFrom.confirm = 0\n      this.$refs[name].resetFields()\n    },\n\n    // 上传头部token\n    getToken() {\n      this.uploadHeaders['Authori-zation'] =\n        'Bearer ' + util.cookies.get('token')\n    },\n\n    // 上传成功\n    uploadSuccess(res, file, fileList) {\n      if (res.status === 200) {\n        this.$Message.success(res.msg)\n        this.file = res.data.src\n        this.fileList = fileList\n      } else {\n        this.$Message.error(res.msg)\n      }\n    },\n\n    //移除文件\n    removeFile(file, fileList) {\n      this.file = ''\n      this.fileList = fileList\n    },\n\n    // 手动批量发货-确定\n    manualModalOk() {\n      this.$refs.upload.clearFiles()\n      handBatchDelivery({ file: this.file })\n        .then((res) => {\n          this.$Message.success(res.msg)\n          this.fileList = []\n        })\n        .catch((err) => {\n          this.$Message.error(err.msg)\n          this.fileList = []\n        })\n    },\n\n    // 手动批量发货-取消\n    manualModalCancel() {\n      this.fileList = []\n      this.$refs.upload.clearFiles()\n    },\n\n    getTabs() {\n      this.spinShow = true\n      this.$store\n        .dispatch('admin/order/getOrderTabs', {\n          status: this.orderStatus,\n          pay_type: this.orderPayType,\n          data: this.orderTime,\n          real_name: this.orderNum,\n          field_key: this.fieldKey,\n          type: this.type_id,\n          plat_type: this.currentTab,\n          store_id: this.store_id,\n          supplier_id: this.supplier_id,\n        })\n        .then((res) => {\n          this.tablists = res.data\n          // this.onChangeChart(this.tablists)\n          this.spinShow = false\n        })\n        .catch((res) => {\n          this.spinShow = false\n          this.$Message.error(res.msg)\n        })\n    },\n\n    //全选\n    selectAll(row) {\n      this.selectArr = row\n    },\n\n    //部分选择\n    onSelectTab(selection) {\n      this.selectArr = selection\n    },\n    onClickTab() {\n      this.onChangeTabs(this.currentTab)\n      if (this.currentTab == 1) {\n        this.getSupplier_id('')\n      }\n      if (this.currentTab == 2) {\n        this.getStore_id('')\n      }\n      this.getList()\n      this.$store.dispatch('admin/order/getOrderTabs', {\n        type: this.currentTab,\n      })\n    },\n    closeDetail() {\n      this.$refs.detailss.modals = false\n    },\n    distribution(row) {\n      this.$refs.distshow.modals = true\n      this.$refs.distshow.formValidate.keywords = ''\n      this.$refs.distshow.getList(row.id)\n    },\n    showUserInfo(row) {\n      this.$refs.userDetails.modals = true\n      this.$refs.userDetails.activeName = 'info'\n      this.$refs.userDetails.getDetails(row.uid)\n    },\n\n    // 操作\n    changeMenu(row, name, num) {\n      this.orderId = row.id\n      this.orderConId = row.pid > 0 ? row.pid : row.id\n      this.orderConNum = num\n      switch (name) {\n        case '1':\n          this.delfromData = {\n            title: '修改立即支付',\n            url: `/order/pay_offline/${row.id}`,\n            method: 'post',\n            ids: '',\n          }\n          this.$modalSure(this.delfromData)\n            .then((res) => {\n              this.$Message.success(res.msg)\n              this.$emit('changeGetTabs')\n              this.getData(row.id, 1)\n              this.getList()\n            })\n            .catch((res) => {\n              this.$Message.error(res.msg)\n            })\n          // this.modalTitleSs = '修改立即支付';\n          break\n        case '2':\n          this.rowActive = row\n          this.getData(row.id)\n          break\n        case '3':\n          this.$refs.record.modals = true\n          this.$refs.record.getList(row.id)\n          break\n        case '4':\n          this.$refs.remarks.formValidate.remark = row.remark\n          this.$refs.remarks.modals = true\n          break\n        case '5':\n          this.getOnlyRefundData(row.id, row.refund_type)\n          break\n        case '55':\n          this.getRefundData(row.id, row.refund_type)\n          break\n        case '6':\n          this.getRefundIntegral(row.id)\n          break\n        case '7':\n          this.getNoRefundData(row.id)\n          break\n        case '8':\n          this.delfromData = {\n            title: '修改确认收货',\n            url: `/order/take/${row.id}`,\n            method: 'put',\n            ids: '',\n          }\n          this.$modalSure(this.delfromData)\n            .then((res) => {\n              this.$Message.success(res.msg)\n              this.$emit('changeGetTabs')\n              this.getList()\n              if (num) {\n                this.$refs.detailss.getSplitOrder(row.pid)\n              } else {\n                this.getData(row.id, 1)\n              }\n            })\n            .catch((res) => {\n              this.$Message.error(res.msg)\n            })\n          // this.modalTitleSs = '修改确认收货';\n          break\n        case '10':\n          this.delfromData = {\n            title: '立即打印订单',\n            info: '您确认打印此订单吗?',\n            url: `/order/print/${row.id}`,\n            method: 'get',\n            ids: '',\n          }\n          this.$modalSure(this.delfromData)\n            .then((res) => {\n              this.$Message.success(res.msg)\n              this.$emit('changeGetTabs')\n              this.getList()\n            })\n            .catch((res) => {\n              this.$Message.error(res.msg)\n            })\n          break\n        case '11':\n          this.delfromData = {\n            title: '立即打印电子面单',\n            info: '您确认打印此电子面单吗?',\n            url: `/order/order_dump/${row.id}`,\n            method: 'get',\n            ids: '',\n          }\n          this.$modalSure(this.delfromData)\n            .then((res) => {\n              this.$Message.success(res.msg)\n              this.getList()\n            })\n            .catch((res) => {\n              this.$Message.error(res.msg)\n            })\n          break\n        case '12':\n          let pathInfo = this.$router.resolve({\n            path: '/admin/supplier/order/distribution',\n            query: {\n              id: row.id,\n              status: 2,\n            },\n          })\n          window.open(pathInfo.href, '_blank')\n          break\n        default:\n          this.delfromData = {\n            title: '删除订单',\n            url: `/order/del/${row.id}`,\n            method: 'DELETE',\n            ids: '',\n          }\n          // this.modalTitleSs = '删除订单';\n          this.delOrder(row, this.delfromData)\n      }\n    },\n\n    // 立即支付 /确认收货//删除单条订单\n    submitModel() {\n      this.getList()\n    },\n    pageChange(index) {\n      this.page.pageNum = index\n      this.getList()\n    },\n    limitChange(limit) {\n      this.page.pageSize = limit\n      this.getList()\n    },\n\n    // 订单列表\n    getList(res) {\n      this.page.pageNum = res === 1 ? 1 : this.page.pageNum\n      this.loading = true\n      orderList({\n        page: this.page.pageNum,\n        limit: this.page.pageSize,\n        status: this.orderStatus,\n        pay_type: this.orderPayType,\n        data: this.orderTime,\n        real_name: this.orderNum,\n        field_key: this.fieldKey,\n        type: this.type_id,\n        plat_type: this.currentTab,\n        store_id: this.store_id,\n        supplier_id: this.supplier_id,\n      })\n        .then(async (res) => {\n          let data = res.data\n          data.data.forEach((item) => {\n            if (item.id == this.orderId) {\n              this.rowActive = item\n            }\n          })\n          // this.orderList = data.data;\n          this.$set(this, 'orderList', data.data)\n          this.orderCards = data.stat\n          this.page.total = data.count\n          this.$emit('on-changeCards', data.stat)\n          this.loading = false\n          this.getTabs()\n        })\n        .catch((res) => {\n          this.loading = false\n          this.$Message.error(res.msg)\n        })\n    },\n\n    // 编辑\n    edit(row) { \n      this.getOrderData(row.id)\n    },\n    splitOrderDetail(row) {\n      this.$router.push({\n        path: 'split_list',\n        query: {\n          id: row.id,\n          orderChartType: this.orderStatus,\n        },\n      })\n    },\n\n    // 删除单条订单\n    delOrder(row, data) {\n      if (row.is_del === 1) {\n        this.$modalSure(data)\n          .then((res) => {\n            this.$Message.success(res.msg)\n            this.getList()\n            this.$refs.detailss.modals = false\n            this.$emit('changeGetTabs')\n          })\n          .catch((res) => {\n            this.$Message.error(res.msg)\n          })\n      } else {\n        const title = '错误！'\n        const content =\n          '<p>您选择的的订单存在用户未删除的订单，无法删除用户未删除的订单！</p>'\n        this.$Modal.error({\n          title: title,\n          content: content,\n        })\n      }\n    },\n\n    // 获取编辑表单数据\n    getOrderData(id) {\n      getOrdeDatas(id)\n        .then(async (res) => {\n          if (res.data.status === false) {\n            return this.$authLapse(res.data)\n          }\n          this.$authLapse(res.data)\n          this.FromData = res.data\n          this.$refs.edits.modals = true\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg)\n        })\n    },\n\n    // 获取详情表单数据\n    getData(id, type) {\n      // this.$refs.detailss.modals = true;\n      getDataInfo(id)\n        .then(async (res) => {\n          if (!type) {\n            this.$refs.detailss.modals = true\n          }\n          this.$refs.detailss.activeName = 'detail'\n          this.orderDatalist = res.data\n          if (this.orderDatalist.orderInfo.refund_reason_wap_img) {\n            try {\n              this.orderDatalist.orderInfo.refund_reason_wap_img = JSON.parse(\n                this.orderDatalist.orderInfo.refund_reason_wap_img\n              )\n            } catch (e) {\n              this.orderDatalist.orderInfo.refund_reason_wap_img = []\n            }\n          }\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg)\n        })\n    },\n\n    // 修改成功\n    submitFail(type) {\n      this.status = 0\n      this.getList()\n      if (this.orderConNum != 1) {\n        this.getData(this.orderId, 1)\n      } else {\n        this.$refs.detailss.getSplitOrder(this.orderConId)\n      }\n      if (type) {\n        this.$emit('changeGetTabs')\n      }\n    },\n\n    // 仅退款\n    getOnlyRefundData(id, refund_type) {\n      this.$modalForm(getRefundFrom(id)).then(() => {\n        this.getList()\n        this.$emit('changeGetTabs')\n        this.$refs.detailss.modals = false\n      })\n    },\n\n    // 退货退款\n    getRefundData(id, refund_type) {\n      this.delfromData = {\n        title: '是否立即退货退款',\n        url: `/refund/agree/${id}`,\n        method: 'get',\n      }\n      this.$modalSure(this.delfromData)\n        .then((res) => {\n          this.$Message.success(res.msg)\n          this.getList()\n          this.$emit('changeGetTabs')\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg)\n        })\n    },\n\n    // 获取退积分表单数据\n    getRefundIntegral(id) {\n      refundIntegral(id)\n        .then(async (res) => {\n          this.FromData = res.data\n          this.$refs.edits.modals = true\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg)\n        })\n    },\n\n    // 不退款表单数据\n    getNoRefundData(id) {\n      this.$modalForm(getnoRefund(id)).then(() => {\n        this.getList()\n        this.$emit('changeGetTabs')\n      })\n    },\n\n    // 发送货\n    sendOrder(row, num) {\n      this.orderConId = row.pid\n      this.orderConNum = num\n      this.$store.commit('admin/order/setSplitOrder', row.total_num)\n      this.$refs.send.modals = true\n      this.orderId = row.id\n      this.status = row._status\n      this.pay_type = row.pay_type\n      this.$refs.send.getList()\n      this.$refs.send.getDeliveryList()\n      this.$nextTick((e) => {\n        this.$refs.send.getCartInfo(row._status, row.id)\n      })\n    },\n\n    // 配送信息表单数据\n    delivery(row, num) {\n      getDistribution(row.id)\n        .then(async (res) => {\n          this.orderConNum = num\n          this.orderConId = row.pid\n          this.FromData = res.data\n          this.$refs.edits.modals = true\n          if (num != 1) {\n            this.getData(this.orderId, 1)\n          }\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg)\n        })\n    },\n\n    // 订单导出\n    change(status) {},\n    async exports(value) {\n      this.exportListOn = this.exportList.findIndex(\n        (item) => item.name === value\n      )\n      let [th, filekey, data, fileName] = [[], [], [], '']\n      //   let fileName = \"\";\n      let excelData = JSON.parse(JSON.stringify(this.where))\n      excelData.page = 1\n      excelData.type = value\n      let ids = []\n      this.selectArr.filter((item) => {\n        ids.push(item.id)\n      })\n      excelData.ids = ids.join(',')\n      for (let i = 0; i < excelData.page + 1; i++) {\n        let lebData = await this.downOrderData(excelData)\n        if (!fileName) fileName = lebData.filename\n        if (!filekey.length) {\n          filekey = lebData.filekey\n        }\n        if (!th.length) th = lebData.header\n        if (lebData.export.length) {\n          data = data.concat(lebData.export)\n          excelData.page++\n        } else {\n          exportExcel(th, filekey, fileName, data)\n          return\n        }\n      }\n    },\n\n    downOrderData(excelData) {\n      return new Promise((resolve, reject) => {\n        storeOrderApi(excelData).then((res) => {\n          return resolve(res.data)\n        })\n      })\n    },\n\n    // 核销订单\n    bindWrite(row) {\n      let self = this\n      this.$Modal.confirm({\n        title: '提示',\n        content: '确定要核销该订单吗？',\n        cancelText: '取消',\n        closable: true,\n        maskClosable: true,\n        onOk: function () {\n          writeUpdate(row.order_id).then((res) => {\n            self.$Message.success(res.msg)\n            self.getList()\n          })\n        },\n        onCancel: () => {},\n      })\n    },\n    onSelectCancel(selection, row) {},\n  },\n}\n",null]}