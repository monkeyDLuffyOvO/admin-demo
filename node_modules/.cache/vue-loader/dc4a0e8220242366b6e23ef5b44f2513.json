{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/statistic/transaction/components/transaction.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/statistic/transaction/components/transaction.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { statisticBottomTradeApi, statisticTrendApi } from '@/api/statistic'\n    import echartsNew from '@/components/echartsNew/index'\n    import { formatDate } from '@/utils/validate';\n    export default {\n        name: \"transaction\",\n        components: {\n            echartsNew\n        },\n        data() {\n            return {\n                grid: {\n                    xl: 8,\n                    lg: 8,\n                    md: 8,\n                    sm: 24,\n                    xs: 24\n                },\n                // options: this.$timeOptions,\n\t\t\t\toptions: {\n\t\t\t\t  shortcuts: [\n\t\t\t\t    {\n\t\t\t\t      text: \"今天\",\n\t\t\t\t      value() {\n\t\t\t\t        const end = new Date();\n\t\t\t\t        const start = new Date();\n\t\t\t\t        start.setTime(\n\t\t\t\t          new Date(\n\t\t\t\t            new Date().getFullYear(),\n\t\t\t\t            new Date().getMonth(),\n\t\t\t\t            new Date().getDate()\n\t\t\t\t          )\n\t\t\t\t        );\n\t\t\t\t        return [start, end];\n\t\t\t\t      },\n\t\t\t\t    },\n\t\t\t\t    {\n\t\t\t\t      text: \"昨天\",\n\t\t\t\t      value() {\n\t\t\t\t        const end = new Date();\n\t\t\t\t        const start = new Date();\n\t\t\t\t        start.setTime(\n\t\t\t\t          start.setTime(\n\t\t\t\t            new Date(\n\t\t\t\t              new Date().getFullYear(),\n\t\t\t\t              new Date().getMonth(),\n\t\t\t\t              new Date().getDate() - 1\n\t\t\t\t            )\n\t\t\t\t          )\n\t\t\t\t        );\n\t\t\t\t        end.setTime(\n\t\t\t\t          end.setTime(\n\t\t\t\t            new Date(\n\t\t\t\t              new Date().getFullYear(),\n\t\t\t\t              new Date().getMonth(),\n\t\t\t\t              new Date().getDate() - 1\n\t\t\t\t            )\n\t\t\t\t          )\n\t\t\t\t        );\n\t\t\t\t        return [start, end];\n\t\t\t\t      },\n\t\t\t\t    },\n\t\t\t\t    {\n\t\t\t\t      text: \"最近7天\",\n\t\t\t\t      value() {\n\t\t\t\t        const end = new Date();\n\t\t\t\t        const start = new Date();\n\t\t\t\t        start.setTime(\n\t\t\t\t          start.setTime(\n\t\t\t\t            new Date(\n\t\t\t\t              new Date().getFullYear(),\n\t\t\t\t              new Date().getMonth(),\n\t\t\t\t              new Date().getDate() - 6\n\t\t\t\t            )\n\t\t\t\t          )\n\t\t\t\t        );\n\t\t\t\t        return [start, end];\n\t\t\t\t      },\n\t\t\t\t    },\n\t\t\t\t    {\n\t\t\t\t      text: \"最近30天\",\n\t\t\t\t      value() {\n\t\t\t\t        const end = new Date();\n\t\t\t\t        const start = new Date();\n\t\t\t\t        start.setTime(\n\t\t\t\t          start.setTime(\n\t\t\t\t            new Date(\n\t\t\t\t              new Date().getFullYear(),\n\t\t\t\t              new Date().getMonth(),\n\t\t\t\t              new Date().getDate() - 29\n\t\t\t\t            )\n\t\t\t\t          )\n\t\t\t\t        );\n\t\t\t\t        return [start, end];\n\t\t\t\t      },\n\t\t\t\t    },\n\t\t\t\t    {\n\t\t\t\t      text: \"本月\",\n\t\t\t\t      value() {\n\t\t\t\t        const end = new Date();\n\t\t\t\t        const start = new Date();\n\t\t\t\t        start.setTime(\n\t\t\t\t          start.setTime(\n\t\t\t\t            new Date(new Date().getFullYear(), new Date().getMonth(), 1)\n\t\t\t\t          )\n\t\t\t\t        );\n\t\t\t\t        return [start, end];\n\t\t\t\t      },\n\t\t\t\t    },\n\t\t\t\t    {\n\t\t\t\t      text: \"本年\",\n\t\t\t\t      value() {\n\t\t\t\t        const end = new Date();\n\t\t\t\t        const start = new Date();\n\t\t\t\t        start.setTime(\n\t\t\t\t          start.setTime(new Date(new Date().getFullYear(), 0, 1))\n\t\t\t\t        );\n\t\t\t\t        return [start, end];\n\t\t\t\t      },\n\t\t\t\t    },\n\t\t\t\t  ],\n\t\t\t\t},\n                name: '近30天',\n                timeVal: [],\n                dataTime: '',\n                list: {},\n                optionData: {},\n                style: { height: '400px' },\n                getExcel:'',\n                spinShow: false\n            }\n        },\n        created() {\n            const end = new Date()\n            const start = new Date()\n            start.setTime(start.setTime(new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate() - 29)));\n            this.timeVal = [start, end]\n            this.dataTime = formatDate(start, 'yyyy/MM/dd')+ '-'+ formatDate(end, 'yyyy/MM/dd');\n        },\n        mounted() {\n            this.getStatistics();\n        },\n        methods: {\n            onSeach(){\n                this.getStatistics();\n            },\n            // 具体日期\n            onchangeTime (e) {\n                this.timeVal = e\n                this.dataTime = this.timeVal.join('-');\n                this.name = this.dataTime;\n            },\n            // 统计\n            getStatistics() {\n                this.spinShow = true;\n                statisticBottomTradeApi({data: this.dataTime}).then(async res => {\n                    const cardLists = res.data;\n                    const incons = ['iconyingyee', 'iconjiaoyijine', 'iconshangpinzhifujine', 'icongoumaihuiyuanjine', 'iconchongzhijianshu', 'iconxianxiashouyinjine','iconzhichujine','iconyuezhifujine','iconzhifuyongjinjine','iconshangpintuikuanjine']\n                    for(var i=0;i< cardLists.series.length;i++){\n                        this.$set(cardLists.series[i], 'icon', incons[i])\n                    }\n                    this.list = cardLists.series;\n                    this.getExcel = cardLists.export;\n                    this.get(cardLists);\n                    this.spinShow = false;\n                }).catch(res => {\n                    this.$Message.error(res.msg);\n                    this.spinShow = false;\n                })\n            },\n            get(extract){\n                let dataList = extract.series.filter(item => {\n                    return item.type === 1\n                })\n                let legend = dataList.map(item => {\n                    return item.name\n                })\n                let col = ['#5B8FF9', '#5AD8A6', '#5D7092', '#F5222D','#FFAB2B','#B37FEB'];\n                let seriesData = []\n                dataList.map((item,index) => {\n                    let series = []\n                    Object.keys(item.value).forEach((key) => {\n                        series.push(Number(item.value[key]))\n                    })\n                    seriesData.push({\n                        name: item.name,\n                        type: 'line',\n                        data:  series,\n                        itemStyle: {\n                            normal: {\n                                color: col[index]\n                            }\n                        },\n                        smooth: true\n                    })\n                })\n                this.optionData = {\n                    tooltip: {\n                        trigger: 'axis',\n                        axisPointer: {\n                            type: 'cross',\n                            label: {\n                                backgroundColor: '#6a7985'\n                            }\n                        }\n                    },\n                    legend: {\n                        x:'center',\n                        data: legend\n                    },\n                    grid: {\n                        left: '3%',\n                        right: '4%',\n                        bottom: '3%',\n                        containLabel: true\n                    },\n                    toolbox: {\n\t\t\t\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\t\t\t\tright: '2%',\n\t\t\t\t\t\t\t\t\t\t\tfeature: {\n\t\t\t\t\t\t\t\t\t\t\t    saveAsImage: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tname: '交易统计_'+formatDate(new Date(Number(new Date().getTime())), 'yyyyMMddhhmmss')\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n                    },\n                    xAxis: {\n                        type: 'category',\n                        boundaryGap: true,\n                        axisLabel: {\n                            interval: 0,\n                            rotate: 40,\n                            textStyle: {\n                                color: '#000000'\n                            }\n                        },\n                        data: extract.x\n                    },\n                    yAxis: {\n                        type: 'value',\n                        axisLine: {\n                            show: false\n                        },\n                        axisTick: {\n                            show: false\n                        },\n                        axisLabel: {\n                            textStyle: {\n                                color: '#7F8B9C'\n                            }\n                        },\n                        splitLine: {\n                            show: true,\n                            lineStyle: {\n                                color: '#F5F7F9'\n                            }\n                        }\n                    },\n                    series: seriesData\n                }\n            },\n            excel(){\n                window.location.href = this.getExcel\n            },\n            // 统计图\n            getTrend() {\n                statisticTrendApi({data: this.dataTime}).then(async res => {\n                    let legend = res.data.series.map(item => {\n                        return item.name\n                    })\n                    let xAxis = res.data.xAxis;\n                    let col = ['#5B8FF9', '#5AD8A6', '#5D7092', '#5D7092'];\n                    let series = []\n                    res.data.series.map((item,index) => {\n                        series.push({\n                            name: item.name,\n                            type: 'line',\n                            data: item.value,\n                            itemStyle: {\n                                normal: {\n                                    color: col[index]\n                                }\n                            }\n                        })\n                    })\n                    this.optionData = {\n                        tooltip: {\n                            trigger: 'axis',\n                            axisPointer: {\n                                type: 'cross',\n                                label: {\n                                    backgroundColor: '#6a7985'\n                                }\n                            }\n                        },\n                        legend: {\n                            x: '1px',\n                            y: '10px',\n                            data: legend\n                        },\n                        grid: {\n                            left: '3%',\n                            right: '4%',\n                            bottom: '3%',\n                            containLabel: true\n                        },\n                        toolbox: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tright: '2%',\n                            feature: {\n                                saveAsImage: {}\n                            }\n                        },\n                        xAxis: {\n                            type: 'category',\n                            boundaryGap: true,\n                            // axisTick:{\n                            //     show:false\n                            // },\n                            // axisLine:{\n                            //     show:false\n                            // },\n                            // splitLine: {\n                            //     show: false\n                            // },\n                            axisLabel: {\n                                interval: 0,\n                                rotate: 40,\n                                textStyle: {\n                                    color: '#000000'\n                                }\n                            },\n                            data: xAxis\n                        },\n                        yAxis: {\n                            type: 'value',\n                            splitLine: {\n                                show: false\n                            },\n                            axisLine: {\n                                show: false\n                            }\n                        },\n                        series: series\n                    }\n                    // this.TrendList =\n                }).catch(res => {\n                    this.$Message.error(res.msg)\n                })\n            },\n        }\n    }\n",null]}