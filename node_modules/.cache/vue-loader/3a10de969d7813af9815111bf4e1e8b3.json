{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/work/channelCode/createCode.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/work/channelCode/createCode.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\";\nimport uploadPictures from \"@/components/uploadPictures\";\nimport department from \"@/components/department/index.vue\";\nimport { getNewFormBuildRuleApi } from \"@/api/setting\";\nimport { workLabel, workChannelCate,saveWorkCode,getWorkCodeInfo,workCodeUpdate } from \"@/api/work\";\nimport { log } from 'util';\nexport default {\n  name: \"\",\n  data() {\n    return {\n      current: 0,\n      formItem: {\n        userList:[],//添加成员\n        name: \"\", //名称\n        cate_id: 0, //分类ID\n        label_id: [], //标签ID\n        type: \"0\", //类型：0=全天在线；1=自动上下线\n        userids: [], //全天在线成员\n        skip_verify: 0, //自动加好友：0=关闭，1=开启\n        add_upper_limit: 0, //员工添加上限0=关闭,1=开启\n        useridLimit:[],//员工\n        reserve_userid:[],//备用成员\n        cycle:[\n          {\n            wokr_time:[],\n            userids:[],\n            workTime:\"\"\n          },\n        ],\n        welcome_type:\"0\",\n        welcome_words:{\n          text:{\n            content: \"\",\n          },\n          attachments:[]\n        },\n        status: 1, //状态：1=开启，0=关闭\n      },\n      weekList:[\n          {value: 1,label: '周一'},\n          {value: 2,label: '周二'},\n          {value: 3,label: '周三'},\n          {value: 4,label: '周四'},\n          {value: 5,label: '周五'},\n          {value: 6,label: '周六'},\n          {value: 0,label: '周日'},\n      ],\n      rontineObj:{\n        msgtype: \"miniprogram\",\n        miniprogram:{\n          pic_url:\"\",\n          pic_media_id:\"\",\n          title:\"\",\n          appid:\"\",\n          page:\"\"\n        }\n      },\n      imageObj:{\n        msgtype: \"image\",\n        image:{\n          media_id:\"\",\n          pic_url:\"\"\n        }\n      },\n      picTit:\"\",\n      ruleValidate: {\n        name: [{ required: true, message: \"名称不能为空\", trigger: \"blur\" }],\n        cate_id:[{ required: true, message: '请选择渠道码分类', trigger: 'change'}],\n        type:[{ required: true, message: '请选择类型', trigger: 'change' }],\n        label_id:[{required: true, message: '请选择客户标签', trigger: 'change', type: 'array'}]\n      },\n      //客户标签列表\n      labelList: [],\n      //渠道码分类列表\n      //备用员工表格\n      reserveUser:[\n        {\n          title: \"员工名称\",\n          slot: \"name\",\n          minWidth: 80,\n          align: \"center\",\n        },\n        {\n          title: \"上限\",\n          slot: \"max\",\n          minWidth: 100,\n          align: \"center\",\n        },\n      ],\n      cycleitemIndex:0,\n      channelCateList: [],\n      modalPic: false,\n      modalRoutine: false,\n      memberStatus: false,\n      isChoice: \"单选\",\n      gridBtn: {\n        xl: 4,\n        lg: 8,\n        md: 8,\n        sm: 8,\n        xs: 8,\n      },\n      gridPic: {\n        xl: 6,\n        lg: 8,\n        md: 12,\n        sm: 12,\n        xs: 12,\n      },\n      treeData: [],\n      frame_id: 0,\n      activeDepartment: {},\n      isSite: true,\n      onlyDepartment: false,\n      openType:'',\n      userList:[],\n      userLimitAll:{},\n      switchStatus:false //监听切换全天在线的状态\n    };\n  },\n  components: { uploadPictures, department },\n  computed: {\n    ...mapState(\"admin/layout\", [\"isMobile\",\"menuCollapse\"]),\n    labelWidth() {\n      return this.isMobile ? undefined : 80;\n    },\n    labelPosition() {\n      return this.isMobile ? \"top\" : \"left\";\n    },\n\n  },\n  created() {\n    if (this.$route.params.id !== \"0\" && this.$route.params.id) {\n      this.getInfo();\n    }\n    this.getWorkLabel();\n    this.getWorkChannelCate();\n  },\n  watch:{\n    'formItem.type'(val,oldVal){\n      if(val !== oldVal){\n        this.formItem.userids = [];\n        // this.formItem.useridLimit = []\n      }\n    },\n    'formItem.useridLimit'(val,oldVal){\n      this.userLimitAll[parseInt(this.formItem.type)] = this.formItem.useridLimit;\n\n    }\n  },\n  methods: {\n    changeType(value){\n      this.formItem.useridLimit  = this.userLimitAll[parseInt(value)] || [];\n    },\n    //获取客户标签\n    getWorkLabel() {\n      workLabel().then((res) => {\n        this.labelList = res.data.map((org) => this.mapTree(org));\n      });\n    },\n    mapTree(org) {\n      const haveChildren =\n        Array.isArray(org.children) && org.children.length > 0;\n      return {\n        //分别将我们查询出来的值做出改变他的key\n        title: org.label,\n        expand: true,\n        value: org.value,\n        selected: false,\n        checked: false,\n        children: haveChildren ? org.children.map((i) => this.mapTree(i)) : [],\n      };\n    },\n    //获取分类列表\n    getWorkChannelCate() {\n      workChannelCate().then((res) => {\n        this.channelCateList = res.data;\n      });\n    },\n    //表格Input\n    setData(e, index, type){\n      e.target.value = e.target.value.replace(/\\D/g,'');\n      this.formItem.useridLimit[index][type] = e.target.value\n    },\n    //确认人员\n    changeMastart(arr,type){\n        if(type == 'one'){\n          this.formItem.useridLimit = arr.map(item=>{\n            return {\n              userid:item.userid,\n              name:item.name,\n              max:100\n            }\n          })\n\n          this.formItem.userList = arr.map(item=>{\n            return {\n              userid:item.userid,\n              name:item.name,\n            }\n          })\n          // this.userLimitAll[parseInt(this.formItem.type)] = this.formItem.useridLimit;\n        }else if(type == 'two'){\n            this.formItem.reserve_userid = arr.map(item=>{\n                return {\n                  userid:item.userid,\n                  name:item.name\n                }\n            })\n        }else if(type == 'three'){\n          for (let i = 0; i < this.formItem.cycle.length; i++) {\n            if(i == this.cycleitemIndex){\n              this.formItem.cycle[i].userids = arr.map(item=>{\n               return {\n                  userid:item.userid,\n                  name:item.name\n               }\n              })\n            }\n          }\n          for(let c = 0;c < arr.length;c++){\n            let userItem = arr[c];\n            this.formItem.useridLimit.push(Object.assign({max:100}, userItem));\n          }\n          let newArr = this.unique( this.formItem.useridLimit,'name')\n          this.$set(this.formItem,'useridLimit',newArr);\n          this.this.userLimitAll[parseInt(this.formItem.type)] = newArr;\n        }\n    },\n    //tag标签删除成员\n    handleDel(e,name){\n        let index = this.formItem.userList.findIndex((j) => j.name == name);\n        this.formItem.userList.splice(index, 1);\n        if(this.formItem.add_upper_limit){\n          let i = this.formItem.useridLimit.findIndex((item) => item.name == name);\n          this.formItem.useridLimit.splice(i,1);\n        }\n    },\n    //备用员工删除\n    handleClose(index){\n        this.formItem.reserve_userid.splice(index, 1);\n    },\n    //周期成员tag删除\n    cycleItemDel(name,index){\n      this.formItem.cycle.forEach((item,i)=>{\n        if(index == i){\n          //点击时传的下标与周期数组的下标匹配\n          //只在对应的周期内操作\n          let index = item.userids.indexOf(name);\n          //周期内的员工列表与点击时传的员工姓名进行匹配，找到就返回下标\n          item.userids.splice(index,1);\n          //删除对应周期内所选员工\n        }\n      })\n      //用传进来的员工姓名匹配员工添加上限表格数组，返回下标\n      let i = this.formItem.useridLimit.findIndex((item) => item.name == name);\n      //在员工添加上限的数组中删除所选的员工\n      this.formItem.useridLimit.splice(i,1);\n    },\n    //欢迎语tag删除\n    wordsDel(name){\n      let index = this.formItem.welcome_words.attachments.indexOf(name);\n      this.formItem.welcome_words.attachments.splice(index,1);\n    },\n    //追加周期成员\n    pushCycle(){\n        this.formItem.cycle.push({\n            wokr_time:[],\n            userids:\"\",\n            workTime:\"\"\n        })\n    },\n    //删除周期成员\n    cycleDel(e,name){\n        let index = this.formItem.cycle.indexOf(name);\n        this.formItem.cycle.splice(index, 1);\n    },\n    //插入客户名称\n    insertName(){\n      this.formItem.welcome_words.text.content = this.formItem.welcome_words.text.content.concat('##客户名称##')\n    },\n    next(name) {\n      if(this.current == 0){\n        this.$refs[name].validate((valid) => {\n          if (valid) {\n              this.current++;\n          }\n        })\n      }else if(this.current == 1){\n        if(this.formItem.type == \"0\" && !this.formItem.userList.length) return this.$Message.error(\"请添加成员\");\n        if(this.formItem.type == \"1\" && !this.formItem.cycle.length) return this.$Message.error(\"请添加成员\");\n        if(!this.formItem.reserve_userid.length) return this.$Message.error(\"备用成员不能为空\");\n        this.current++\n      }\n    },\n    back() {\n      this.current--;\n    },\n    //详情\n    getInfo(){\n      getWorkCodeInfo(this.$route.params.id).then(res=>{\n        this.formItem = res.data;\n        this.formItem.cate_id = this.formItem.cate_id.toString();\n        this.formItem.type = this.formItem.type.toString();\n        this.formItem.welcome_type = this.formItem.welcome_type.toString();\n        let reserveArr = this.userParse(this.formItem.reserve_userid,this.formItem.reserve_user_list,'one');\n        this.formItem.reserve_userid = reserveArr;\n        this.formItem.useridLimit = res.data.useridLimit;\n        this.userLimitAll[parseInt(this.formItem.type)] = res.data.useridLimit;\n        this.formItem.userList = res.data.user_list;\n        if(this.formItem.type == '0'){\n          let personArr = this.userParse(this.formItem.presentUseUserIds,this.formItem.presentUseUserList,'one');\n          this.formItem.userids = personArr;\n          this.formItem.cycle[0] = {\n            userids:[],\n            wokr_time:[],\n            workTime:[],\n          };\n        }else{\n          this.formItem.cycle = this.formItem.cycle.map(item=>{\n            return {\n              channel_id:item.channel_id,\n              wokr_time:item.wokr_time,\n              workTime:[item.start_time,item.end_time],\n              userids:item.userItem\n            }\n          })\n          // let limitArr = [],newArr = [],userInfo;\n          // this.formItem.cycle.forEach(item=>{\n          //   item.userids.forEach(item1=>{\n          //     limitArr.push(item1);\n          //   })\n          // })\n          // this.formItem.useridLimit.forEach(item=>{\n          //   limitArr.forEach(item1=>{\n          //     if(item.userid == item1.userid){\n          //       userInfo = item;\n          //       userInfo.name = item1.name;\n          //       newArr.push(userInfo);\n          //     }\n          //   })\n          // })\n        //  this.formItem.useridLimit = newArr;\n        // this.$set(this.formItem,'useridLimit',newArr);\n        }\n\n      })\n    },\n\n    //提交\n    submit(){\n      if(this.formItem.welcome_type == \"0\" && this.formItem.welcome_words.text.content == \"\") return this.$Message.error('请插入客户名称')\n      // if(this.formItem.welcome_type == \"0\" && !this.formItem.welcome_words.attachments.length) return this.$Message.error('请添加小程序或者图片')\n      const formData = this.deepClone(this.formItem)\n      if(formData.cycle.length){\n        formData.cycle = formData.cycle.map(item=>{\n          return {\n            userids:item.userids.map(item1=>{\n              return item1.userid\n            }),\n            wokr_time:item.wokr_time,\n            start_time:item.workTime[0],\n            end_time:item.workTime[1],\n          }\n        })\n      }\n      if(formData.useridLimit.length){\n        formData.useridLimit =  formData.useridLimit.map(item=>{\n          return {\n            userid:item.userid,\n            max:item.max\n          }\n        })\n      }\n      if(formData.reserve_userid.length){\n        formData.reserve_userid = formData.reserve_userid.map(item=>{\n          return item.userid\n        })\n      }\n      if(formData.userList.length){\n        formData.userids = formData.userList.map(item=>{\n          return item.userid\n        })\n      }\n      formData.type = Number(formData.type);\n      formData.welcome_type = Number(formData.welcome_type);\n      if (this.$route.params.id !== \"0\" && this.$route.params.id) {\n        workCodeUpdate(this.$route.params.id,formData).then(res=>{\n          this.$Message.success(\"修改成功\");\n          this.$router.push('/admin/work/channel_code')\n        }).catch(err=>{\n          this.$Message.error(err.msg)\n          this.loading = false;\n        })\n      } else if (!this.$route.params.id){\n        saveWorkCode(formData).then(res=>{\n          this.$Message.success(\"渠道码新建成功\");\n          this.$router.push('/admin/work/channel_code')\n        }).catch(err=>{\n          this.$Message.error(err.msg)\n        })\n      }\n    },\n    //添加小程序\n    addRoutine() {\n      getNewFormBuildRuleApi('routine').then(res => {\n          let data = res.data;\n          this.rontineObj.miniprogram.pic_url = '';\n          this.rontineObj.miniprogram.title = data.routine_name.value;\n          this.rontineObj.miniprogram.appid = data.routine_appId.value;\n          this.rontineObj.miniprogram.page = '/pages/index/index';\n      })\n      this.modalRoutine = true;\n    },\n    //添加图片\n    modalPicTap(picTit){\n      this.modalPic = true;\n      this.picTit = picTit;\n    },\n    // 选中图片\n    getPic(pc) {\n      switch (this.picTit) {\n        case \"image\":\n          this.imageObj.image.pic_url = pc.att_dir;\n          this.formItem.welcome_words.attachments.push(this.imageObj)\n          break;\n        case \"routine\":\n          this.rontineObj.miniprogram.pic_url = pc.att_dir;\n          break;\n      }\n\n      this.modalPic = false;\n    },\n    //小程序添加模态框确认操作\n    routineConfirm() {\n      const routine = this.deepClone(this.rontineObj);\n      this.formItem.welcome_words.attachments.push(routine)\n    },\n    addUser(type,index) {\n        this.$refs.department.memberStatus = true;\n        switch (type) {\n            case 'one':\n              this.userList = this.formItem.userList;\n                this.$refs.department.openType = 'one';\n                break;\n            case 'two':\n              this.userList = this.formItem.reserve_userid;\n                this.$refs.department.openType = 'two';\n                break;\n            case 'three':\n                this.cycleitemIndex = index;\n                if(this.formItem.cycle[index].userids.length){\n                  this.userList = this.formItem.cycle[index].userids;\n                }\n                this.$refs.department.openType = 'three';\n                break;\n            default:\n                break;\n        }\n    },\n    //数组去重\n    unique(arr,u_key) {\n      let map = new Map()\n      arr.forEach((item,index)=>{\n        if (!map.has(item[u_key])){\n          map.set(item[u_key],item)\n        }\n      })\n      return [...map.values()]\n    },\n    //深克隆\n    deepClone(obj) {\n        let newObj = Array.isArray(obj) ? [] : {}\n        if (obj && typeof obj === \"object\") {\n            for (let key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    newObj[key] = (obj && typeof obj[key] === 'object') ? this.deepClone(obj[key]) : obj[key];\n                }\n            }\n        }\n        return newObj\n    },\n    userParse(arr1,arr2,type){\n      let userArr = [],userObj = {};\n      if(type == 'one'){\n        userArr = arr1.map(item=>{\n         return { userid:item}\n        })\n        arr2.forEach((item1,index1)=>{\n          userArr[index1].name = item1;\n        })\n        return userArr\n      }else{\n        userArr = arr1.map(item=>{\n         return {\n           userid:item.userid,\n           channel_id:item.channel_id,\n           max:item.max\n         }\n        })\n        arr2.forEach((item1,index1)=>{\n          userArr[index1].name = item1;\n        })\n        return userArr\n      }\n    },\n  },\n};\n",null]}