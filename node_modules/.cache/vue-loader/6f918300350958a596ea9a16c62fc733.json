{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/components/uploadPictures/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/components/uploadPictures/index.vue","mtime":1663723634000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getCategoryListApi,\n  createApi,\n  fileListApi,\n  categoryEditApi,\n  moveApi,\n  fileUpdateApi,\n} from \"@/api/uploadPictures\";\nimport Setting from \"@/setting\";\n// import { getCookies } from \"@/libs/util\";\nimport util from \"@/libs/util\";\nimport uploadVideo from \"@/components/uploadVideos\";\nexport default {\n  name: \"uploadPictures\",\n  components: { uploadVideo },\n  props: {\n    isChoice: {\n      type: String,\n      default: \"\",\n    },\n    gridBtn: {\n      type: Object,\n      default: null,\n    },\n    gridPic: {\n      type: Object,\n      default: null,\n    },\n    isShow: {\n      type: Number,\n      default: 1,\n    },\n  },\n  data() {\n    return {\n      searchClass: false,\n      spinShow: false,\n      fileUrl: Setting.apiBaseURL + \"/file/upload\",\n      modalPic: false,\n      treeData: [],\n      treeData2: [],\n      pictrueList: [],\n      uploadData: {}, // 上传参数\n      checkPicList: [],\n      uploadName: {\n        name: \"\",\n        file_type:'1'\n      },\n      FromData: null,\n      treeId: 0,\n      isJudge: false,\n      buttonProps: {\n        type: \"default\",\n        size: \"small\",\n      },\n      fileData: {\n        pid: 0,\n        page: 1,\n        limit: 18,\n      },\n      total: 0,\n      pids: 0,\n      list: [],\n      modalTitleSs: \"\",\n      isShowPic: false,\n      header: {},\n      ids: [], // 选中附件的id集合\n      viewImg:\"\",\n      openImgShow:false,\n      headTab:[\n        { title: \"图片\", name: \"1\" },\n        { title: \"视频\", name: \"2\" }\n      ],\n      modalVideo: false\n    };\n  },\n  mounted() {\n    this.getToken();\n    this.getList();\n    this.getFileList();\n  },\n  methods: {\n    uploadVideo(){\n      this.modalVideo = true;\n    },\n    getvideo(){\n      this.modalVideo = false;\n      this.fileData.page = 1;\n      this.getFileList();\n    },\n    onhangeTab(){\n      this.treeId = 0;\n      this.getList();\n      this.getFileList();\n      this.checkPicList = [];\n    },\n    enterMouse(item) {\n      item.realName = !item.realName;\n    },\n    enterLeave(item) {\n      item.isShowEdit = !item.isShowEdit;\n    },\n    // 上传头部token\n    getToken() {\n      this.header[\"Authori-zation\"] = \"Bearer \" + util.cookies.get(\"token\");\n    },\n    // 树状图\n    renderContent(h, { root, node, data }) {\n      let operate = [];\n      if (data.pid == 0) {\n        operate.push(\n          h(\n            \"div\",\n            {\n              class: [\"ivu-dropdown-item\"],\n              on: {\n                click: () => {\n                  this.append(root, node, data);\n                },\n              },\n            },\n            \"添加分类\"\n          )\n        );\n      }\n      if (data.id) {\n        operate.push(\n          h(\n            \"div\",\n            {\n              class: [\"ivu-dropdown-item\"],\n              on: {\n                click: () => {\n                  this.editPic(root, node, data);\n                },\n              },\n            },\n            \"编辑分类\"\n          ),\n          h(\n            \"div\",\n            {\n              class: [\"ivu-dropdown-item\"],\n              on: {\n                click: () => {\n                  this.remove(root, node, data, \"分类\");\n                },\n              },\n            },\n            \"删除分类\"\n          )\n        );\n      }\n      return h(\n        \"span\",\n        {\n          class: [\"ivu-span\"],\n          style: {\n            display: \"inline-block\",\n            width: \"88%\",\n            height: \"32px\",\n            lineHeight: \"32px\",\n            position: \"relative\",\n            color: \"rgba(0,0,0,0.6)\",\n            cursor: \"pointer\",\n          },\n          on: {\n            mouseenter: () => {\n              this.onMouseOver(root, node, data);\n            },\n            mouseleave: () => {\n              this.onMouseOver(root, node, data);\n            },\n            click: (e) => {\n              this.checkPicList =[]\n              this.appendBtn(root, node, data, e);\n            },\n          },\n        },\n        [\n          h(\n            \"span\",\n            {\n              style:{display:\"block\"},\n              // on: {\n              //   click: (e) => {\n              //     this.checkPicList =[]\n              //     this.appendBtn(root, node, data, e);\n              //   },\n              // },\n            },\n            data.title\n          ),\n          h(\n            \"div\",\n            {\n              style: {\n                display: \"inline-block\",\n                float: \"right\",\n              },\n            },\n            [\n              h(\"Icon\", {\n                props: {\n                  type: \"ios-more\",\n                },\n                style: {\n                  marginRight: \"8px\",\n                  fontSize: \"20px\",\n                  display: data.flag ? \"inline\" : \"none\",\n                },\n                on: {\n                  click: () => {\n                    \n                    this.onClick(root, node, data);\n                  },\n                },\n              }),\n              h(\n                \"div\",\n                {\n                  class: [\"right-menu ivu-poptip-inner\"],\n                  style: {\n                    width: \"80px\",\n                    position: \"absolute\",\n                    zIndex: \"9\",\n                    top: \"32px\",\n                    right: \"0\",\n                    display: data.flag2 ? \"block\" : \"none\",\n                  },\n                },\n                operate\n              ),\n            ]\n          ),\n        ]\n      );\n    },\n\n    renderContentSel(h, { root, node, data }) {\n      return h(\n        \"div\",\n        {\n          style: {\n            display: \"inline-block\",\n            width: \"90%\",\n          },\n        },\n        [\n          h(\n            \"span\", [\n            h(\n              \"span\",\n              {\n                style: {\n                  cursor: \"pointer\",\n                },\n                class: [\"ivu-tree-title\"],\n                on: {\n                  click: (e) => {\n                    this.handleCheckChange(root, node, data, e);\n                  },\n                },\n              },\n              data.title\n            ),\n          ]),\n        ]\n      );\n    },\n    // 下拉树\n    handleCheckChange(root, node, data, e) {\n      this.list = [];\n      // this.pids = 0;\n      let value = data.id;\n      let title = data.title;\n      this.list.push({\n        value,\n        title,\n      });\n      if (this.ids.length) {\n        this.pids = value;\n        this.getMove();\n      } else {\n        this.$Message.warning(\"请先选择图片\");\n      }\n      let selected = this.$refs.reference.$el.querySelectorAll(\n        \".ivu-tree-title-selected\"\n      );\n      for (let i = 0; i < selected.length; i++) {\n        selected[i].className = \"ivu-tree-title\";\n      }\n      e.path[0].className = \"ivu-tree-title\"; // 当前点击的元素\n    },\n    // 移动分类\n    getMove() {\n      let data = {\n        pid: this.pids,\n        images: this.ids.toString(),\n      };\n      moveApi(data)\n        .then(async (res) => {\n          this.$Message.success(res.msg);\n          this.getFileList();\n          this.pids = 0;\n          this.checkPicList = [];\n          this.ids = [];\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    // 删除图片\n    editPicList(tit) {\n      let ids = {\n        ids: this.ids.toString(),\n      };\n      if(typeof(tit) == 'number') {\n        ids = {\n          ids: tit.toString(),\n        };\n      }\n      let delfromData = {\n        title: this.uploadName.file_type==1?\"删除选中图片\":\"删除选中视频\",\n        url: `file/file/delete`,\n        method: \"POST\",\n        ids: ids,\n      };\n      this.$modalSure(delfromData)\n        .then((res) => {\n          this.$Message.success(res.msg);\n          this.getFileList();\n          this.checkPicList = [];\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    // 鼠标移入 移出\n    onMouseOver(root, node, data) {\n      event.preventDefault();\n      data.flag = !data.flag;\n      if (data.flag2) {\n        data.flag2 = false;\n      }\n    },\n    onClick(root, node, data) {\n      data.flag2 = !data.flag2;\n    },\n    // 点击树\n    appendBtn(root, node, data, e) {\n      this.treeId = data.id?data.id:0;\n      this.fileData.page = 1;\n      this.getFileList();\n      let selected = this.$refs.tree.$el.querySelectorAll(\n        \".ivu-tree-title-selected\"\n      );\n      for (let i = 0; i < selected.length; i++) {\n        selected[i].className = \"ivu-tree-title\";\n      }\n      e.path[0].className = \"ivu-tree-title\"; // 当前点击的元素\n    },\n    // 点击添加\n    append(root, node, data) {\n      this.treeId = data.id;\n      this.getFrom();\n    },\n    // 删除分类\n    remove(root, node, data, tit) {\n      this.tits = tit;\n      let delfromData = {\n        title: \"删除 [ \" + data.title + \" ] \" + \"分类\",\n        url: `file/category/${data.id}`,\n        method: \"DELETE\",\n        ids: \"\",\n      };\n      this.$modalSure(delfromData)\n        .then((res) => {\n          this.$Message.success(res.msg);\n          this.getList();\n          this.checkPicList = [];\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    // 确认删除树\n    // submitModel () {\n    //     if (this.tits === '图片') {\n    //         this.getFileList();\n    //         this.checkPicList = [];\n    //     } else {\n    //         this.getList();\n    //         this.checkPicList = [];\n    //     }\n    // },\n    // 编辑树表单\n    editPic(root, node, data) {\n      this.$modalForm(categoryEditApi(data.id,{file_type:this.uploadName.file_type})).then(() => this.getList());\n    },\n    // 搜索分类\n    changePage() {\n      this.getList(\"search\");\n    },\n    // 分类列表树\n    getList(type) {\n      let data = {\n        title: this.uploadName.file_type==1?\"全部图片\":\"全部视频\",\n        id: \"\",\n        pid: 0,\n        selected: true\n      };\n      getCategoryListApi(this.uploadName)\n        .then(async (res) => {\n          this.treeData = res.data.list;\n          this.treeData.unshift(data);\n          if (type !== \"search\") {\n            this.treeData2 = [...this.treeData];\n          } else {\n            this.searchClass = true;\n          }\n          this.addFlag(this.treeData);\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    loadData(item, callback) {\n      getCategoryListApi({\n        pid: item.id,\n        file_type: this.uploadName.file_type\n      })\n        .then(async (res) => {\n          const data = res.data.list;\n          callback(data);\n        })\n        .catch((res) => {});\n    },\n    addFlag(treedata) {\n      treedata.map((item) => {\n        this.$set(item, \"flag\", false);\n        this.$set(item, \"flag2\", false);\n        item.children && this.addFlag(item.children);\n      });\n    },\n    // 新建分类\n    add() {\n      this.treeId = 0;\n      this.getFrom();\n    },\n    // 文件列表\n    getFileList() {\n      this.fileData.pid = this.treeId;\n      this.fileData.file_type = this.uploadName.file_type;\n      fileListApi(this.fileData)\n        .then(async (res) => {\n          res.data.list.forEach((el) => {\n            el.isSelect = false;\n            el.isEdit = false;\n            el.isShowEdit = false;\n            el.realName = false;\n            el.num = 0;\n            this.editName(el);\n          });\n          this.pictrueList = res.data.list;\n\n          if (this.pictrueList.length) {\n            this.isShowPic = false;\n          } else {\n            this.isShowPic = true;\n          }\n          this.total = res.data.count;\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    pageChange(index) {\n      this.fileData.page = index;\n      this.getFileList();\n      this.checkPicList = [];\n    },\n    // 新建分类表单\n    getFrom() {\n      this.$modalForm(createApi({ id: this.treeId, file_type: this.uploadName.file_type })).then((res) => {\n        this.getList();\n      });\n    },\n    // 上传之前\n    beforeUpload(res) {\n      //控制文件上传格式\n      let imgTypeArr = [\"image/png\", \"image/jpg\", \"image/jpeg\",\"image/gif\"];\n      let imgType = imgTypeArr.indexOf(res.type) !== -1\n      if (!imgType) {\n        this.$Message.warning({\n          content:  '文件  ' + res.name + '  格式不正确, 请选择格式正确的图片',\n          duration: 5\n        });\n        return false\n      }\n      // 控制文件上传大小\n      let imgSize = this.$cache.local.getJSON('file_size_max');\n      let Maxsize = res.size  < imgSize;\n      let fileMax = imgSize/ 1024 / 1024;\n      if (!Maxsize) {\n        this.$Message.warning({\n          content: '文件体积过大,图片大小不能超过' + fileMax + 'M',\n          duration: 5\n        });\n        return false\n      }\n      this.uploadData = {\n        pid: this.treeId,\n      };\n      let promise = new Promise((resolve) => {\n        this.$nextTick(function () {\n          resolve(true);\n        });\n      });\n      return promise;\n    },\n    // 上传成功\n    handleSuccess(res, file, fileList) {\n      if (res.status === 200) {\n        this.fileData.page = 1;\n        this.$Message.success(res.msg);\n        this.getFileList();\n      } else {\n        this.$Message.error(res.msg);\n      }\n    },\n    // 关闭\n    cancel() {\n      this.$emit(\"changeCancel\");\n    },\n    // 选中图片\n    changImage(item, index, row) {\n      let activeIndex = 0;\n      // 如果是单选且选择了图片\n\t\t\tif(this.isChoice === \"单选\" && this.checkPicList.length>=1) {\n        // 如果选择的图片是列表的第一张图片\n\t\t\t\tif(this.checkPicList[0].att_id == item.att_id){\n          // 取消勾选\n          item.isSelect = false;\n          // 遍历图片列表使角标为0\n\t\t\t\t\tthis.pictrueList.forEach(j=>{\n\t\t\t\t\t\tif(j.att_id == this.checkPicList[0].att_id){\n\t\t\t\t\t\t\tj.num = 0;\n\t\t\t\t\t\t}\n          })\n          // 重置已选中数组\n\t\t\t\t\tthis.checkPicList = [];\n\t\t\t\t}else {\n          // 将选中的第一张图片角标为0\n          this.checkPicList[0].num = 0;\n          // 取消勾选\n          this.checkPicList[0].isSelect = false;\n          // 将这张图片删除\n          this.checkPicList.splice(0,1);\n          // 添加下一张选中的图片\n          this.checkPicList.push(item)\n          // 勾选\n          item.isSelect = true;\n          // 显示角标为1\n          item.num = 1\n        }\n\t\t\t\treturn\n\t\t\t}\n      if (!item.isSelect) {\n        item.isSelect = true;\n        this.checkPicList.push(item);\n      } else {\n        item.isSelect = false;\n        this.checkPicList.map((el, index) => {\n          if (el.att_id == item.att_id) {\n            activeIndex = index;\n          }\n        });\n        this.checkPicList.splice(activeIndex, 1);\n      }\n      this.ids = [];\n      this.checkPicList.map((item, i) => {\n        this.ids.push(item.att_id);\n      });\n      this.pictrueList.map((el, i) => {\n        if (el.isSelect) {\n          this.checkPicList.filter((el2, j) => {\n            if (el.att_id == el2.att_id) {\n              el.num = j + 1;\n            }\n          });\n        } else {\n          el.num = 0;\n        }\n      });\n    },\n    // 点击使用选中图片\n    checkPics() {\n      if (this.isChoice === \"单选\") {\n        if (this.checkPicList.length > 1)\n          return this.$Message.warning(\"最多只能选一张图片\");\n        this.$emit(\"getPic\", this.checkPicList[0]);\n      } else {\n        let maxLength = this.$route.query.maxLength;\n        if (\n          maxLength != undefined &&\n          this.checkPicList.length > Number(maxLength)\n        )\n          return this.$Message.warning(\"最多只能选\" + maxLength + \"张图片\");\n        this.$emit(\"getPicD\", this.checkPicList);\n      }\n    },\n    editName(item) {\n      let it = item.real_name.split(\".\");\n      let it1 = it[1] == undefined ? [] : it[1];\n      let len = it[0].length + it1.length;\n      item.editName = item.real_name;\n      // item.editName =\n      //         len < 10\n      //                 ? item.real_name\n      //                 : item.real_name.substr(0, 2) + \"...\" + item.real_name.substr(-5, 5);\n    },\n    // 修改图片文字上传\n    bindTxt(item) {\n      if (item.real_name == \"\") {\n        this.$Message.error(\"请填写内容\");\n      }\n      fileUpdateApi(item.att_id, {\n        real_name: item.real_name,\n      })\n        .then((res) => {\n          this.editName(item);\n          item.isEdit = false;\n          this.$Message.success(res.msg);\n        })\n        .catch((error) => {\n          this.$Message.error(error.msg);\n        });\n    },\n    //大图预览\n    openView(item){\n      if(this.openImgShow){\n        this.viewImg = \"\";\n        this.$set(this,'viewImg',item.satt_dir);\n        this.openImgShow = false;\n      }else{\n        this.viewImg = \"\";\n        this.$set(this,'viewImg',item.satt_dir);\n        this.openImgShow = true;\n      }\n      \n      \n    }\n  },\n};\n",null]}