{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/marketing/storeIntegral/addStoreIntegral.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/marketing/storeIntegral/addStoreIntegral.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { mapState } from \"vuex\";\nimport goodsList from \"@/components/goodsList/index\";\nimport UeditorWrap from \"@/components/ueditorFrom/index\";\nimport VueUeditorWrap from \"vue-ueditor-wrap\";\nimport uploadPictures from \"@/components/uploadPictures\";\nimport {\n  integralAddBatch,\n  productAttrsApi,\n  integralInfoApi,\n} from \"@/api/marketing\";\n\nexport default {\n  name: \"storeIntegralCreate\",\n  components: { UeditorWrap, goodsList, uploadPictures, VueUeditorWrap },\n  data() {\n    return {\n      loading: false,\n      goodsImg: [],\n      productsId: [],\n      submitOpen: false,\n      spinShow: false,\n      isChoice: \"\",\n      current: 0,\n      modalPic: false,\n      grid: {\n        xl: 12,\n        lg: 20,\n        md: 24,\n        sm: 24,\n        xs: 24,\n      },\n      grid2: {\n        xl: 8,\n        lg: 12,\n        md: 12,\n        sm: 24,\n        xs: 24,\n      },\n      gridPic: {\n        xl: 6,\n        lg: 8,\n        md: 12,\n        sm: 12,\n        xs: 12,\n      },\n      gridBtn: {\n        xl: 4,\n        lg: 8,\n        md: 8,\n        sm: 8,\n        xs: 8,\n      },\n      myConfig: {\n        autoHeightEnabled: false, // 编辑器不自动被内容撑高\n        initialFrameHeight: 500, // 初始容器高度\n        initialFrameWidth: \"100%\", // 初始容器宽度\n        UEDITOR_HOME_URL: \"/admin/UEditor/\",\n        serverUrl: \"\",\n      },\n      modals: false,\n      modal_loading: false,\n      images: [],\n      formValidate: {\n        is_show: 0,\n        attrs: [],\n      },\n      templateList: [],\n      timeList: [],\n      columns: [],\n      specsData: [],\n      picTit: \"\",\n      tableIndex: 0,\n      ruleValidate: {\n        price: [\n          {\n            required: true,\n            type: \"number\",\n            message: \"请输入兑换积分\",\n            trigger: \"blur\",\n          },\n        ],\n\n        num: [\n          {\n            required: true,\n            type: \"number\",\n            message: \"请输入购买数量限制\",\n            trigger: \"blur\",\n          },\n        ],\n        once_num: [\n          {\n            required: true,\n            type: \"number\",\n            message: \"请输入单次购买数量限制\",\n            trigger: \"blur\",\n          },\n        ],\n      },\n      copy: 0,\n    };\n  },\n  computed: {\n    ...mapState(\"admin/layout\", [\"isMobile\"]),\n    labelWidth() {\n      return this.isMobile ? undefined : 135;\n    },\n    labelPosition() {\n      return this.isMobile ? \"top\" : \"right\";\n    },\n  },\n  mounted() {\n    if (this.$route.params.id) {\n      this.copy = this.$route.params.copy;\n      this.current = 1;\n      this.getInfo();\n    }\n  },\n  methods: {\n    // 规格；\n    productAttrs(rows) {\n      this.loading = true;\n      return new Promise((resolve, reject) => {\n        let that = this;\n        productAttrsApi(rows.product_id, 4)\n          .then((res) => {\n            let data = res.data.info;\n            let selection = {\n              type: \"selection\",\n              width: 60,\n              align: \"center\",\n            };\n            that.specsData = that.specsData.concat(data.attrs);\n            that.specsData.forEach(function (item, index) {\n              that.$set(that.specsData[index], \"id\", index);\n            });\n            that.columns = data.header;\n            that.columns.unshift(selection);\n            that.inputChange(data);\n            resolve();\n            this.loading = false;\n          })\n          .catch((res) => {\n            this.loading = false;\n\n            reject();\n            that.$Message.error(res.msg);\n          });\n      });\n    },\n    inputChange(data) {\n      let that = this;\n      let $index = [];\n      data.header.forEach(function (item, index) {\n        if (item.type === 1) {\n          $index.push({ index: index, key: item.key, title: item.title });\n        }\n      });\n      $index.forEach(function (item, index) {\n        let title = item.title;\n        let key = item.key;\n        let row = {\n          title: title,\n          key: key,\n          align: \"center\",\n          minWidth: 120,\n          render: (h, params) => {\n            return h(\"div\", [\n              h(\"InputNumber\", {\n                props: {\n                  min: 0,\n                  precision: 0,\n                  value: key === \"price\" ? params.row.price : params.row.quota,\n                },\n                on: {\n                  \"on-change\": (e) => {\n                    key === \"price\"\n                      ? (params.row.price = e)\n                      : (params.row.quota = e);\n                    that.specsData[params.index] = params.row;\n                    if (\n                      !!that.formValidate.attrs &&\n                      that.formValidate.attrs.length\n                    ) {\n                      that.formValidate.attrs.forEach((v, index) => {\n                        if (v.id === params.row.id) {\n                          that.formValidate.attrs.splice(index, 1, params.row);\n                        }\n                      });\n                    }\n                  },\n                },\n              }),\n            ]);\n          },\n        };\n        that.columns.splice(item.index, 1, row);\n      });\n    },\n    // 多选\n    changeCheckbox(selection) {\n      this.formValidate.attrs = selection;\n    },\n    // 商品id\n    async getProductId(row) {\n      for (let i = 0; i < this.goodsImg.length; i++) {\n        const element = this.goodsImg[i];\n        if (element.product_id === row.product_id) {\n          this.$Message.error(\"该商品已经添加\");\n          return;\n        }\n      }\n      this.modal_loading = false;\n      this.modals = false;\n      this.goodsImg = this.goodsImg.concat(row);\n      // this.goodsImg.push({\n      //   image: row.image,\n      //   id: row.id,\n      // });\n      for (let j = 0; j < row.length; j++) {\n        const element = row[j];\n        await this.productAttrs(element);\n      }\n    },\n\n    cancel() {\n      this.modals = false;\n    },\n    // 具体日期\n    onchangeTime(e) {\n      this.formValidate.section_time = e;\n    },\n    // 详情\n    getInfo() {\n      this.spinShow = true;\n      integralInfoApi(this.$route.params.id)\n        .then(async (res) => {\n          let that = this;\n          let info = res.data.info;\n          let selection = {\n            type: \"selection\",\n            width: 60,\n            align: \"center\",\n          };\n          this.formValidate = info;\n          this.columns = info.attrs.header;\n          this.columns.unshift(selection);\n          this.specsData = info.attrs.value;\n          that.specsData.forEach(function (item, index) {\n            that.$set(that.specsData[index], \"id\", index);\n          });\n          let data = info.attrs;\n          let attr = [];\n          for (let index in info.attrs.value) {\n            if (info.attrs.value[index]._checked) {\n              attr.push(info.attrs.value[index]);\n            }\n          }\n          that.formValidate.attrs = attr;\n          that.inputChange(data);\n          this.spinShow = false;\n        })\n        .catch((res) => {\n          this.spinShow = false;\n          this.$Message.error(res.msg);\n        });\n    },\n    bindDelete(index) {\n      let delId = this.goodsImg[index].product_id;\n      this.goodsImg.splice(index, 1);\n      this.loading = true;\n      // 删除逻辑待完善\n    },\n    // 下一步\n    next(name) {\n      let that = this;\n      if (!this.formValidate.attrs.length) {\n        return that.$Message.error(\"请先选择商品规格\");\n      }\n      for (let index in that.formValidate.attrs) {\n        if (that.formValidate.attrs[index].quota <= 0) {\n          return that.$Message.error(\"商品限量必须大于0\");\n        }\n      }\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          if (this.copy == 1) this.formValidate.copy = 1;\n          this.formValidate.id = Number(this.$route.params.id) || 0;\n          this.submitOpen = true;\n          integralAddBatch(this.formValidate)\n            .then(async (res) => {\n              this.submitOpen = false;\n              this.$Message.success(res.msg);\n              setTimeout(() => {\n                this.$router.push({\n                  path: \"/admin/marketing/store_integral/index\",\n                });\n              }, 500);\n            })\n            .catch((res) => {\n              this.submitOpen = false;\n              this.$Message.error(res.msg);\n            });\n        } else {\n          return false;\n        }\n      });\n    },\n    // 上一步\n    step() {\n      this.current--;\n    },\n    // 内容\n    getContent(val) {\n      this.formValidate.description = val;\n    },\n    // 点击商品图\n    modalPicTap(tit, picTit, index) {\n      this.modalPic = true;\n      this.isChoice = tit === \"dan\" ? \"单选\" : \"多选\";\n      this.picTit = picTit;\n      this.tableIndex = index;\n    },\n    // 获取单张图片信息\n    getPic(pc) {\n      switch (this.picTit) {\n        case \"danFrom\":\n          this.formValidate.image = pc.att_dir;\n          break;\n        // case 'danTable':\n        //     this.specsData[this.tableIndex].pic = pc.att_dir;\n        //     break;\n        default:\n          if (!!this.formValidate.attrs && this.formValidate.attrs.length) {\n            this.$set(this.specsData[this.tableIndex], \"_checked\", true);\n          }\n          this.specsData[this.tableIndex].pic = pc.att_dir;\n      }\n      this.modalPic = false;\n    },\n    // 获取多张图信息\n    getPicD(pc) {\n      this.images = pc;\n      this.images.map((item) => {\n        this.formValidate.images.push(item.att_dir);\n        this.formValidate.images = this.formValidate.images.splice(0, 10);\n      });\n      this.modalPic = false;\n    },\n    handleRemove(i) {\n      this.images.splice(i, 1);\n      this.formValidate.images.splice(i, 1);\n    },\n    // 选择商品\n    changeGoods() {\n      this.modals = true;\n    }, // 移动\n    handleDragStart(e, item) {\n      this.dragging = item;\n    },\n    handleDragEnd(e, item) {\n      this.dragging = null;\n    },\n    // 首先把div变成可以放置的元素，即重写dragenter/dragover\n    handleDragOver(e) {\n      e.dataTransfer.dropEffect = \"move\"; // e.dataTransfer.dropEffect=\"move\";//在dragenter中针对放置目标来设置!\n    },\n    handleDragEnter(e, item) {\n      e.dataTransfer.effectAllowed = \"move\"; // 为需要移动的元素设置dragstart事件\n      if (item === this.dragging) {\n        return;\n      }\n      const newItems = [...this.formValidate.images];\n      const src = newItems.indexOf(this.dragging);\n      const dst = newItems.indexOf(item);\n      newItems.splice(dst, 0, ...newItems.splice(src, 1));\n      this.formValidate.images = newItems;\n    },\n    // 添加自定义弹窗\n    addCustomDialog(editorId) {\n      window.UE.registerUI(\n        \"test-dialog\",\n        function (editor, uiName) {\n          // 创建 dialog\n          let dialog = new window.UE.ui.Dialog({\n            // 指定弹出层中页面的路径，这里只能支持页面，路径参考常见问题 2\n            iframeUrl: \"/admin/widget.images/index.html?fodder=dialog\",\n            // 需要指定当前的编辑器实例\n            editor: editor,\n            // 指定 dialog 的名字\n            name: uiName,\n            // dialog 的标题\n            title: \"上传图片\",\n            // 指定 dialog 的外围样式\n            cssRules: \"width:1200px;height:500px;padding:20px;\",\n          });\n          this.dialog = dialog;\n          // 参考上面的自定义按钮\n          var btn = new window.UE.ui.Button({\n            name: \"dialog-button\",\n            title: \"上传图片\",\n            cssRules: `background-image: url(../../../assets/images/icons.png);background-position: -726px -77px;`,\n            onclick: function () {\n              // 渲染dialog\n              dialog.render();\n              dialog.open();\n            },\n          });\n          return btn;\n        },\n        37 /* 指定添加到工具栏上的那个位置，默认时追加到最后 */,\n        editorId /* 指定这个UI是哪个编辑器实例上的，默认是页面上所有的编辑器都会添加这个按钮 */\n      );\n    },\n  },\n};\n",null]}