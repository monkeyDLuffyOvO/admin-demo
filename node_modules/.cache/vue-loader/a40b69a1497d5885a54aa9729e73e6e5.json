{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/kefu/mobile/orderList/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/kefu/mobile/orderList/index.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import PriceChange from \"../../components/PriceChange\";\n    import Loading from \"../../components/Loading\";\n    import { getorderList, orderVerificApi } from '@/api/kefu';\n\timport { erpConfig } from \"@/api/erp\";\n    import { required, num } from \"@/utils/validate\";\n    import { validatorDefaultCatch } from \"@/libs/dialog\";\n    import WriteOff from \"../../components/writeOff\";\n    import { HappyScroll } from 'vue-happy-scroll'\n    import { serviceInfo } from '@/api/kefu_mobile'\n    export default {\n        name: \"AdminOrderList\",\n        components: {\n            WriteOff,\n            PriceChange,\n            Loading,\n            HappyScroll\n        },\n        props: {},\n        data: function() {\n            return {\n\t\t\t\topenErp:false,\n                current: \"\",\n                change: false,\n                types: 0,\n                where: {\n                    page: 1,\n                    limit: 15,\n                    search: '',\n                    type: \"\"\n                },\n                list: [],\n                loaded: false,\n                loading: false,\n                orderInfo: {},\n                status: null,\n                iShidden: false,\n                ops:{\n                    vuescroll:{\n                        mode: 'slide',\n                        enable: false,\n                        tips: {\n                            deactive: 'Push to Load',\n                            active: 'Release to Load',\n                            start: 'Loading...',\n                            beforeDeactive: 'Load Successfully!'\n                        },\n                        auto: false,\n                        autoLoadDistance: 0,\n                        pullRefresh: {\n                            enable: false\n                        },\n                        pushLoad: {\n                            enable: true,\n                            auto: true,\n                            autoLoadDistance: 10\n                        }\n                    },\n                    bar:{\n                        background:'#393232',\n                        opacity:'.5',\n                        size:'2px'\n                    }\n                },\n            };\n        },\n        watch: {\n            \"$route.params.type\": function(newVal) {\n                let that = this;\n                if (newVal != undefined) {\n                    that.where.type = newVal;\n                    that.init();\n                }\n            },\n            types: function() {\n                this.getIndex();\n            }\n        },\n        created() {\n\t\t\tthis.getErpConfig();\n           // import('@/assets/js/media_750')\n            serviceInfo().then(res => {\n                window.document.title = `${res.data.site_name} - 订单列表`\n            })\n        },\n        mounted() {\n            this.current = \"\";\n            this.getIndex();\n            this.$scroll(this.$refs.container, () => {\n                !this.loading && this.getIndex();\n            });\n        },\n        methods: {\n\t\t\tgetErpConfig(){\n\t\t\t\terpConfig().then(res=>{\n\t\t\t\t\tthis.openErp = res.data.open_erp;\n\t\t\t\t}).catch(err=>{\n\t\t\t\t\tthis.$Message.error(err.msg);\n\t\t\t\t})\n\t\t\t},\n            // 搜索回车\n            bindSearch(){\n              this.init()\n            },\n            // 去核销\n            storeCancellation(item){\n\t\t\t\tif(openErp) return\n                this.orderInfo = item;\n                this.iShidden = true;\n            },\n            cancel: function(res) {\n                this.iShidden = res;\n            },\n            confirm: function() {\n                orderVerificApi(this.orderInfo.id)\n                    .then(res => {\n                        this.iShidden = false;\n                        this.init();\n                        this.$dialog.success(res.msg);\n                    })\n                    .catch(res => {\n                        this.$dialog.error(res.msg);\n                    });\n            },\n            more: function(index) {\n                if (this.current === index) this.current = \"\";\n                else this.current = index;\n            },\n            modify: function(item, status) {\n\t\t\t\tif(status==0 && openErp) return\n                this.change = true;\n                this.orderInfo = item;\n                this.status = status;\n            },\n            closeChange(msg){\n                this.change = msg;\n            },\n            changeclose: function(msg) {\n                this.change = msg;\n                this.init();\n            },\n            // 拒绝退款\n            getRefuse(id) {\n                orderRefuseApi(data).then(() =>{\n                    that.change = false;\n                    that.$dialog.success(\"已拒绝退款\");\n                    that.init();\n                }).catch((error) => {\n                    that.$dialog.error(error.message);\n                });\n            },\n            async savePrice(opt) {\n                let that = this,\n                    data = {},\n                    price = opt.price,\n                    refundPrice = opt.refundPrice,\n                    refundStatus = that.orderInfo.refundStatus,\n                    remark = opt.remark;\n                if (that.status == 0 && refundStatus === 0) {\n                    try {\n                        await this.$validator({\n                            price: [\n                                required(required.message(\"金额\"))\n                            ]\n                        }).validate({ price });\n                    } catch (e) {\n                        return validatorDefaultCatch(e);\n                    }\n                    data.price = price;\n                    data.orderId  = opt.orderId;\n                    editPriceApi(data).then(() =>{\n                        that.change = false;\n                        that.$dialog.success(\"改价成功\");\n                        that.init();\n                    }).catch((error) => {\n                        that.$dialog.error(error.message);\n                    });\n                } else if (that.status == 0 && refundStatus === 1) {\n                    try {\n                        await this.$validator({\n                            refundPrice: [\n                                required(required.message(\"金额\")),\n                                num(num.message(\"金额\"))\n                            ]\n                        }).validate({ refundPrice });\n                    } catch (e) {\n                        return validatorDefaultCatch(e);\n                    }\n                    data.amount = refundPrice;\n                    data.type = opt.type;\n                    data.orderId  = opt.orderId;\n                    orderRefundApi(data).then(\n                        res => {\n                            that.change = false;\n                            that.$dialog.success('退款成功');\n                            that.init();\n                        },\n                        err => {\n                            that.change = false;\n                            that.$dialog.error(err.message);\n                        }\n                    );\n                } else {\n                    try {\n                        await this.$validator({\n                            remark: [required(required.message(\"备注\"))]\n                        }).validate({ remark });\n                    } catch (e) {\n                        return validatorDefaultCatch(e);\n                    }\n                    data.mark = remark;\n                    data.id = opt.id;\n                    orderMarkApi(data).then(\n                        res => {\n                            that.change = false;\n                            that.$dialog.success('提交成功');\n                            that.init();\n                        },\n                        err => {\n                            that.change = false;\n                            that.$dialog.error(err.msg);\n                        }\n                    );\n                }\n            },\n            init: function() {\n                this.list = [];\n                this.where.page = 1;\n                this.loaded = false;\n                this.loading = false;\n                this.getIndex();\n                this.current = \"\";\n            },\n            getIndex() {\n                if (this.loading || this.loaded) return;\n                this.loading = true;\n                getorderList(this.$route.params.toUid,this.where).then(\n                    res => {\n                        this.loading = false;\n                        this.loaded = res.data.length < this.where.limit;\n                        this.list.push.apply(this.list, res.data || []);\n                        this.where.page = this.where.page + 1;\n                        this.$nextTick(()=>{\n                            if(this.list.length>0)\n                                this.$refs['scrollBox'].refresh();\n                        })\n                    },\n                    err => {\n                        this.$dialog.error(err.msg);\n                    }\n                );\n            },\n            changeStatus(val) {\n                if (this.where.type !== val) {\n                    this.where.type = val;\n                    this.init();\n                }\n            },\n            toDetail(item) {\n               this.$router.push({ path: \"/kefu/orderDetail/\" + item.id });\n            },\n            offlinePay(item) {\n                // setOfflinePay({ order_id: item.order_id }).then(\n                //   res => {\n                //     this.$dialog.success(res.message);\n                //     this.init();\n                //   },\n                //   error => {\n                //     this.$dialog.error(error.message);\n                //   }\n                // );\n            },\n            // 话术滚动到底部\n            handleWordsScroll(vm, refreshDom, done){\n                this.getIndex()\n                done();\n            },\n        }\n    };\n",null]}