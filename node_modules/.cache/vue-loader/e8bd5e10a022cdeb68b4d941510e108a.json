{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/components/mobileConfig/c_home_goods_list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/components/mobileConfig/c_home_goods_list.vue","mtime":1659665784000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import { getCategory, getProduct } from '@/api/diy'\n    import toolCom from '@/components/mobileConfigRight/index.js'\n    import { mapState, mapMutations, mapActions } from 'vuex'\n    import rightBtn from '@/components/rightBtn/index.vue';\n    export default {\n        name: 'c_home_goods_list',\n        componentsName: 'home_goods_list',\n        cname: '商品列表',\n        props: {\n            activeIndex: {\n                type: null\n            },\n            num: {\n                type: null\n            },\n            index: {\n                type: null\n            }\n        },\n        components: {\n            ...toolCom,\n            rightBtn\n        },\n        data () {\n            return {\n                configObj: {},\n                rCom: [\n                    {\n                        components: toolCom.c_set_up,\n                        configNme: 'setUp'\n                    }\n                ],\n                automatic: [\n                    {\n                        components: toolCom.c_tab,\n                        configNme: 'tabConfig'\n                    },\n                    {\n                        components: toolCom.c_cascader,\n                        configNme: 'selectConfig'\n                    },\n                    {\n                        components: toolCom.c_txt_tab,\n                        configNme: 'goodsSort'\n                    },\n                    {\n                        components: toolCom.c_input_number,\n                        configNme: 'numConfig'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'titleShow'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'opriceShow'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'priceShow'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'couponShow'\n                    }\n                ],\n                manual: [\n                    {\n                        components: toolCom.c_tab,\n                        configNme: 'tabConfig'\n                    },\n                    {\n                        components: toolCom.c_goods,\n                        configNme: 'goodsList'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'titleShow'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'opriceShow'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'priceShow'\n                    },\n                    {\n                        components: toolCom.c_is_show,\n                        configNme: 'couponShow'\n                    }\n                ],\n                setUp: 0,\n                type: 0,\n                lockStatus: false\n            }\n        },\n        watch: {\n            num (nVal) {\n                let value = JSON.parse(JSON.stringify(this.$store.state.admin.mobildConfig.defaultArray[nVal]))\n                this.configObj = value;\n                if(!value.selectConfig.list || !value.selectConfig.list[0].value){\n                    this.getCategory();\n                }\n            },\n            configObj: {\n                handler (nVal, oVal) {\n                    this.$store.commit('admin/mobildConfig/UPDATEARR', { num: this.num, val: nVal });\n                },\n                deep: true\n            },\n            'configObj.setUp.tabVal': {\n                handler (nVal, oVal) {\n                    this.setUp = nVal;\n                    var arr = [this.rCom[0]]\n                    if (nVal == 0) {\n                        if(this.type){\n                            this.rCom = arr.concat(this.manual)\n                        }else {\n                            this.rCom = arr.concat(this.automatic)\n                        }\n                    } else {\n                        let tempArr = [\n                            {\n                                components: toolCom.c_bg_color,\n                                configNme: 'themeColor'\n                            },\n                            {\n                                components: toolCom.c_bg_color,\n                                configNme: 'fontColor'\n                            },\n                            {\n                                components: toolCom.c_bg_color,\n                                configNme: 'labelColor'\n                            },\n                            {\n                                components: toolCom.c_txt_tab,\n                                configNme: 'itemStyle'\n                            },\n                            {\n                                components: toolCom.c_txt_tab,\n                                configNme: 'bgStyle'\n                            },\n                            {\n                                components: toolCom.c_txt_tab,\n                                configNme: 'conStyle'\n                            },\n                            {\n                                components: toolCom.c_slider,\n                                configNme: 'prConfig'\n                            },\n                            {\n                                components: toolCom.c_slider,\n                                configNme: 'mbConfig'\n                            }\n                        ]\n                        this.rCom = arr.concat(tempArr)\n                    }\n                },\n                deep: true\n            },\n            'configObj.tabConfig.tabVal': {\n                handler (nVal, oVal) {\n                    this.type = nVal;\n                    var arr = [this.rCom[0]];\n                    if(this.setUp === 0){\n                        if (nVal === 0) {\n                            this.rCom = arr.concat(this.automatic)\n                        } else {\n                            this.rCom = arr.concat(this.manual)\n                        }\n                    }\n                },\n                deep: true\n            }\n        },\n        mounted () {\n            this.$nextTick(() => {\n                let value = JSON.parse(JSON.stringify(this.$store.state.admin.mobildConfig.defaultArray[this.num]))\n                this.configObj = value;\n                this.getCategory();\n            })\n        },\n        methods: {\n            getConfig (data) {\n                if (!data.name && data == 1) {\n                    this.configObj.goodsList.list = []\n                    return\n                }\n                if (!data.name && data == 0 && !this.configObj.selectConfig.activeValue.length) {\n                    this.configObj.goodsList.list = []\n                    return\n                }\n                // if( data.name=='radio'){\n                //     return;\n                // }\n\t\t\t\tlet activeValue = this.configObj.selectConfig.activeValue\n                getProduct({\n                    id: activeValue[activeValue.length-1],\n                    page: 1,\n                    limit: this.configObj.numConfig.val,\n                    priceOrder: this.configObj.goodsSort.type == 2 ? 'desc' : '',\n                    salesOrder: this.configObj.goodsSort.type == 1 ? 'desc' : ''\n                }).then(res => {\n                    this.configObj.productList.list = res.data;\n                })\n            },\n            getCategory () {\n                getCategory().then(res => {\n                    // let data = [];\n                    // res.data.map(item => {\n                    //     data.push({ title: item.title, pid: item.pid, activeValue: item.id.toString() });\n                    // });\n                    this.$set(this.configObj.selectConfig,'list',res.data)\n                })\n            }\n        }\n    }\n",null]}