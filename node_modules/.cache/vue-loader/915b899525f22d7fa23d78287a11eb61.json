{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/account/login/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/account/login/index.vue","mtime":1664880383118},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { AccountLogin, loginInfoApi, mobilLogin, resetPassword, copyrightInfoApi} from '@/api/account';\nimport { getHeaderName, getHeaderSider, getMenuSider, getSiderSubmenu } from '@/libs/system';\nimport mixins from '../mixins';\nimport Setting from '@/setting';\nimport util from '@/libs/util';\nimport axios from 'axios';\n// import Vcode from \"vue-puzzle-vcode\";\nimport Verify from \"@/components/verifition/Verify\";\nexport default {\n    mixins: [mixins],\n    components: {\n        Verify,\n        // Vcode\n    },\n    data() {\n        return {\n            fullWidth: document.documentElement.clientWidth,\n            swiperOption: {\n                pagination: '.swiper-pagination',\n                autoplay: true\n            },\n            isShow: false, // 验证码模态框是否出现\n            loading: false,\n            autoLogin: true,\n            imgcode: '',\n            formInline: {\n                username: '',\n                password: '',\n                phone: '',\n                code: '',\n                new_pwd: ''\n            },\n            ruleInline: {\n                username: [\n                    { required: true, message: '请输入用户名', trigger: 'blur' }\n                ],\n                password: [\n                    { required: true, message: '请输入密码', trigger: 'blur' }\n                ],\n                code: [\n                    { required: true, message: '请输入验证码', trigger: 'blur' }\n                ],\n                phone: [\n                    { required: true, message: '请填写手机号码', trigger: 'change' },\n                    { pattern: /^1[3456789]\\d{9}$/, message: \"手机号码格式不正确\", trigger: \"change\" }\n                ],\n\n            },\n            errorNum: 0,\n            login_logo: '',\n            swiperList: [],\n            defaultSwiperList: require('@/assets/images/sw.jpg'),\n            loginTab: ['账号登录', '短信登录'],\n            active: 0,\n            isSms: false,\n            disabled: false,\n            text: \"获取验证码\",\n            resetStatus: true,\n            copyright: '',\n            version:''\n        }\n    },\n    created() {\n        var _this = this;\n        top != window && (top.location.href = location.href);\n        document.onkeydown = function (e) {\n            if (_this.$route.name === 'login') {\n                let key = window.event.keyCode;\n                if (key === 13) {\n                    _this.handleSubmit('formInline');\n                }\n            }\n        };\n        window.addEventListener('resize', this.handleResize)\n    },\n    watch: {\n        fullWidth(val) {\n            // 为了避免频繁触发resize函数导致页面卡顿，使用定时器\n            if (!this.timer) {\n                // 一旦监听到的screenWidth值改变，就将其重新赋给data里的screenWidth\n                this.screenWidth = val\n                this.timer = true\n                let that = this\n                setTimeout(function () {\n                    // 打印screenWidth变化的值\n                    that.timer = false\n                }, 400)\n            }\n        },\n        $route(n) {\n            this.captchas();\n        }\n    },\n    mounted: function () {\n        this.$nextTick(() => {\n            if (this.screenWidth < 768) {\n                document.getElementsByTagName('canvas')[0] ? document.getElementsByTagName('canvas')[0].removeAttribute('class', 'index_bg') : '';\n            } else {\n                document.getElementsByTagName('canvas')[0] ? document.getElementsByTagName('canvas')[0].className = 'index_bg' : '';\n            }\n            this.swiperData();\n        });\n        this.captchas();\n        this.getCopyright();\n    },\n    methods: {\n        //切换登录方式\n        loginTabSwitch(index) {\n            this.active = index;\n            this.formInline.code = \"\";\n        },\n        //发送验证码\n        \n        sendCode(params) {\n            if(this.disabled) {\n                this.closeModel(params);\n            }\n            // if (this.disabled) return;\n            this.disabled = true;\n            let n = 60;\n            this.text = \"剩余 \" + n + \"s\";\n            const run = setInterval(() => {\n                n = n - 1;\n                if (n < 0) {\n                    clearInterval(run);\n                }\n                this.text = \"剩余 \" + n + \"s\";\n                if (this.text < \"剩余 \" + 0 + \"s\") {\n                    this.disabled = false;\n                    this.text = \"重新获取\";\n                }\n            }, 1000);\n        },\n        code() {\n            this.isSms = true;\n            if (!this.formInline.phone) return this.$Message.error('请填写手机号码');\n            if (!/^1(3|4|5|7|8|9|6)\\d{9}$/i.test(this.formInline.phone)) return this.$Message.error('请输入正确的手机号码');\n            this.$refs.verify.show()    \n\n        },\n        //忘记密码\n        resetUpwd() {\n            if (this.resetStatus) {\n                this.$set(this, 'loginTab', ['忘记密码']);\n                this.resetStatus = false;\n            } else {\n                this.$set(this, 'loginTab', ['账号登录', '短信登录']);\n                this.resetStatus = true;\n                this.active = 0;\n            }\n            this.$refs['formInline'].resetFields();\n        },\n        swiperData() {\n            loginInfoApi().then(res => {\n                let data = res.data || {};\n                this.login_logo = data.login_logo ? data.login_logo : require('@/assets/images/logo.png');\n                this.swiperList = data.slide.length ? data.slide : [this.defaultSwiperList];\n                // this.swiperList = data.slide.length ? data.slide : [{ slide: this.defaultSwiperList }];\n                this.$cache.local.setJSON( 'file_size_max',data.upload_file_size_max);\n            }).catch(res => {\n                this.$Message.error(res.msg)\n            })\n        },\n        getChilden(data) {\n            if(data.length && data[0].children) {\n                return this.getChilden(data[0].children)\n            }\n            return data[0].path\n        },\n        getCopyright() {\n          copyrightInfoApi().then(res => {\n            let data = res.data;\n            this.copyright = data.copyrightContext;\n            this.version = data.version;\n          }).catch(res => {\n            this.$Message.error(res.msg)\n          })\n        },\n        // 关闭模态框\n        closeModel(params) {    \n            if(this.resetStatus == false) {\n                if (this.formInline.phone == \"\") return this.$Message.error(\"手机号不能为空\");\n                if (this.formInline.new_pwd == \"\") return this.$Message.error(\"新密码不能为空\");\n                resetPassword({\n                    phone: this.formInline.phone,\n                    code: this.formInline.code,\n                    new_pwd: this.formInline.new_pwd,\n                    // captchaType: 'blockPuzzle',\n                    // captchaVerification: params.captchaVerification,\n                }).then(res => {\n                    this.$Message.success(res.msg);\n                    this.$set(this, 'loginTab', ['账号登录', '短信登录']);\n                    this.resetStatus = true;\n                    this.active = 0;\n                    this.$refs['formInline'].resetFields();\n                }).catch(err => {\n                    this.$Message.error(err.msg)\n                })\n            }else if (this.resetStatus == true && this.active == 0) {\n                let msg = this.$Message.loading({\n                    content: '登录中...',\n                    duration: 0\n                });\n                AccountLogin({\n                    account: this.formInline.username,\n                    pwd: this.formInline.password,\n                    imgcode: this.formInline.code,\n                    captchaType: 'blockPuzzle',\n                    captchaVerification: params.captchaVerification,\n                }).then(async res => {\n                    msg();\n                    if (!res.data.unique_auth.length) return this.$Message.error('您暂无任何菜单权限');\n                    this.$store.dispatch('admin/account/setPageTitle')\n                    let expires = res.data.expires_time;\n                    // 记录用户登陆信息\n                    util.cookies.set('uuid', res.data.user_info.id, {\n                        expires: expires\n                    });\n                    util.cookies.set('token', res.data.token, {\n                        expires: expires\n                    });\n                    util.cookies.set('expires_time', res.data.expires_time, {\n                        expires: expires\n                    });\n                    const db = await this.$store.dispatch('admin/db/database', {\n                        user: true\n                    });\n                    // 保存菜单信息\n                    // db.set('menus', res.data.menus).set('unique_auth', res.data.unique_auth).set('user_info', res.data.user_info).write();\n                    db.set('unique_auth', res.data.unique_auth).set('user_info', res.data.user_info).write();\n                    const menuSider = res.data.menus;\n                    this.$store.commit('admin/menus/getmenusNav', menuSider);\n                    let headerSider = getHeaderSider(res.data.menus);\n                    this.$store.commit('admin/menu/setHeader', headerSider);\n                    let toPath = this.getChilden(res.data.menus);\n                    // 获取侧边栏菜单\n                    const headerName = getHeaderName({\n                        path: toPath,\n                        query:{},\n                        params:{},\n                    }, menuSider);\n                    const filterMenuSider = getMenuSider(menuSider, headerName);\n                    // 指定当前显示的侧边菜单\n                    this.$store.commit('admin/menu/setSider', filterMenuSider[0].children);\n                    //设置首页path\n                    this.$store.commit('admin/menus/setIndexPath', toPath);\n                    // 记录用户信息\n                    this.$store.dispatch('admin/user/set', {\n                        name: res.data.user_info.account,\n                        avatar: res.data.user_info.head_pic,\n                        access: res.data.unique_auth,\n                        logo: res.data.logo,\n                        logoSmall: res.data.logo_square,\n                        version: res.data.version,\n                        newOrderAudioLink: res.data.newOrderAudioLink\n                    });\n                    // if (this.jigsaw) this.jigsaw.reset();\n\n\n                    return this.$router.replace({ path: this.$route.query.redirect || toPath || '/admin/' });\n                }).catch(res => {\n                    msg();\n                    let data = res === undefined ? {} : res;\n                    this.errorNum++;\n                    this.captchas();\n                    this.$Message.error(data.msg || '登录失败');\n                });\n            } else {\n                let msg = this.$Message.loading({\n                    content: '登录中...',\n                    duration: 0\n                });\n                mobilLogin({\n                    phone: this.formInline.phone,\n                    code: this.formInline.code,\n                }).then(async res => {\n                    msg();\n                    if (!res.data.unique_auth.length) return this.$Message.error('您暂无任何菜单权限');\n                    this.$store.dispatch('admin/account/setPageTitle')\n                    let expires = res.data.expires_time;\n                    // 记录用户登陆信息\n                    util.cookies.set('uuid', res.data.user_info.id, {\n                        expires: expires\n                    });\n                    util.cookies.set('token', res.data.token, {\n                        expires: expires\n                    });\n                    util.cookies.set('expires_time', res.data.expires_time, {\n                        expires: expires\n                    });\n                    const db = await this.$store.dispatch('admin/db/database', {\n                        user: true\n                    });\n                    // 保存菜单信息\n                    // db.set('menus', res.data.menus).set('unique_auth', res.data.unique_auth).set('user_info', res.data.user_info).write();\n                    db.set('unique_auth', res.data.unique_auth).set('user_info', res.data.user_info).write();\n\n                    const menuSider = res.data.menus;\n                    this.$store.commit('admin/menus/getmenusNav', menuSider);\n                    let headerSider = getHeaderSider(res.data.menus);\n                    this.$store.commit('admin/menu/setHeader', headerSider);\n                    let toPath = this.getChilden(res.data.menus);\n                    // 获取侧边栏菜单\n                    const headerName = getHeaderName({\n                        path: toPath,\n                        query:{},\n                        params:{},\n                    }, menuSider);\n                    const filterMenuSider = getMenuSider(menuSider, headerName);\n                    // 指定当前显示的侧边菜单\n                    this.$store.commit('admin/menu/setSider', filterMenuSider[0].children);\n                    //设置首页path\n                    this.$store.commit('admin/menus/setIndexPath', toPath);\n                    // 记录用户信息\n                    this.$store.dispatch('admin/user/set', {\n                        name: res.data.user_info.account,\n                        avatar: res.data.user_info.head_pic,\n                        access: res.data.unique_auth,\n                        logo: res.data.logo,\n                        logoSmall: res.data.logo_square,\n                        version: res.data.version,\n                        newOrderAudioLink: res.data.newOrderAudioLink\n                    });\n                    return this.$router.replace({ path: this.$route.query.redirect || toPath || '/admin/' });\n                }).catch(res => {\n                    msg();\n                    let data = res === undefined ? {} : res;\n                    this.errorNum++;\n                    this.captchas();\n                    this.$Message.error(data.msg || '登录失败');\n                });\n            }\n        },\n        getExpiresTime(expiresTime) {\n            let nowTimeNum = Math.round(new Date() / 1000);\n            let expiresTimeNum = expiresTime - nowTimeNum;\n            return parseFloat(parseFloat(parseFloat(expiresTimeNum / 60) / 60) / 24);\n        },\n        handleResize(event) {\n            this.fullWidth = document.documentElement.clientWidth\n            if (this.fullWidth < 768) {\n                document.getElementsByTagName('canvas')[0].removeAttribute('class', 'index_bg');\n            } else {\n                document.getElementsByTagName('canvas')[0].className = 'index_bg';\n            }\n        },\n        captchas: function () {\n            this.imgcode = Setting.apiBaseURL + '/captcha_pro?' + Date.parse(new Date());\n        },\n        handleSubmit(name) {\n            this.$refs[name].validate((valid) => {\n                if (valid) {\n                    this.$refs.verify.show()\n                    // if (this.errorNum >= 2) {\n                    //     this.isShow = true;\n                    // }else {\n                    //     this.closeModel();\n                    // }\n                }\n            })\n        },\n        resetPwd(name) {\n            this.$refs[name].validate((valid) => {\n                if (valid) {\n                    this.$refs.verify.show()\n                    // if (this.formInline.phone == \"\") return this.$Message.error(\"手机号不能为空\");\n                    // if (this.formInline.new_pwd == \"\") return this.$Message.error(\"新密码不能为空\");\n                    // resetPassword({\n                    //     phone: this.formInline.phone,\n                    //     code: this.formInline.code,\n                    //     new_pwd: this.formInline.new_pwd,\n                    //     captchaType: 'blockPuzzle',\n                    //     captchaVerification: params.captchaVerification,\n                    // }).then(res => {\n                    //     this.$Message.success(res.msg);\n                    //     this.$set(this, 'loginTab', ['账号登录', '短信登录']);\n                    //     this.resetStatus = true;\n                    //     this.active = 0;\n                    //     this.$refs['formInline'].resetFields();\n                    // }).catch(err => {\n                    //     this.$Message.error(err.msg)\n                    // })\n                }\n            })\n        },\n        success(params) {\n            if (this.isSms) {\n                let verification = Setting.apiBaseURL.replace(/adminapi/, 'api');\n                axios.get(verification + '/verify_code').then(res => {\n                    let codeData = {\n                        type: \"login\",\n                        phone: this.formInline.phone,\n                        key: res.data.data.key,\n                        code: '',\n                        captchaType: 'blockPuzzle',\n                        captchaVerification: params.captchaVerification,\n                    };\n                    fetch(verification + '/register/verify', {\n                        method: 'POST',\n                        headers: {\n                            \"Content-Type\": \"application/json\"\n                        },\n                        body: JSON.stringify(codeData)\n                    }\n                    ).then(response => {\n                        this.sendCode();\n                    }).catch(err => {\n                        this.$Message.error(err.msg);\n                    })\n                })\n            } else {\n                this.closeModel(params);\n                //可执行通过验证后的操作\n            }\n\n        },\n        // 用户点击遮罩层，应该关闭模态框\n        onClose() {\n            this.isShow = false;\n        }\n    },\n    beforeCreate() {\n        if (this.fullWidth < 768) {\n            document.getElementsByTagName('canvas')[0] ? document.getElementsByTagName('canvas')[0].removeAttribute('class', 'index_bg') : '';\n        } else {\n            document.getElementsByTagName('canvas')[0] ? document.getElementsByTagName('canvas')[0].className = 'index_bg' : '';\n        }\n    },\n    beforeDestroy: function () {\n        window.removeEventListener('resize', this.handleResize);\n        document.getElementsByTagName('canvas')[0] ? document.getElementsByTagName('canvas')[0].removeAttribute('class', 'index_bg') : '';\n    }\n};\n",null]}