{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/pages/setting/systemMenus/components/menusFrom.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/pages/setting/systemMenus/components/menusFrom.vue","mtime":1658973957000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { addMenusApi, addMenus, getRuleList } from \"@/api/systemMenus\";\nimport icon from \"@/utils/icon\";\n\nexport default {\n  name: \"menusFrom\",\n  props: {\n    formValidate: {\n      type: Object,\n      default: null,\n    },\n    titleFrom: {\n      type: String,\n      default: \"\",\n    },\n  },\n  data() {\n    return {\n      arrs: [],\n      searchRule: \"\",\n      iconVal: \"\",\n      grid: {\n        xl: 12,\n        lg: 12,\n        md: 12,\n        sm: 24,\n        xs: 24,\n      },\n      modals: false,\n      modal12: false,\n      ruleValidate: {\n        // menu_name: [\n        //   { required: true, message: \"请输入按钮名称\", trigger: \"blur\" },\n        // ],\n        // menu_path: [\n        //   { required: true, message: \"请输入路由名称\", trigger: \"blur\" },\n        // ],\n        // methods: [\n        //   { required: true, message: \"请选择接口请求方式\", trigger: \"blur\" },\n        // ],\n        // api_url: [\n        //   { required: true, message: \"请填写接口请求地址\", trigger: \"blur\" },\n        // ],\n      },\n      FromData: [],\n      valids: false,\n      list2: [],\n      list: icon,\n      authType: true,\n      search: icon,\n      ruleModal: false,\n      ruleList: [],\n    };\n  },\n  watch: {\n    \"formValidate.header\": function(n) {\n      this.formValidate.is_header = n ? 1 : 0;\n    },\n    \"formValidate.auth_type\": function(n) {\n      if (n === undefined) {\n        n = 1;\n      }\n      this.authType = n === 1;\n    },\n    \"formValidate.data\": function(n) {},\n  },\n  computed: {\n    /* eslint-disable */\n    optionsList() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"pid\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    headerOptionsList() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"header\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    optionsListmodule() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"module\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    optionsRadio() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"auth_type\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    isheaderRadio() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"is_header\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    isShowRadio() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"is_show\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    isShowPathRadio() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"is_show_path\" === item.field) {\n          a = item.options;\n        }\n      });\n      return a;\n    },\n    menuList() {\n      let a = [];\n      this.FromData.map((item) => {\n        if (\"menu_list\" === item.field) {\n          a = item.props.data;\n        }\n      });\n      return a;\n    },\n  },\n  methods: {\n    // 获取权限列表\n    getRuleList() {\n      getRuleList().then((res) => {\n        this.ruleList = res.data;\n        this.ruleModal = true;\n      });\n    },\n    modalchange(type) {\n      if (!type) {\n        this.arrs = [];\n        this.ruleModal = \"\";\n        this.ruleModal = false;\n      }\n    },\n    visible(type) {\n      if (!type) {\n        this.authType = true;\n      }\n    },\n    selectRule(data) {\n      this.$emit(\"selectRule\", data);\n      this.$nextTick((e) => {\n        this.ruleModal = false;\n      });\n      // this.$set(this, \"ruleModal\", false);\n    },\n    changeRadio(n) {\n      this.authType = n === 1 ? true : false;\n    },\n    // 搜索\n    upIcon(n) {\n      let arrs = [];\n      for (var i = 0; i < this.search.length; i++) {\n        if (this.search[i].type.indexOf(n) !== -1) {\n          arrs.push(this.search[i]);\n          this.list = arrs;\n        }\n      }\n    },\n    // 搜索规则\n    searchRules() {\n      if (this.searchRule.trim()) {\n        this.arrs = [];\n        for (var i = 0; i < this.ruleList.length; i++) {\n          if (this.ruleList[i].real_name.indexOf(this.searchRule) !== -1) {\n            this.arrs.push(i);\n          }\n        }\n      } else {\n        this.arrs = [];\n      }\n    },\n    init() {\n      this.searchRule = \"\";\n      this.arrs = [];\n    },\n    handleCreate1(val) {\n      this.headerOptionsList.push({\n        value: val,\n        label: val,\n      });\n    },\n    // 获取新增表单\n    getAddFrom() {\n      addMenus()\n        .then(async (res) => {\n          this.FromData = res.data.rules;\n        })\n        .catch((res) => {\n          this.$Message.error(res.msg);\n        });\n    },\n    iconClick() {\n      this.modal12 = true;\n    },\n    iconChange(n) {\n      this.formValidate.icon = n;\n      this.modal12 = false;\n    },\n    // 提交\n    handleSubmit(name) {\n      //判断是否选择父级分类\n      if (this.formValidate.path) {\n        let length = this.formValidate.path.length;\n        this.formValidate.pid = this.formValidate.path[length - 1] || 0;\n      }\n      let data = {\n        url: this.formValidate.id\n          ? `/setting/menus/${this.formValidate.id}`\n          : \"/setting/menus\",\n        method: this.formValidate.id ? \"put\" : \"post\",\n        datas: this.formValidate,\n      };\n\t\t\tif(this.authType){\n\t\t\t\tif(!this.formValidate.menu_name){\n\t\t\t\t\treturn this.$Message.error(\"请添加按钮名称！\");\n\t\t\t\t}\n\t\t\t\tif(!this.formValidate.menu_path){\n\t\t\t\t\treturn this.$Message.error(\"请添加路由地址！\");\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif (!this.formValidate.menu_name){\n\t\t\t\t\treturn this.$Message.error(\"请添加接口名称！\");\n\t\t\t\t}\n\t\t\t\tif(!this.formValidate.api_url){\n\t\t\t\t\treturn this.$Message.error(\"请添加接口地址！\");\n\t\t\t\t}\n\t\t\t}\n      this.$refs[name].validate((valid) => {\n        if (valid) {\n          this.valids = true;\n          addMenusApi(data)\n            .then(async (res) => {\n              this.$Message.success(res.msg);\n              this.modals = false;\n              this.$emit(\"getList\");\n              this.getAddFrom();\n              this.$store.dispatch(\"admin/menus/getMenusNavList\");\n            })\n            .catch((res) => {\n\t\t\t\t\t\t\tthis.valids = false;\n              this.$Message.error(res.msg);\n            });\n        }\n      });\n    },\n    handleReset() {\n      this.modals = false;\n      this.authType = true;\n      this.$emit(\"clearFrom\");\n    },\n  },\n  created() {\n    this.list = this.search;\n    this.getAddFrom();\n  },\n};\n",null]}