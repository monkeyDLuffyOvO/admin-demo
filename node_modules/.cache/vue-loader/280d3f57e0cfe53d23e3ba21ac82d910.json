{"remainingRequest":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js??ref--0-2!/home/darkcrossunicorn/文档/admin/src/components/verifition/Verify/VerifyPoints.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/darkcrossunicorn/文档/admin/src/components/verifition/Verify/VerifyPoints.vue","mtime":1663402499000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/darkcrossunicorn/文档/admin/node_modules/iview-loader/index.js","mtime":1570440814000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/**\n     * VerifyPoints\n     * @description 点选\n     * */\nimport { resetSize, _code_chars, _code_color1, _code_color2 } from './../utils/util'\nimport { aesEncrypt } from './../utils/ase'\nimport {ajCaptcha, ajCaptchaCheck} from \"../../../api/common\";\n\nexport default {\n  name: 'VerifyPoints',\n  props: {\n    // 弹出式pop，固定fixed\n    mode: {\n      type: String,\n      default: 'fixed'\n    },\n    captchaType: {\n      type: String,\n    },\n    // 间隔\n    vSpace: {\n      type: Number,\n      default: 5\n    },\n    imgSize: {\n      type: Object,\n      default() {\n        return {\n          width: '310px',\n          height: '155px'\n        }\n      }\n    },\n    barSize: {\n      type: Object,\n      default() {\n        return {\n          width: '310px',\n          height: '40px'\n        }\n      }\n    },\n    defaultImg: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      secretKey: '', // 后端返回的ase加密秘钥\n      checkNum: 3, // 默认需要点击的字数\n      fontPos: [], // 选中的坐标信息\n      checkPosArr: [], // 用户点击的坐标\n      num: 1, // 点击的记数\n      pointBackImgBase: '', // 后端获取到的背景图片\n      poinTextList: [], // 后端返回的点击字体顺序\n      backToken: '', // 后端返回的token值\n      setSize: {\n        imgHeight: 0,\n        imgWidth: 0,\n        barHeight: 0,\n        barWidth: 0\n      },\n      tempPoints: [],\n      text: '',\n      barAreaColor: undefined,\n      barAreaBorderColor: undefined,\n      showRefresh: true,\n      bindingClick: true\n    }\n  },\n  computed: {\n    resetSize() {\n      return resetSize\n    }\n  },\n  watch: {\n    // type变化则全面刷新\n    type: {\n      immediate: true,\n      handler() {\n        this.init()\n      }\n    }\n  },\n  mounted() {\n    // 禁止拖拽\n    this.$el.onselectstart = function() {\n      return false\n    }\n  },\n  methods: {\n    init() {\n      // 加载页面\n      this.fontPos.splice(0, this.fontPos.length)\n      this.checkPosArr.splice(0, this.checkPosArr.length)\n      this.num = 1\n      this.getPictrue()\n      this.$nextTick(() => {\n        this.setSize = this.resetSize(this)\t// 重新设置宽度高度\n        this.$parent.$emit('ready', this)\n      })\n    },\n    canvasClick(e) {\n      this.checkPosArr.push(this.getMousePos(this.$refs.canvas, e))\n      if (this.num == this.checkNum) {\n        this.num = this.createPoint(this.getMousePos(this.$refs.canvas, e))\n        // 按比例转换坐标值\n        this.checkPosArr = this.pointTransfrom(this.checkPosArr, this.setSize)\n        // 等创建坐标执行完\n        setTimeout(() => {\n          // var flag = this.comparePos(this.fontPos, this.checkPosArr);\n          // 发送后端请求\n          var captchaVerification = this.secretKey ? aesEncrypt(this.backToken + '---' + JSON.stringify(this.checkPosArr), this.secretKey) : this.backToken + '---' + JSON.stringify(this.checkPosArr)\n          const data = {\n            captchaType: this.captchaType,\n            'pointJson': this.secretKey ? aesEncrypt(JSON.stringify(this.checkPosArr), this.secretKey) : JSON.stringify(this.checkPosArr),\n            'token': this.backToken\n          }\n          ajCaptchaCheck(data).then(res => {\n            if (res.repCode == '0000') {\n              this.barAreaColor = '#4cae4c'\n              this.barAreaBorderColor = '#5cb85c'\n              this.text = '验证成功'\n              this.bindingClick = false\n              if (this.mode == 'pop') {\n                setTimeout(() => {\n                  this.$parent.clickShow = false\n                  this.refresh()\n                }, 1500)\n              }\n              this.$parent.$emit('success', { captchaVerification })\n            } else {\n              this.$parent.$emit('error', this)\n              this.barAreaColor = '#d9534f'\n              this.barAreaBorderColor = '#d9534f'\n              this.text = '验证失败'\n              setTimeout(() => {\n                this.refresh()\n              }, 700)\n            }\n          })\n        }, 400)\n      }\n      if (this.num < this.checkNum) {\n        this.num = this.createPoint(this.getMousePos(this.$refs.canvas, e))\n      }\n    },\n\n    // 获取坐标\n    getMousePos: function(obj, e) {\n      var x = e.offsetX\n      var y = e.offsetY\n      return { x, y }\n    },\n    // 创建坐标点\n    createPoint: function(pos) {\n      this.tempPoints.push(Object.assign({}, pos))\n      return ++this.num\n    },\n    refresh: function() {\n      this.tempPoints.splice(0, this.tempPoints.length)\n      this.barAreaColor = '#000'\n      this.barAreaBorderColor = '#ddd'\n      this.bindingClick = true\n      this.fontPos.splice(0, this.fontPos.length)\n      this.checkPosArr.splice(0, this.checkPosArr.length)\n      this.num = 1\n      this.getPictrue()\n      this.text = '验证失败'\n      this.showRefresh = true\n    },\n\n    // 请求背景图片和验证图片\n    getPictrue() {\n      const data = {\n        captchaType: this.captchaType,\n        clientUid: localStorage.getItem('point'),\n        ts: Date.now(), // 现在的时间戳\n      }\n      ajCaptcha(data).then(res => {\n        if (res.repCode == '0000') {\n          this.pointBackImgBase = res.repData.originalImageBase64\n          this.backToken = res.repData.token\n          this.secretKey = res.repData.secretKey\n          this.poinTextList = res.repData.wordList\n          this.text = '请依次点击【' + this.poinTextList.join(',') + '】'\n        } else {\n          this.text = res.repMsg\n        }\n\n        // 判断接口请求次数是否失效\n        if (res.repCode == '6201') {\n          this.pointBackImgBase = null\n        }\n      })\n    },\n    // 坐标转换函数\n    pointTransfrom(pointArr, imgSize) {\n      var newPointArr = pointArr.map(p => {\n        const x = Math.round(310 * p.x / parseInt(imgSize.imgWidth))\n        const y = Math.round(155 * p.y / parseInt(imgSize.imgHeight))\n        return { x, y }\n      })\n      // console.log(newPointArr,\"newPointArr\");\n      return newPointArr\n    }\n  },\n}\n",null]}